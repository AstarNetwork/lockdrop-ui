{"version":3,"sources":["resources/ethereum_logo.svg","components/Navbar.tsx","components/EthLock/LockdropCountdownPanel.tsx","data/links.ts","theme/themes.ts","components/Footer.tsx","components/SectionCard.tsx","data/lockInfo.ts","components/TosAgreementModal.tsx","pages/LandingPage.tsx","components/EthLock/CurrentLocks.tsx","components/EthLock/EthGlobalLocks.tsx","components/EthLock/LockedEthList.tsx","components/EthLock/LockdropResult.tsx","components/EthLock/AffiliationList.tsx","pages/FirstEthLockdropPage.tsx","components/DropdownOption.tsx","components/CountdownTimer.tsx","components/BtcLock/LockStatus.tsx","components/CopyMessageBox.tsx","components/BtcLock/QrEncodedAddress.tsx","components/BtcLock/BtcRawSignature.tsx","pages/DustyBtcLockPage.tsx","data/pages.ts","components/SideMenu.tsx","pages/LockdropCalcPage.tsx","components/EthLock/LockdropForm.tsx","components/ClaimStatus.tsx","pages/EthRealTimeLockPage.tsx","App.tsx","serviceWorker.ts","index.tsx","helpers/getWeb3.ts","types/LockdropModels.ts","resources/bitcoin_logo.svg","types/PlasmDrop.ts","resources/quantstamp-logo.png","helpers/plasmUtils.ts","helpers/lockdrop/EthereumLockdrop.ts","helpers/lockdrop/BitcoinLockdrop.ts","resources/plasm-logo.png","resources/ld_logo_a.png","resources/ld_logo_b.png","data/UserAgreement.md","resources/home-outline.svg","resources/logo-twitter.svg","resources/logo-discord.svg","resources/logo-telegram.svg","resources/logo-github.svg","resources/plasm-icon.svg","resources/dusty-icon.svg","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm/legacy lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","data/affiliationProgram.ts"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","grow","flexGrow","navbar","backgroundColor","logoIcon","margin","spacing","maxHeight","height","verticalAlign","title","color","inputRoot","sectionDesktop","display","breakpoints","up","sectionMobile","listItem","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Navbar","classes","className","slot","src","plasmLogo","alt","LockState","Links","Community","description","link","icon","Company","Products","Collaboration","Blogs","ThemeColors","Copyright","Typography","variant","Date","getFullYear","Link","href","rel","target","root","marginTop","socialIcon","paddingLeft","footer","padding","footerHeader","siteMap","StickyFooter","Container","maxWidth","Grid","container","justify","item","component","align","Divider","List","map","company","key","ListItem","button","ListItemText","primary","product","collaboration","blog","community","SectionCard","children","paper","Paper","elevation","firstLockdropStart","moment","unix","firstLockdropEnd","clone","add","secondLockdropStart","secondLockdropEnd","firstLockContract","type","address","blockHeight","Lockdrop","networks","secondLockContract","ethDurations","label","value","rate","ethDustyDurations","btcDurations","btcDustyDurations","textBox","marginLeft","marginRight","TosAgreementModal","showModal","onAgree","useState","toc","setToc","useEffect","fetch","tosContent","then","data","text","isOpen","backdropDismiss","source","escapeHtml","expand","onClick","agree","lockdropLogo","Math","floor","random","lockdropLogoA","lockdropLogoB","logoImg","LandingPage","localStorage","getItem","userAgreed","setUserAgreed","setItem","toString","timezone","useMemo","zoneName","momentTimezone","tz","guess","zoneAbbr","includes","ev","ethLogo","fill","routerLink","format","btcLogo","Footer","listRoot","palette","background","position","overflow","listSection","ul","lockListPage","textAlign","tabMenu","itemButtons","alignContent","UnlockInfo","lockInfo","web3","onClickRefresh","getUnlockDate","useCallback","Number","timestamp","duration","calculateTimeLeft","tillEnd","now","days","hours","minutes","seconds","canUnlock","setLockState","tillUnlock","setUnlockDate","unlocked","setUnlockState","isLoading","setLoading","balanceLoaded","setBalanceLoaded","lockVal","setLockVal","checkUnlock","today","unlockDate","lockClaimState","isLessThanOrEqualTo","BigNumber","interval","setInterval","clearInterval","fetchBalance","a","eth","getBalance","lock","bal","catch","e","console","log","toast","error","message","finally","handleClick","sendTransaction","from","to","alignItems","xs","Web3Utils","fromWei","toFixed","introducer","defaultAddress","LinearProgress","ListItemSecondaryAction","Tooltip","aria-label","IconButton","edge","disabled","Skeleton","animation","CurrentLocks","account","lockData","filter","i","lockOwner","lockEvents","setEvents","length","getTotalLockVal","subheader","ListSubheader","eventItem","index","flexDirection","flexWrap","minHeight","autoSizerWrapper","flex","GlobalLocks","rowCache","CellMeasurerCache","fixedWidth","defaultHeight","keyMapper","totalVal","RowRenderer","style","parent","cache","columnIndex","rowIndex","measure","registerChild","ref","onLoad","blockNo","rowCount","rowHeight","rowRenderer","overscanRowCount","deferredMeasurementCache","TabPanel","props","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","LockedEthList","useTheme","React","setValue","AppBar","Tabs","onChange","_event","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","headerText","LockdropCountdownPanel","startTime","endTime","utc","tillStart","valueOf","difference","diff","timeLeft","getLockState","notStart","start","end","setTimeLeft","lockState","totalLockVal","setTotalLockVal","getLockValue","_totalLockVal","err","PanelWrapper","LockdropResult","pageContent","header","claimButton","PlmDrop","totalPlm","setTotalPlm","exRate","setExRate","setLoadState","showIntoRefPopover","setShowIntroRefPopover","showIntoPopover","setShowIntroPopover","ethFinalExRate","getAccounts","accounts","totalIssue","calculateTotalPlm","countupTotalPlmVal","getTotalPlm","toNumber","decimals","separator","CircularProgress","locks","affiliationRefsBonuses","basePlm","toFormat","getAffBonus","onDidDismiss","introducerAndBonuses","getIntroBonus","IntoRefItems","IntoAffItems","ClaimPlm","paddingTop","addressPanel","nested","plmAddress","setPlmAddress","ethPubkey","setEthPubkey","open","setOpen","getPlasmAddress","getPubKey","pubKey","result","generatePlmAddress","replace","size","ListItemIcon","Collapse","in","timeout","unmountOnExit","IntroducerBonusesItems","lockResult","receiver","AffiliationList","lockdropResult","setLockdropResult","firstEthIntroducer","sort","b","getAffiliationResults","FirstEthLockdropPage","setWeb3","setAccount","loading","networkType","setNetworkType","allLockEvents","setLockEvents","lockdropStart","setLockdropStart","lockdropEnd","setLockdropEnd","isMainnet","currentNetwork","lockStoreKey","find","Array","isArray","serializedEvents","ethLockdrop","web3State","net","getNetworkType","_netType","contAddr","Error","_contract","ethAddr","_end","_start","_allLocks","removeWeb3Event","parseInt","DropdownOption","items","dataSets","x","indexOf","interface","onIonChange","onChoose","CountdownTimer","onFinish","handleCountdownFinish","didFinish","_timeLeft","LockStatus","onUnlock","scriptAddress","lockDurationDay","lockedValue","setLockedValue","setShowModal","setCanUnlock","getLockBal","_lockVout","vout","locked","scriptpubkey_address","btcLockdrop","totalBal","forEach","plus","txid","status","confirmed","block_height","block_time","u","time","name","messageBox","signMessage","justifyContent","wordBreak","copyIcon","CopyMessageBox","componentType","isCode","showCopyToast","setCopyToast","navigator","clipboard","writeText","qrImage","boxSizing","alignSelf","objectFit","imageSkeleton","chipGrid","statusChip","right","top","QrEncodedAddress","imageUri","setUri","imageLoaded","setImageLoad","qrEncodeUri","img","animated","sm","BtcRawSignature","networkLockDur","bitcoinjs","bitcoin","sigInput","setSig","addressInput","setAddress","lockDuration","setDuration","p2shAddress","setP2sh","publicKey","setPublicKey","allLockParams","setAllLockParams","currentScriptLocks","setCurrentScriptLocks","loadState","lockUtxo","setLockUtxo","unlockTxBuilder","setUnlockTxBuilder","userUnlockSig","setUserUnlockSig","unlockUtxoHex","setUnlockUtxoHex","unlockFee","setUnlockFee","sigNonce","polkadotCrypto","isValidFee","fee","lockTx","isNaN","val","RegExp","test","lockP2sh","btcLock","_fee","lockVout","sigHash","unsigned","unsignedUnlockTx","signatureHash","getUnlockUtxo","lockScript","signedUnlockUtxo","_net","unlockTxId","success","cleanUnlockTxState","undefined","fetchLockdropParams","blockStreamNet","_lockParams","dur","scriptAddr","daysToEpoch","lockParams","plasmUtils","LockdropType","Bitcoin","currentParam","push","placeholder","detail","onIonInput","_inputFee","_msg","bitcoinjsMessage","pub","p2sh","quantLogo","DustyBtcLockPage","quantstampLogo","testnet","firstLock","uri","startDate","endDate","secondLock","dustyLock","MenuSection","menuItems","SideMenu","contentId","homeIcon","calculator","discord","telegram","twitter","github","LockdropCalcPage","tokenType","setTokenType","tokenAmount","setTokenAmount","tokenExRate","setTokenExRate","setLockDuration","plasmApi","setPlasmApi","returnAlpha","setReturnAlpha","isCustomRate","setIsCustomRate","customExRate","setCustomExRate","setIsLoading","tokenLockDurs","Main","api","networkAlpha","disconnect","rates","calculatePlm","_exRate","total","times","parseFloat","toLocaleString","checked","_input","isFinite","dat","LockdropForm","onSubmit","dusty","lockAmount","setAmount","affAccount","setAff","formRoot","formLabel","inputs","amount","affiliation","handleSubmit","inline","iconProgress","green","left","zIndex","emptyPanel","claimVoteIcon","loadAddrCache","_cache","ClaimStatus","claimParams","plasmNetwork","getLockerSig","defaultAddr","positiveVotes","setPositiveVotes","voteThreshold","setVoteThreshold","isLoadingBal","setLoadingBal","isLoadingClaims","setLoadingClaims","addrEditMode","setAddrEditMode","plasmAddr","setPlasmAddr","customClaimAddr","setCustomClaimAddr","balance","setBalance","claims","setClaims","fetchLockData","claimIds","c","transactionHash","toHex","hash","lockdropStates","claimRes","Promise","all","_claims","_bal","formatBal","_voteReq","handleEditAddress","addrCheck","clearInput","lockParam","claimData","claimRecipientAddress","ClaimItem","claimId","sendingRequest","setSendingRequest","claimingLock","setClaimingLock","approveList","setApproveList","declineList","setDeclineList","showApproves","setShowApproves","showDeclines","setShowDeclines","claimConfirm","setClaimConfirm","hasAllVotes","reqAccepted","receivingPlm","plasmDefaultAddress","submitTokenClaim","complete","_sig","polkadotUtils","txHash","_claim","approves","approve","toJSON","decline","setVoteList","epoch","str","num","ActionIcon","translucent","subHeader","buttons","cssClass","handler","authority","Icon","plasmIcon","dustyIcon","slice","Badge","badgeContent","showZero","max","anchorOrigin","vertical","horizontal","param","_lock","_nonce","res","submitClaimReq","addressDropdown","EthRealTimeLockPage","lockdropNetwork","isMainnetLock","plasmNetToEthNet","contract","setContract","latestBlock","setLatestBlock","_mainContract","_ropContract","_addr","contractAddress","setContractAddress","setCurrentNetwork","isLockdropOpen","startsOn","endsOn","getAddressArray","myLocks","toLowerCase","handleFetchLockEvents","contractInst","web3Inst","getBlockNumber","_latest","Dusty","plasmNode","hasSubscriptions","handleAccountChange","currentAccount","window","ethereum","selectedAddress","on","handleGetPublicKey","_pub","formInputVal","_publicKey","getClaimToSig","sendAddr","_claimId","polkadotUtil","options","addr","App","when","exact","path","render","Boolean","location","hostname","match","configure","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","createMuiTheme","fontFamily","join","main","light","dark","responsiveFontSizes","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","web3Listener","Web3","request","method","provider","providers","HttpProvider","resolve","reject","removeEventListener","getWeb3","readyState","reload","addEventListener","BtcWalletType","LockSeason","this","totalIntroBonuses","affBonus","calculateAffBonus","getTotal","calculateIntroBonus","reduce","sum","bonus","PlasmNetwork","femtoToPlm","femto","plmDenominator","pow","dividedBy","claimPowNonce","nonce","polkadotUtilCrypto","u8aConcat","plasmTypeReg","TypeRegistry","createPlasmInstance","network","endpoint","types","Object","values","plasmDefinitions","Local","wsProvider","WsProvider","ApiPromise","create","Address","Keys","StakingLedger","Votes","ReferendumInfo","typesAlias","voting","Tally","isReady","lockDurationToRate","createLockParam","Struct","u8","U8aFixed","u64","u128","claimToMessage","plasmAddress","addressHex","claimTo","recipient","signature","encodedAddr","Uint8Array","claimToTx","tx","plasmLockdrop","send","sendLockClaimRequest","claimRequestTx","toU8a","plasmPubKey","hexString","substr","toByteArray","getAddressBalance","asPlm","query","system","free","getLockdropVoteRequirements","_voteThreshold","_positiveVotes","sendLockdropClaim","claim","getClaimStatus","params","get","entries","getLockdropAlpha","alpha","getCoinRate","dollarRate","structToLockdrop","lockdropParam","getClaimParamsFromEth","_wei","Ethereum","totalAmountOfPLMsForLockdrop","div","getMessageSignature","asSigParam","addresses","personal","sign","sig","ethereumUtils","v","r","s","fetchEventsFromCache","contractAddr","json","jsonData","evs","getHighestBlockNo","o","msg","hashMessage","compressedPubKey","EthCrypto","compress","fetchAllAddresses","requestAccounts","serializeLockEvents","_ev","JSON","stringify","Buffer","getAllLockEvents","instance","removeItem","cacheEvents","defaultAffiliation","aff","plmBaseIssueRatio","ethExchangeRate","bonusRate","totalPlmBaseIssuingRate","allLocks","plmBaseIssueAmountInLock","totalPlmsRate","currentIssue","currentAddressLocks","totalPlmRate","issuingPlm","isValidIntroducerAddress","affiliationRate","allRefs","results","refEvents","getAllAffReferences","roundTo","_eth","createContractInstance","lockdropAbi","abi","Contract","connectWeb3","getContractEndDate","methods","LOCK_END_TIME","call","_lockdropEndDate","getContractStartDate","LOCK_START_TIME","_lockdropStartDate","submitLockTx","txInput","utils","isAddress","amountToSend","toWei","MESSAGE","btcAddress","URL","blob","qrCode","createObjectURL","getBtcTxsFromAddress","txs","parse","broadcastTransaction","txHex","body","headers","responseText","ok","validateBtcAddress","toOutputScript","validatePublicKey","fromPublicKey","p2pkh","pubkey","satoshiToBitcoin","satoshi","denominator","_satNum","getPublicKey","addressNetwork","getNetworkFromAddress","_pubKey","daysToBlockSequence","isInteger","blockSequence","bip68","encode","blocks","btcLockScript","publicKeyHex","pubKeyBuffer","compressed","compressPubKey","fromASM","number","trim","getLockP2SH","lockDays","redeem","output","lockTransaction","txFee","version","addInput","reverse","addOutput","hashType","SIGHASH_ALL","hashForSignature","signTransactionRaw","unsignedTx","rawSignature","redeemScriptSig","input","compile","setInputScript","webpackAsyncContext","req","__webpack_require__","code","ids","keys","validEthAddressList","validBtcAddressList","validIntroducer"],"mappings":"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CACvC,KACA,IAED,sCAAuC,CACtC,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,mCAAoC,CACnC,KACA,IAED,kCAAmC,CAClC,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,uBAAwB,CACvB,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,kCAAmC,CAClC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,iCAAkC,CACjC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,uBAAwB,CACvB,KACA,IAED,sBAAuB,CACtB,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gCAAiC,CAChC,KACA,KAGF,SAASu+B,EAAoBC,GAC5B,IAAIC,EAAoB1H,EAAE/2B,EAAKw+B,GAC9B,OAAOrY,QAAQsJ,UAAUvsB,MAAK,WAC7B,IAAI+F,EAAI,IAAIiN,MAAM,uBAAyBsoB,EAAM,KAEjD,MADAv1B,EAAEy1B,KAAO,mBACHz1B,KAIR,IAAI01B,EAAM3+B,EAAIw+B,GAAM7wB,EAAKgxB,EAAI,GAC7B,OAAOF,EAAoBx1B,EAAE01B,EAAI,IAAIz7B,MAAK,WACzC,OAAOu7B,EAAoB9wB,MAG7B4wB,EAAoBK,KAAO,WAC1B,OAAOjN,OAAOiN,KAAK5+B,IAEpBu+B,EAAoB5wB,GAAK,IACzBzS,EAAOC,QAAUojC,G,oBC5UjB,IAAIv+B,EAAM,CACT,sBAAuB,CACtB,KACA,KAGF,SAASu+B,EAAoBC,GAC5B,IAAIC,EAAoB1H,EAAE/2B,EAAKw+B,GAC9B,OAAOrY,QAAQsJ,UAAUvsB,MAAK,WAC7B,IAAI+F,EAAI,IAAIiN,MAAM,uBAAyBsoB,EAAM,KAEjD,MADAv1B,EAAEy1B,KAAO,mBACHz1B,KAIR,IAAI01B,EAAM3+B,EAAIw+B,GAAM7wB,EAAKgxB,EAAI,GAC7B,OAAOF,EAAoBx1B,EAAE01B,EAAI,IAAIz7B,MAAK,WACzC,OAAOu7B,EAAoB9wB,MAG7B4wB,EAAoBK,KAAO,WAC1B,OAAOjN,OAAOiN,KAAK5+B,IAEpBu+B,EAAoB5wB,GAAK,IACzBzS,EAAOC,QAAUojC,G,gHCxBjB,wIACO,IAAMr0B,EAAiB,6CAEjB4uB,EAAkB,IAElBzkB,EAAqB,CAC9B,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,8CAqRSwqB,EAAmB,UACzBxqB,EAnRqB,CAExnK,IAGS40B,EAAmB,UATJ,CAAC,0BAgBtB,SAASjG,EAAyB5uB,GAAuD,IAAnC6W,EAAkC,uDAAP,MAC9Eie,EACY,QAAdje,EACM+d,EAAoBrpB,MAAK,SAAAxK,GAAC,OAAIf,EAAW2hB,cAAciC,MAAM7iB,EAAE4gB,kBAC/DkT,EAAoBtpB,MAAK,SAAAxK,GAAC,OAAIf,EAAW2hB,cAAciC,MAAM7iB,EAAE4gB,kBACzE,MAAkC,kBAApBmT,I","file":"static/js/main.62e3bbda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ethereum_logo.802c6eac.svg\";","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { IonHeader, IonButtons, IonMenuButton, IonToolbar, IonTitle } from '@ionic/react';\nimport plasmLogo from '../resources/plasm-logo.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        grow: {\n            flexGrow: 1,\n        },\n        navbar: {\n            backgroundColor: 'black',\n        },\n        logoIcon: {\n            margin: theme.spacing(1),\n            maxHeight: 45,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        title: {\n            color: 'white',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        sectionDesktop: {\n            display: 'none',\n            [theme.breakpoints.up('md')]: {\n                display: 'flex',\n            },\n        },\n        sectionMobile: {\n            display: 'flex',\n            [theme.breakpoints.up('md')]: {\n                display: 'none',\n            },\n        },\n        listItem: {\n            width: '100%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            fontWeight: theme.typography.fontWeightRegular,\n        },\n    }),\n);\n\nexport default function Navbar() {\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonHeader className={classes.navbar}>\n                <IonToolbar color=\"black\">\n                    <IonButtons slot=\"start\">\n                        <IonMenuButton className={classes.title} />\n                        <img className={classes.logoIcon} src={plasmLogo} alt=\"\" />\n                    </IonButtons>\n                    <IonTitle className={classes.title}>Plasm Network</IonTitle>\n                </IonToolbar>\n            </IonHeader>\n        </>\n    );\n}\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { TimeFormat, LockEvent } from '../../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    lockData: LockEvent[];\n}\n\nenum LockState {\n    notStart,\n    start,\n    end,\n}\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        padding: theme.spacing(0, 2, 4),\n        margin: theme.spacing(1),\n    },\n    headerText: {\n        padding: theme.spacing(1),\n    },\n}));\n\nconst LockdropCountdownPanel: React.FC<Props> = ({ startTime, endTime, lockData }) => {\n    const now = moment().utc();\n    const classes = useStyles();\n\n    const calculateTimeLeft = (): TimeFormat => {\n        const tillStart = startTime.valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = endTime.valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        return timeLeft;\n    };\n\n    const getLockState = (): LockState => {\n        const tillStart = startTime.valueOf() - now.valueOf();\n        if (tillStart > 0) {\n            return LockState.notStart;\n        } else if (tillStart <= 0 && !(endTime.valueOf() - now.valueOf() < 0)) {\n            return LockState.start;\n        } else {\n            return LockState.end;\n        }\n    };\n\n    const [timeLeft, setTimeLeft] = useState<TimeFormat>(calculateTimeLeft());\n    const [lockState, setLockState] = useState(getLockState());\n    const [totalLockVal, setTotalLockVal] = useState('0');\n\n    const getLockValue = async (): Promise<void> => {\n        try {\n            const _totalLockVal = getTotalLockVal(lockData);\n            setTotalLockVal(_totalLockVal);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setTimeLeft(calculateTimeLeft());\n            setLockState(getLockState());\n            await getLockValue();\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    if (lockState !== LockState.end) {\n        return (\n            <>\n                <PanelWrapper>\n                    <div>\n                        <Typography variant=\"h4\" component=\"h3\" align=\"center\" className={classes.headerText}>\n                            Lockdrop {lockState === LockState.notStart ? 'Starting' : 'Ending'} in:\n                        </Typography>\n                        <Grid container spacing={2} justify=\"center\">\n                            <Grid item>\n                                <h2>{timeLeft.days}</h2>\n                                <h4>Days</h4>\n                            </Grid>\n                            <Grid item>\n                                <h2>{timeLeft.hours}</h2>\n                                <h4>Hours</h4>\n                            </Grid>\n                            <Grid item>\n                                <h2>{timeLeft.minutes}</h2>\n                                <h4>Minutes</h4>\n                            </Grid>\n                            <Grid item>\n                                <h2>{timeLeft.seconds}</h2>\n                                <h4>Seconds</h4>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </PanelWrapper>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <PanelWrapper>\n                    <Typography variant=\"h2\" component=\"h1\" align=\"center\" className={classes.headerText}>\n                        Lockdrop has ended\n                    </Typography>\n                    <Typography variant=\"h3\" component=\"h4\" align=\"center\">\n                        Total Locked Value: {totalLockVal} ETH\n                    </Typography>\n                </PanelWrapper>\n            </>\n        );\n    }\n};\n\nexport default LockdropCountdownPanel;\n\nconst PanelWrapper: React.FC = ({ children }) => {\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                {children}\n            </Container>\n        </>\n    );\n};\n","export const Links = {\n    docs: 'https://docs.plasmnet.io',\n    blog: 'https://medium.com/stake-technologies',\n    twitter: 'https://twitter.com/Plasm_Network',\n    github: 'https://github.com/staketechnologies/Plasm',\n    telegram: 'https://t.me/PlasmOfficial',\n    discord: 'https://discordapp.com/invite/Dnfn5eT',\n    email: 'info@stake.co.jp',\n    home: 'https://stake.co.jp/',\n    plasmHome: 'https://plasmnet.io/',\n};\n\nexport const SponsorLinks = {\n    cryptoEconomicsLab: 'https://www.cryptoeconomicslab.com/',\n    parityTechnologies: 'https://www.parity.io/',\n    web3Foundation: 'https://web3.foundation/',\n    longhash: 'https://longhash.co.jp/en/',\n    universityOfTokyo: 'https://www.u-tokyo.ac.jp/en/index.html',\n    connect: 'https://www.blockchain.t.u-tokyo.ac.jp/',\n    parityBuilders: 'https://builders.parity.io/',\n    acala: 'https://acala.network/',\n};\n\nexport const BlogLinks = {\n    lockdropIntroduction: 'https://medium.com/stake-technologies/plasm-lockdrop-introduction-54614592a13',\n};\n\nexport const AppLinks = {\n    plasmnetIo: 'https://apps.plasmnet.io/',\n    polkadotNetwork: 'https://telemetry.polkadot.io/#list/Plasm%20Testnet%20v3',\n    joinLockdrop: 'https://lockdrop.plasmnet.io',\n    inkPlayground: 'https://ink-playground.com/',\n};\n\nexport const Whitepaper = [\n    {\n        description: 'English',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/en.pdf',\n        icon: `sticky note outline`,\n    },\n    {\n        description: 'Japanese',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/jp.pdf',\n        icon: `sticky note outline`,\n    },\n];\n\nexport const Community = [\n    {\n        description: 'Discord',\n        link: Links.discord,\n        icon: 'discord',\n    },\n    {\n        description: 'Telegram',\n        link: Links.telegram,\n        icon: 'telegram',\n    },\n];\n\nexport const Company = [\n    {\n        description: 'Home',\n        link: Links.home,\n    },\n    {\n        description: 'Contact us',\n        link: `mailto:${Links.email}`,\n    },\n];\n\nexport const Products = [\n    {\n        description: 'Plasm',\n        link: 'https://github.com/staketechnologies/Plasm',\n    },\n    {\n        description: 'Plasm Portal Sites',\n        link: 'https://github.com/staketechnologies/apps',\n    },\n    {\n        description: 'Plasm Lockdrop',\n        link: 'https://github.com/staketechnologies/lockdrop-ui',\n    },\n    {\n        description: 'Plasm documentations',\n        link: 'https://github.com/staketechnologies/plasmdocs',\n    },\n    {\n        description: 'Plasm homepage',\n        link: 'https://github.com/staketechnologies/plasmnet.io',\n    },\n];\n\nexport const Collaboration = [\n    {\n        description: 'Substrate Builders Program',\n        link: 'https://builders.parity.io/',\n    },\n    {\n        description: 'Web3 foundation grants program',\n        link: 'https://web3.foundation/',\n    },\n];\n\nexport const Blogs = [\n    {\n        description: 'Medium',\n        link: Links.blog,\n    },\n];\n\nexport const Discussions = [\n    {\n        link: Links.discord,\n        className: 'discord',\n    },\n    {\n        link: Links.telegram,\n        className: 'telegram',\n    },\n    {\n        link: Links.twitter,\n        className: 'twitter',\n    },\n    {\n        link: Links.github,\n        className: 'github',\n    },\n];\n","export const ThemeColors = {\n    darkGrey: '#383838',\n    lightGrey: '#999999',\n    white: '#ffffff',\n    black: '#000000',\n    darkBlue: '#2C3E50',\n    orange: '#FF5838',\n    darkRed: '#5c0f0f',\n    blue: '#4C8DFF',\n    lightBlue: '#56ccf2',\n};\n\nexport const ThemeFontFamily = {\n    logo: 'sans',\n    paragraph: 'not sans',\n};\n\nconst colors = {\n    transparent: 'rgba(0, 0, 0, 0)',\n    footerTransparent: 'rgba(0, 0, 0, 0.12)',\n    navy: '#1d417f',\n    ceruleanBlue: '#102e83',\n    blue: '#2179ee',\n    lightBlue: '#56ccf2',\n    periwinkle: '#D4D3E9',\n    teal: '#00FFD1',\n    green: '#28D24E',\n    crimson: '#DC143C',\n    red: '#D22828',\n    lightRed: '#ED0257',\n    coral: '#ff6759',\n    pink: '#FF17E8',\n    gold: '#f0b95b',\n    yellow: '#FFC700',\n    purple: '#7537ef',\n    lightPurple: '#56408B',\n    darkPurple: 'rgba(10, 7, 82, 0.75)',\n    softPurple: '#9795C5',\n    white: '#ffffff',\n    creamWhite: '#f4f5f7',\n    black: '#000000',\n    grey: '#333333',\n    lightGrey: 'grey',\n    softGrey: '#1D1B4D',\n    slaty: '#797992',\n    lavender: '#e5e5f8',\n    rat: '#cecddc',\n};\n\nconst secondaryColors = {\n    grey10: '#f3f4f8',\n    grey20: '#e1e5eb',\n    grey30: '#c2c6cc',\n    grey40: '#9ea2a8',\n    grey50: '#686c73',\n    grey60: '#30363d',\n    blue10: '#ade7ff',\n    blue20: '#61bcff',\n    blue30: '#2179ee',\n    blue40: '#1f4ab4',\n    blue50: '#1d2064',\n    green10: '#b5ffcb',\n    green20: '#5dffa3',\n    green30: '#00cc9a',\n    green40: '#219a8a',\n    green50: '#183f51',\n    purple10: '#dec7ff',\n    purple20: '#a673ff',\n    purple30: '#7537ef',\n    purple40: '#4e23b6',\n    purple50: '#2d1b64',\n    coral10: '#ffc6b3',\n    coral20: '#ff8e75',\n    coral30: '#ff6759',\n    coral40: '#eb312a',\n    coral50: '#7b1e30',\n    gold10: '#ffedc2',\n    gold20: '#ffda8b',\n    gold30: '#f0b95b',\n    gold40: '#e5a229',\n    gold50: '#6a4a24',\n};\n\nconst breakpoints = ['31.25em', '43.75em', '46.875em'];\nconst fontSizes = ['1.2rem', '1.4rem', '1.6rem', '1.8rem', '2.4rem', '2.8rem', '3.2rem', '4.0rem', '4.8rem', '6.4rem'];\nconst space = ['0', '.4rem', '.8rem', '1.2rem', '1.6rem', '2.0rem', '3.2rem', '4.8rem', '6.4rem', '9.6rem'];\n\nconst font =\n    'Work Sans, sans-serif, -apple-system, BlinkMacSystemFont,\"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\"Droid Sans\", \"Helvetica Neue\";-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n\nexport interface StyleClosetTheme {\n    breakpoints: string[];\n    fontSizes: string[];\n    space: string[];\n    colors: { [key in keyof typeof colors]: string };\n    secondaryColors: { [key in keyof typeof secondaryColors]: string };\n    font: string;\n}\n\nexport const theme: StyleClosetTheme = {\n    breakpoints,\n    fontSizes,\n    space,\n    colors,\n    secondaryColors,\n    font,\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport { Company, Products, Collaboration, Blogs, Community } from '../data/links';\nimport Divider from '@material-ui/core/Divider';\nimport { ThemeColors } from '../theme/themes';\n\nconst Copyright = () => {\n    return (\n        <>\n            <Typography variant=\"body2\">\n                {'© 2019-' + new Date().getFullYear() + ' '}\n                <Link color=\"inherit\" href=\"https://stake.co.jp/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                    Stake Technologies, Inc.\n                </Link>{' '}\n                {'All Rights Reserved.'}\n            </Typography>\n        </>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(10),\n    },\n    socialIcon: {\n        color: 'white',\n        fontSize: 60,\n        paddingLeft: theme.spacing(1),\n    },\n    footer: {\n        padding: theme.spacing(2),\n        backgroundColor: 'white',\n        color: 'black',\n    },\n    footerHeader: {\n        color: ThemeColors.darkBlue,\n    },\n    siteMap: {},\n}));\n\nconst StickyFooter = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <footer className={classes.footer}>\n                <Container maxWidth=\"lg\">\n                    <Grid container spacing={4} justify=\"center\" className={classes.siteMap}>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Company\n                            </Typography>\n                            <Divider />\n\n                            <List component=\"nav\">\n                                {Company.map(company => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={company.link}\n                                        key={company.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={company.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Repositories\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Products.map(product => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={product.link}\n                                        key={product.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={product.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Collaboration\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Collaboration.map(collaboration => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={collaboration.link}\n                                        key={collaboration.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={collaboration.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Blog\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Blogs.map(blog => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={blog.link}\n                                        key={blog.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={blog.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Community\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Community.map(community => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={community.link}\n                                        key={community.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={community.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Container>\n\n                <Container maxWidth=\"sm\">\n                    <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                        <Copyright />\n                    </Typography>\n                </Container>\n            </footer>\n        </div>\n    );\n};\n\nexport default StickyFooter;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { ThemeColors } from '../theme/themes';\n\ninterface Props {\n    maxWidth: false | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | undefined;\n}\n\nconst SectionCard: React.FC<Props> = ({ maxWidth, children }) => {\n    const useStyles = makeStyles(theme => ({\n        paper: {\n            backgroundColor: ThemeColors.white,\n            padding: theme.spacing(0, 0, 2),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth={maxWidth}>\n                <Paper elevation={5} className={classes.paper}>\n                    {children}\n                </Paper>\n            </Container>\n        </>\n    );\n};\n\nexport default SectionCard;\n","import { OptionItem } from '../types/LockdropModels';\nimport moment from 'moment';\n\nimport Lockdrop from '../contracts/Lockdrop.json';\n\nconst LOCKDROP_DURATION = 30; // days\n\n/**\n * the time zone is set to UTC as default\n * lockdrop starts from 1584230400 epoch time\n */\nexport const firstLockdropStart = moment.unix(1584230400);\nexport const firstLockdropEnd = firstLockdropStart.clone().add(LOCKDROP_DURATION, 'days');\n\n/**\n * the time zone is set to UTC as default\n * lockdrop starts from 1598832000 epoch time\n */\nexport const secondLockdropStart = moment.unix(1598832000);\nexport const secondLockdropEnd = secondLockdropStart.clone().add(LOCKDROP_DURATION, 'days');\n\nexport interface LockdropContract {\n    type: 'main' | 'ropsten' | 'private';\n    address: string;\n    blockHeight: number;\n}\n\nexport const firstLockContract: LockdropContract[] = [\n    {\n        type: 'main',\n        address: '0x458DaBf1Eff8fCdfbF0896A6Bd1F457c01E2FfD6',\n        blockHeight: 9662816,\n    },\n    { type: 'ropsten', address: '0xEEd84A89675342fB04faFE06F7BB176fE35Cb168', blockHeight: 7941301 },\n    { type: 'private', address: Lockdrop.networks[5777].address, blockHeight: 0 },\n];\n\nexport const secondLockContract: LockdropContract[] = [\n    {\n        type: 'main',\n        address: '0xa4803f17607B7cDC3dC579083d9a14089E87502b',\n        blockHeight: 10714638,\n    },\n    {\n        type: 'ropsten',\n        address: '0x69e7eb3ab94a10e4f408d842b287c70aa0d11649',\n        blockHeight: 8257718,\n    },\n    {\n        type: 'ropsten',\n        address: '0xa91E04a6ECF202A7628e0c9191676407015F5AF9',\n        blockHeight: 8474518,\n    },\n    { type: 'private', address: Lockdrop.networks[5777].address, blockHeight: 0 },\n];\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n    { label: '1000 Days', value: 1000, rate: 1600 },\n];\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n    { label: '100 Days', value: 100, rate: 1600 },\n];\n\n/**\n * BTC lockdrop does not support 1000 days lock due to CSV lock scheme\n */\nexport const btcDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n];\n\n/**\n * BTC lockdrop for Dusty network. The lock days are much shorter\n */\nexport const btcDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n];\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { IonModal, IonContent, IonButton, IonLabel, IonHeader, IonToolbar, IonTitle } from '@ionic/react';\nimport ReactMarkdown from 'react-markdown';\nimport tosContent from '../data/UserAgreement.md';\nimport { makeStyles, createStyles } from '@material-ui/core';\n\ninterface Props {\n    showModal: boolean;\n    onAgree?: (agreed: boolean) => void;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        textBox: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            padding: theme.spacing(4),\n        },\n    }),\n);\n\nconst TosAgreementModal: React.FC<Props> = ({ showModal, onAgree }) => {\n    const classes = useStyles();\n\n    const [toc, setToc] = useState('');\n\n    // load the markdown content as string on component mount\n    useEffect(() => {\n        fetch(tosContent)\n            .then(data => data.text())\n            .then(text => {\n                setToc(text);\n            });\n    }, []);\n\n    const handleAgreement = (agree: boolean) => {\n        if (onAgree) onAgree(agree);\n    };\n\n    return (\n        <>\n            <IonModal isOpen={showModal} backdropDismiss={false}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Lockdrop Terms of Condition</IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n\n                <IonContent>\n                    <div className={classes.textBox}>\n                        <IonLabel>\n                            <ReactMarkdown source={toc} escapeHtml={false} />\n                        </IonLabel>\n                        <IonLabel>\n                            <h2>\n                                Follow us on{' '}\n                                <a href={'https://twitter.com/plasm_network'} rel=\"noopener noreferrer\" target=\"_blank\">\n                                    Twitter\n                                </a>{' '}\n                                and{' '}\n                                <a\n                                    href={'https://t.me/joinchat/IxHd_BfELvbxC9lUYm_czw'}\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    Telegram{' '}\n                                </a>\n                                for the latest information.\n                            </h2>\n                        </IonLabel>\n                    </div>\n\n                    <IonButton expand=\"block\" onClick={() => handleAgreement(true)}>\n                        Agree\n                    </IonButton>\n                </IonContent>\n            </IonModal>\n        </>\n    );\n};\n\nexport default TosAgreementModal;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    IonContent,\n    IonPage,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonItem,\n    IonIcon,\n    IonLabel,\n    IonButton,\n    IonRouterLink,\n    IonImg,\n} from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport lockdropLogoA from '../resources/ld_logo_a.png';\nimport lockdropLogoB from '../resources/ld_logo_b.png';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport { makeStyles } from '@material-ui/core';\nimport { firstLockdropStart, firstLockdropEnd, secondLockdropStart, secondLockdropEnd } from '../data/lockInfo';\nimport TosAgreementModal from 'src/components/TosAgreementModal';\n//import moment from 'moment';\nimport momentTimezone from 'moment-timezone';\n\n// randomize the lockdrop logo\n// this is for AB testing the logo\nconst lockdropLogo = Math.floor(Math.random() * 10) > 5 ? lockdropLogoA : lockdropLogoB;\n\nconst useStyles = makeStyles(() => ({\n    logoImg: {\n        display: 'block',\n        maxWidth: '100%',\n        width: '20rem',\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        //maxHeight: '500',\n    },\n}));\n\nexport const LandingPage: React.FC = () => {\n    const classes = useStyles();\n\n    // user session storage to store TOS state\n    const [userAgreed, setUserAgreed] = useState(localStorage.getItem('AgreedState') || 'false');\n\n    // save session every time the agreement state changes\n    useEffect(() => {\n        localStorage.setItem('AgreedState', userAgreed.toString());\n    }, [userAgreed]);\n\n    const timezone = useMemo(() => {\n        const zoneName = momentTimezone.tz.guess();\n        const timezone = momentTimezone.tz(zoneName).zoneAbbr();\n        return timezone;\n    }, []);\n\n    return (\n        <IonPage>\n            <Navbar />\n            <TosAgreementModal\n                showModal={!userAgreed.includes('true')}\n                // we convert the boolean to string (because browser session)\n                onAgree={(ev: boolean) => setUserAgreed(ev ? 'true' : 'false')}\n            />\n            <IonContent>\n                <SectionCard maxWidth=\"lg\">\n                    <IonImg src={lockdropLogo} alt=\"\" className={classes.logoImg} />\n                    {/* <img src={lockdropLogo} alt=\"\" className={classes.logoImg} /> */}\n                    <IonCardHeader>\n                        <IonCardSubtitle>Plasm Network Lockdrop Web Application</IonCardSubtitle>\n                        <IonCardTitle>Plasm Network Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        Lockdrop is a new token distribution mechanism that emphasizes on low risk and fairness to its\n                        users. For more details, checkout{' '}\n                        <a\n                            color=\"inherit\"\n                            href=\"https://medium.com/stake-technologies/what-is-and-how-to-join-the-plasm-network-lockdrop-the-ultimate-guide-e3f4bdec83de\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            this\n                        </a>{' '}\n                        article,\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>First Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/first\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n\n                    <IonCardContent>\n                        Lock Start: {firstLockdropStart.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                        <br />\n                        Lock End: {firstLockdropEnd.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Second Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/second-eth\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n\n                    {/* <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Plasm BTC Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem> */}\n                    <IonCardContent>\n                        Lock Start: {secondLockdropStart.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                        <br />\n                        Lock End: {secondLockdropEnd.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Dusty Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Dusty ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-eth\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                    <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Dusty BTC Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-btc\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                </SectionCard>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\n\nexport default LandingPage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport { LockEvent, TimeFormat } from '../../types/LockdropModels';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport {\n    Divider,\n    Grid,\n    ListItemSecondaryAction,\n    IconButton,\n    LinearProgress,\n    createStyles,\n    makeStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\nimport { toast } from 'react-toastify';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport BigNumber from 'bignumber.js';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        itemButtons: {\n            verticalAlign: 'middle',\n            textAlign: 'center',\n            alignContent: 'center',\n        },\n    }),\n);\n\ninterface CurrentLockProps {\n    web3: Web3;\n    account: string; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n    onClickRefresh?: () => Promise<void>;\n}\n\ninterface UnlockInfoProps {\n    lockInfo: LockEvent;\n    web3: Web3;\n    address: string;\n    onClickRefresh?: () => Promise<void>;\n}\n// displays a list of locks tha the current user has locked\nconst CurrentLocks: React.FC<CurrentLockProps> = ({ web3, account, lockData, onClickRefresh }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>(lockData.filter(i => i.lockOwner === account));\n\n    useEffect(() => {\n        setEvents(lockData.filter(i => i.lockOwner === account));\n    }, [lockData, account]);\n\n    return (\n        <div className={classes.lockListPage}>\n            {lockEvents.length > 0 ? (\n                <>\n                    <h1>Your Locks</h1>\n                    <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                    <List className={classes.listRoot} subheader={<li />}>\n                        <li className={classes.listSection}>\n                            <ul className={classes.ul}>\n                                <ListSubheader>You have {lockEvents.length} locks</ListSubheader>\n                                <Divider />\n                                {lockEvents.map((eventItem, index) => (\n                                    <div key={index}>\n                                        <UnlockInfo\n                                            lockInfo={eventItem}\n                                            web3={web3}\n                                            address={account}\n                                            onClickRefresh={onClickRefresh}\n                                        />\n                                        <Divider />\n                                    </div>\n                                ))}\n                            </ul>\n                        </li>\n                    </List>\n                </>\n            ) : (\n                <>\n                    <h1>No Locks</h1>\n                    <h4>Please lock some ETH!</h4>\n                </>\n            )}\n        </div>\n    );\n};\n\n// the individual lock item\nconst UnlockInfo: React.FC<UnlockInfoProps> = ({ lockInfo, web3, address, onClickRefresh }) => {\n    const classes = useStyles();\n    // 24 hours in epoch\n    const epochDayMil = 86400000;\n\n    const getUnlockDate = useCallback(() => {\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n        // locked date + lock duration(epoch)\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        return unlockDate;\n    }, [lockInfo]);\n\n    const calculateTimeLeft = useCallback(() => {\n        // milliseconds left till unlock\n        const tillEnd = getUnlockDate() - +Date.now();\n        return {\n            days: Math.floor(tillEnd / (1000 * 60 * 60 * 24)),\n            hours: Math.floor((tillEnd / (1000 * 60 * 60)) % 24),\n            minutes: Math.floor((tillEnd / 1000 / 60) % 60),\n            seconds: Math.floor((tillEnd / 1000) % 60),\n        };\n    }, [getUnlockDate]);\n\n    const [canUnlock, setLockState] = useState(false);\n    const [tillUnlock, setUnlockDate] = useState<TimeFormat>(calculateTimeLeft());\n    const [unlocked, setUnlockState] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const [balanceLoaded, setBalanceLoaded] = useState(false);\n    const [lockVal, setLockVal] = useState<BigNumber>();\n\n    const checkUnlock = useCallback(() => {\n        // get today in UTC epoch seconds (js default is ms)\n        const today = Date.now();\n\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        // check if the balance is 0 or not\n        const lockClaimState = typeof lockVal !== 'undefined' && lockVal.isLessThanOrEqualTo(new BigNumber(0));\n        // console.log(lockBalance);\n        setUnlockState(lockClaimState);\n        return today > unlockDate;\n    }, [lockInfo, lockVal]);\n\n    // update time value every second\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setUnlockDate(calculateTimeLeft());\n            setLockState(checkUnlock());\n        }, 1000);\n        // cleanup async hook\n        return () => {\n            clearInterval(interval);\n        };\n    }, [calculateTimeLeft, checkUnlock]);\n\n    const fetchBalance = useCallback(async () => {\n        const bal = await web3.eth.getBalance(lockInfo.lock);\n        return new BigNumber(bal);\n    }, [lockInfo.lock, web3.eth]);\n\n    // initial update\n    useEffect(() => {\n        (async () => {\n            const bal = await fetchBalance();\n            setLockVal(bal);\n        })()\n            .catch(e => {\n                console.log(e);\n                toast.error(e.message);\n            })\n            .finally(() => {\n                setUnlockDate(calculateTimeLeft());\n                checkUnlock();\n                setBalanceLoaded(true);\n            });\n        // eslint-disable-next-line\n    }, []);\n\n    // click unlock ETH\n    const handleClick = useCallback(async () => {\n        setLoading(true);\n        try {\n            await web3.eth.sendTransaction({\n                from: address,\n                to: lockInfo.lock,\n                value: '0',\n            });\n            onClickRefresh && (await onClickRefresh());\n            const bal = await fetchBalance();\n            setLockVal(bal);\n        } catch (e) {\n            console.log(e);\n            toast.error(e.message);\n        } finally {\n            setLoading(false);\n        }\n        // we don't want to add web3 in here\n        // eslint-disable-next-line\n    }, [address, lockInfo.lock]);\n\n    return (\n        <>\n            <ListItem>\n                {balanceLoaded ? (\n                    <>\n                        <Grid container spacing={4} alignItems=\"center\">\n                            <Grid item xs={9}>\n                                <ListItemText>\n                                    <h5>Lock address: {lockInfo.lock}</h5>\n                                    <p>\n                                        Locked {Web3Utils.fromWei(lockInfo.eth.toFixed(), 'ether')} ETH for{' '}\n                                        {lockInfo.duration} days\n                                    </p>\n                                    {lockInfo.introducer !== defaultAddress ? (\n                                        <p>Introducer: {lockInfo.introducer}</p>\n                                    ) : (\n                                        <p>No introducer</p>\n                                    )}\n                                    {isLoading ? (\n                                        <>\n                                            <LinearProgress />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {!canUnlock ? (\n                                                <Grid container spacing={1}>\n                                                    <Grid item>\n                                                        <p>{tillUnlock.days} Days </p>\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <p>{tillUnlock.hours} Hours </p>\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <p>{tillUnlock.minutes} Minutes </p>\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <p>{tillUnlock.seconds} Seconds </p>\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <p>Left</p>\n                                                    </Grid>\n                                                </Grid>\n                                            ) : unlocked ? (\n                                                <p>Lock already unlocked!</p>\n                                            ) : (\n                                                <p>You can unlocked your lock!</p>\n                                            )}\n                                        </>\n                                    )}\n                                </ListItemText>\n                            </Grid>\n                            <Grid item>\n                                <ListItemSecondaryAction className={classes.itemButtons}>\n                                    {unlocked ? (\n                                        <LockOpenIcon color=\"disabled\" />\n                                    ) : canUnlock ? (\n                                        <Tooltip title=\"Click to unlock\" aria-label=\"unlock\">\n                                            <IconButton\n                                                edge=\"end\"\n                                                aria-label=\"unlock\"\n                                                onClick={() => handleClick()}\n                                                color=\"primary\"\n                                                disabled={isLoading}\n                                            >\n                                                <LockOpenIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                    ) : (\n                                        <LockIcon color=\"inherit\" />\n                                    )}\n                                </ListItemSecondaryAction>\n                            </Grid>\n                        </Grid>\n                    </>\n                ) : (\n                    <>\n                        <Grid container spacing={4} alignItems=\"center\">\n                            <Grid item xs={9}>\n                                <ListItemText>\n                                    <Skeleton animation=\"wave\" variant=\"text\" />\n                                    <Skeleton animation=\"wave\" variant=\"text\" />\n                                    <Skeleton animation=\"wave\" variant=\"text\" />\n                                </ListItemText>\n                            </Grid>\n                            <Grid item>\n                                <ListItemSecondaryAction className={classes.itemButtons}>\n                                    <Skeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n                                </ListItemSecondaryAction>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n            </ListItem>\n        </>\n    );\n};\n\nexport default CurrentLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\n\nimport React, { useMemo } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Divider } from '@material-ui/core';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\nimport { List as VirtualizedList, ListRowProps, AutoSizer, CellMeasurerCache, CellMeasurer } from 'react-virtualized';\n\ninterface LockHistoryProps {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        item: {\n            display: 'inline-block',\n            //flexDirection: 'row',\n            alignItems: 'center',\n            height: '100%',\n            //flexWrap: 'wrap',\n        },\n        lockListPage: {\n            textAlign: 'center',\n            width: '100%',\n            height: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            display: 'flex',\n            flexDirection: 'column',\n            flexWrap: 'wrap',\n            minHeight: 450,\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        autoSizerWrapper: {\n            flex: '1 1 auto',\n        },\n    }),\n);\n\nconst GlobalLocks: React.FC<LockHistoryProps> = ({ lockData }) => {\n    const classes = useStyles();\n    const rowCache = new CellMeasurerCache({\n        fixedWidth: true,\n        defaultHeight: 150, // tune as estimate for unmeasured rows\n        minHeight: 150, // keep this <= any actual row height\n        keyMapper: () => 1,\n    });\n\n    const totalVal = useMemo(() => {\n        return getTotalLockVal(lockData, 4);\n    }, [lockData]);\n\n    const RowRenderer: React.FC<ListRowProps> = ({ index, key, style, parent }) => {\n        const eventItem = lockData[index];\n\n        return (\n            <CellMeasurer cache={rowCache} columnIndex={0} key={key} parent={parent} rowIndex={index}>\n                {({ measure, registerChild }) => (\n                    <div style={style} className={classes.item} ref={() => registerChild} onLoad={measure}>\n                        <ListItem>\n                            <ListItemText>\n                                <h4>Lock address: {eventItem.lock}</h4>\n                                <h5>Locked in block no. {eventItem.blockNo}</h5>\n                                <p>\n                                    Locked {Web3Utils.fromWei(eventItem.eth.toFixed(), 'ether')} ETH for{' '}\n                                    {eventItem.duration} days\n                                </p>\n                                {eventItem.introducer !== defaultAddress ? (\n                                    <p>Introducer: {eventItem.introducer}</p>\n                                ) : (\n                                    <p>No introducer</p>\n                                )}\n                            </ListItemText>\n                        </ListItem>\n                        <Divider />\n                    </div>\n                )}\n            </CellMeasurer>\n        );\n    };\n\n    return (\n        <div className={classes.lockListPage}>\n            {lockData.length > 0 ? (\n                <>\n                    <div>\n                        <h1>Global Locks</h1>\n                        <h3>{totalVal} ETH locked</h3>\n                        <p>There are {lockData.length} locks</p>\n                    </div>\n\n                    <div className={classes.autoSizerWrapper}>\n                        <AutoSizer>\n                            {({ width, height }) => (\n                                <VirtualizedList\n                                    height={height}\n                                    rowCount={lockData.length}\n                                    rowHeight={rowCache.rowHeight}\n                                    rowRenderer={RowRenderer}\n                                    width={width}\n                                    overscanRowCount={3}\n                                    deferredMeasurementCache={rowCache}\n                                />\n                            )}\n                        </AutoSizer>\n                    </div>\n                </>\n            ) : (\n                <>\n                    <h1>No Locks</h1>\n                    <h4>Please lock some ETH!</h4>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default GlobalLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport CurrentLocks from './CurrentLocks';\nimport GlobalLocks from './EthGlobalLocks';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\ninterface LockHistoryProps {\n    web3: Web3;\n    account: string; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n    onClickRefresh?: () => Promise<void>;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n};\n\nconst a11yProps = (index: any) => {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\n// component that displays the number of tokens and the duration for the lock via Web3\nconst LockedEthList: React.FC<LockHistoryProps> = ({ web3, account, lockData, onClickRefresh }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.tabMenu}>\n                    <AppBar position=\"static\" color=\"inherit\">\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs\"\n                        >\n                            <Tab label=\"Locked Tokens\" {...a11yProps(0)} />\n                            <Tab label=\"Unlock Tokens\" {...a11yProps(1)} />\n                        </Tabs>\n                    </AppBar>\n                    <SwipeableViews\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                        index={value}\n                        onChangeIndex={handleChangeIndex}\n                    >\n                        <TabPanel value={value} index={0} dir={theme.direction}>\n                            <GlobalLocks lockData={lockData} />\n                        </TabPanel>\n                        <TabPanel value={value} index={1} dir={theme.direction}>\n                            <CurrentLocks\n                                web3={web3}\n                                account={account}\n                                lockData={lockData}\n                                onClickRefresh={onClickRefresh}\n                            />\n                        </TabPanel>\n                    </SwipeableViews>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockedEthList;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    createStyles,\n    Theme,\n    CircularProgress,\n    Divider,\n    Link,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Collapse,\n    Typography,\n} from '@material-ui/core';\nimport { calculateTotalPlm, ethFinalExRate, getPubKey } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport BigNumber from 'bignumber.js';\nimport CountUp from 'react-countup';\nimport { ThemeColors } from '../../theme/themes';\nimport { IonPopover, IonList, IonListHeader, IonItem, IonLabel, IonChip, IonButton, IonLoading } from '@ionic/react';\nimport { LockEvent } from '../../types/LockdropModels';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport { generatePlmAddress } from 'src/helpers/plasmUtils';\n\nconst etherScanSearch = 'https://etherscan.io/address/';\n\ninterface ResultProps {\n    lockData: LockEvent[];\n    web3: Web3;\n}\n\nconst LockdropResult: React.FC<ResultProps> = ({ lockData, web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            pageContent: {\n                textAlign: 'center',\n                padding: theme.spacing(4, 2, 0),\n            },\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                padding: theme.spacing(4, 2, 0),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n    const [totalPlm, setTotalPlm] = useState<PlmDrop>(new PlmDrop('', new BigNumber(0), [], [], []));\n    const [exRate, setExRate] = useState(0);\n    const [isLoading, setLoadState] = useState(true);\n    const [showIntoRefPopover, setShowIntroRefPopover] = useState(false);\n    const [showIntoPopover, setShowIntroPopover] = useState(false);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setExRate(ethFinalExRate);\n            const accounts = await web3.eth.getAccounts();\n            const totalIssue = calculateTotalPlm(accounts[0], lockData);\n            setTotalPlm(totalIssue);\n\n            setLoadState(false);\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const countupTotalPlmVal: JSX.Element = (\n        <CountUp\n            start={0}\n            end={new BigNumber(totalPlm.getTotalPlm()).toNumber()}\n            decimals={2}\n            duration={1}\n            separator=\",\"\n        />\n    );\n\n    return (\n        <div className={classes.pageContent}>\n            <h1>Lockdrop Result</h1>\n            {isLoading ? (\n                <>\n                    <CircularProgress />\n                </>\n            ) : totalPlm.locks.length > 0 || totalPlm.affiliationRefsBonuses.length > 0 ? (\n                <>\n                    <h2 className={classes.header}>{countupTotalPlmVal} PLM in total</h2>\n                    <p>You have locked {totalPlm.locks.length} time(s)</p>\n                    <p>\n                        ETH exchange rate at the end of the lockdrop: {exRate} USD(\n                        <a href=\"https://api.coingecko.com/api/v3/coins/ethereum/history?date=01-05-2020&localization=false\">\n                            ref\n                        </a>\n                        )\n                    </p>\n                    <p>You have received around {totalPlm.basePlm.toFormat(2)} PLM from locking</p>\n                    <Divider />\n                    <h2>Affiliation Program</h2>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroRefPopover(true)}>\n                        <IonLabel>{totalPlm.affiliationRefsBonuses.length} locks</IonLabel>\n                    </IonChip>\n                    <IonLabel>referenced your address as a introducer: {totalPlm.getAffBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoRefPopover} onDidDismiss={() => setShowIntroRefPopover(false)}>\n                        <IntoRefItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <IonLabel>You have referenced </IonLabel>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroPopover(true)}>\n                        <IonLabel>{totalPlm.introducerAndBonuses.length} introducers</IonLabel>\n                    </IonChip>\n                    <IonLabel>: {totalPlm.getIntroBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoPopover} onDidDismiss={() => setShowIntroPopover(false)}>\n                        <IntoAffItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <ClaimPlm web3={web3} />\n                </>\n            ) : (\n                <h2 className={classes.header}>No Locks found for your address!</h2>\n            )}\n        </div>\n    );\n};\n\nexport default LockdropResult;\n\ninterface IntroRefProps {\n    data: PlmDrop;\n}\nconst IntoRefItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.affiliationRefsBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>References</IonListHeader>\n                        {data.affiliationRefsBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No References</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\nconst IntoAffItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.introducerAndBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>Introducers</IonListHeader>\n                        {data.introducerAndBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No Introducers</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\ninterface ClaimProps {\n    web3: Web3;\n}\nconst ClaimPlm: React.FC<ClaimProps> = ({ web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                paddingTop: theme.spacing(2),\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                maxWidth: '100%',\n            },\n            addressPanel: {\n                padding: theme.spacing(3, 3, 0),\n            },\n            root: {\n                width: '100%',\n                alignContent: 'center',\n                backgroundColor: theme.palette.background.paper,\n            },\n            nested: {\n                paddingLeft: theme.spacing(4),\n            },\n        }),\n    );\n\n    const [isLoading, setLoadState] = useState(false);\n    const [plmAddress, setPlmAddress] = useState('');\n    const [ethPubkey, setEthPubkey] = useState('');\n    const [open, setOpen] = useState(false);\n\n    const getPlasmAddress = async () => {\n        const pubKey = await getPubKey(web3);\n        let result = '';\n        if (typeof pubKey === 'string') {\n            setEthPubkey(pubKey);\n            // remove the 0x prefix before passing the value\n            const plmAddress = generatePlmAddress(pubKey.replace('0x', ''));\n            result = plmAddress;\n        }\n        setLoadState(false);\n        return result;\n    };\n    const ExpandItem = () => {\n        setOpen(!open);\n    };\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonLoading isOpen={isLoading} message={'Verifying user...'} />\n            <IonButton\n                color=\"primary\"\n                size=\"large\"\n                className={classes.claimButton}\n                onClick={async () => {\n                    setLoadState(true);\n                    setPlmAddress(await getPlasmAddress());\n                }}\n            >\n                Get Plasm Address\n            </IonButton>\n            {plmAddress ? (\n                <>\n                    <SectionCard maxWidth=\"md\">\n                        <div className={classes.addressPanel}>\n                            <p>Your Plasm Network address with the lockdrop rewards:</p>\n                            <Link\n                                color=\"inherit\"\n                                href={'https://plasm.subscan.io/account/' + plmAddress}\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <h2 className={classes.header}>{plmAddress}</h2>\n                            </Link>\n                            <List component=\"nav\" className={classes.root}>\n                                <ListItem button onClick={ExpandItem}>\n                                    <ListItemIcon>\n                                        <VpnKeyIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary=\"View Eth Public Key\" />\n                                    {open ? <ExpandLess /> : <ExpandMore />}\n                                </ListItem>\n                                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                    <Typography className={classes.header}>{ethPubkey}</Typography>\n                                </Collapse>\n                            </List>\n                        </div>\n                    </SectionCard>\n                </>\n            ) : null}\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { firstEthIntroducer, defaultAddress } from '../../data/affiliationProgram';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport { calculateTotalPlm } from '../../helpers/lockdrop/EthereumLockdrop';\nimport {\n    List,\n    ListItemText,\n    ListSubheader,\n    Divider,\n    ListItem,\n    makeStyles,\n    createStyles,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport SectionCard from '../SectionCard';\n\ninterface Props {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        title: {\n            textAlign: 'center',\n            padding: theme.spacing(4, 2, 0),\n        },\n    }),\n);\n\nconst AffiliationList: React.FC<Props> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockdropResult, setLockdropResult] = useState<PlmDrop[]>([]);\n\n    function getAffiliationResults(lockData: LockEvent[]) {\n        // filter out the 0x00 address from the list\n        const validAddresses = firstEthIntroducer.filter(address => address !== defaultAddress);\n\n        // get the lockdrop result\n        const lockResults = validAddresses.map(i => {\n            return calculateTotalPlm(i, lockData);\n        });\n\n        // sort the array by the number of references\n        return lockResults.sort((a, b) =>\n            a.affiliationRefsBonuses.length > b.affiliationRefsBonuses.length\n                ? -1\n                : a.affiliationRefsBonuses.length < b.affiliationRefsBonuses.length\n                ? 1\n                : 0,\n        );\n    }\n\n    useEffect(() => {\n        setLockdropResult(getAffiliationResults(lockData));\n    }, [lockData]);\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <Typography className={classes.title} variant=\"h3\">\n                    Affiliation Leaderboard\n                </Typography>\n                <List component=\"nav\" className={classes.listRoot} subheader={<li />}>\n                    <li className={classes.listSection}>\n                        <ul className={classes.ul}>\n                            <ListSubheader>There are {firstEthIntroducer.length - 1} introducers</ListSubheader>\n                            <Divider />\n                            {lockdropResult.map(i => (\n                                <IntroducerBonusesItems key={i.receiver} lockResult={i} />\n                            ))}\n                        </ul>\n                    </li>\n                </List>\n            </SectionCard>\n        </>\n    );\n};\n\ninterface IntroducerPlanelProps {\n    lockResult: PlmDrop;\n}\n\nconst IntroducerBonusesItems: React.FC<IntroducerPlanelProps> = ({ lockResult }) => {\n    return (\n        <>\n            <ListItem>\n                <ListItemText>\n                    <h2>{lockResult.receiver}</h2>\n                    <p>{lockResult.affiliationRefsBonuses.length} lock(s) referenced this address</p>\n                    <p>{lockResult.getAffBonus()} PLMs gained from this</p>\n                </ListItemText>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n\nexport default AffiliationList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport * as ethLockdrop from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { LockEvent } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { removeWeb3Event } from '../helpers/getWeb3';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Divider } from '@material-ui/core';\nimport moment from 'moment';\nimport LockdropCountdownPanel from '../components/EthLock/LockdropCountdownPanel';\nimport { firstLockContract } from '../data/lockInfo';\nimport 'react-dropdown/style.css';\nimport LockdropResult from 'src/components/EthLock/LockdropResult';\nimport AffiliationList from 'src/components/EthLock/AffiliationList';\n\nconst FirstEthLockdropPage: React.FC = () => {\n    const [web3, setWeb3] = useState<Web3>();\n    const [account, setAccount] = useState<string>('');\n\n    const [isLoading, setLoading] = useState<{\n        loading: boolean;\n        message: string;\n    }>({\n        loading: false,\n        message: '',\n    });\n\n    const [networkType, setNetworkType] = useState('');\n    const [allLockEvents, setLockEvents] = useState<LockEvent[]>([]);\n\n    const [lockdropStart, setLockdropStart] = useState('0');\n    const [lockdropEnd, setLockdropEnd] = useState('0');\n\n    const isMainnet = (currentNetwork: string) => {\n        return currentNetwork === 'main';\n    };\n\n    const lockStoreKey = `id:${firstLockContract.find(i => i.type === 'main')?.address}`;\n\n    // store all lock events to local storage every time things changes\n    useEffect(() => {\n        if (allLockEvents.length > 0 && Array.isArray(allLockEvents)) {\n            const serializedEvents = ethLockdrop.serializeLockEvents(allLockEvents);\n            // ensure that the store value are not the same before storing\n            if (localStorage.getItem(lockStoreKey) !== serializedEvents) {\n                localStorage.setItem(lockStoreKey, serializedEvents);\n            }\n        }\n    }, [allLockEvents, lockStoreKey]);\n\n    // load web3 instance\n    useEffect(() => {\n        setLoading({\n            loading: true,\n            message: 'Connecting to Web3 instance...',\n        });\n        (async function() {\n            try {\n                const web3State = await ethLockdrop.connectWeb3();\n                const _netType = await web3State.eth.net.getNetworkType();\n                setNetworkType(_netType);\n                if (isMainnet(_netType)) {\n                    const contAddr = firstLockContract.find(i => i.type === 'main')?.address;\n                    if (typeof contAddr === 'undefined') {\n                        throw new Error('Could not find lockdrop contract');\n                    }\n\n                    const _contract = await ethLockdrop.createContractInstance(web3State, contAddr);\n\n                    const ethAddr = await ethLockdrop.fetchAllAddresses(web3State);\n\n                    // check contract start and end dates\n                    const _end = await ethLockdrop.getContractEndDate(_contract);\n                    const _start = await ethLockdrop.getContractStartDate(_contract);\n                    setLockdropEnd(_end);\n                    setLockdropStart(_start);\n\n                    setWeb3(web3State);\n                    setAccount(ethAddr[0]);\n\n                    const _allLocks = await ethLockdrop.getAllLockEvents(_contract);\n                    setLockEvents(_allLocks);\n                }\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            }\n        })().finally(() => {\n            setLoading({ loading: false, message: '' });\n        });\n        return () => {\n            removeWeb3Event();\n        };\n        // we disable this because we want this to only call once (on component mount)\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <IonPage>\n            <Navbar />\n            <IonContent>\n                <>\n                    <IonLoading isOpen={isLoading.loading} message={isLoading.message} />\n                    {!isMainnet(networkType) ? (\n                        <SectionCard maxWidth=\"lg\">\n                            <Typography variant=\"h2\" component=\"h4\" align=\"center\">\n                                Please access this page with a Mainnet wallet\n                            </Typography>\n                        </SectionCard>\n                    ) : (\n                        <>\n                            <SectionCard maxWidth=\"lg\">\n                                <LockdropCountdownPanel\n                                    startTime={moment.unix(parseInt(lockdropStart))}\n                                    endTime={moment.unix(parseInt(lockdropEnd))}\n                                    lockData={allLockEvents}\n                                />\n                                {web3 && (\n                                    <>\n                                        <Divider />\n                                        <LockdropResult lockData={allLockEvents} web3={web3} />\n                                    </>\n                                )}\n                            </SectionCard>\n\n                            <AffiliationList lockData={allLockEvents} />\n\n                            {web3 && <LockedEthList web3={web3} account={account} lockData={allLockEvents} />}\n                        </>\n                    )}\n                </>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\nexport default FirstEthLockdropPage;\n","import { IonSelect, IonSelectOption } from '@ionic/react';\nimport React from 'react';\nimport { OptionData } from '../types/LockdropModels';\n\n// react function component for making dropdown with the given items\nexport const DropdownOption = (props: OptionData) => {\n    const items = props.dataSets.map(x => {\n        return (\n            <IonSelectOption className=\"dropdown-item\" key={props.dataSets.indexOf(x)} value={x.value}>\n                {x.label}\n            </IonSelectOption>\n        );\n    });\n\n    return (\n        <IonSelect interface=\"popover\" onIonChange={e => props.onChoose(e)}>\n            {items}\n        </IonSelect>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useMemo, useCallback } from 'react';\nimport { TimeFormat } from '../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    /**function callback if the countdown is over. This returns a boolean as the parameter */\n    onFinish?: (finished: boolean) => void;\n}\n\nconst CountdownTimer: React.FC<Props> = ({ startTime, endTime, onFinish }) => {\n    const now = moment().utc();\n    const handleCountdownFinish = useCallback(\n        (didFinish: boolean) => {\n            if (onFinish) onFinish(didFinish);\n        },\n        [onFinish],\n    );\n\n    const timeLeft = useMemo(() => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let _timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = moment(endTime).valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            _timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        handleCountdownFinish(tillEnd < 0);\n        return _timeLeft;\n    }, [now, startTime, endTime, handleCountdownFinish]);\n\n    return (\n        <>\n            <p>\n                {timeLeft.days} Days {timeLeft.hours} Hours {timeLeft.minutes} Minutes {timeLeft.seconds} Seconds\n            </p>\n        </>\n    );\n};\n\nexport default CountdownTimer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\n//import { makeStyles, createStyles } from '@material-ui/core';\nimport * as btcLockdrop from '../../helpers/lockdrop/BitcoinLockdrop';\nimport {\n    IonChip,\n    IonIcon,\n    IonLabel,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonButtons,\n    IonButton,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonList,\n    IonItem,\n    IonSpinner,\n} from '@ionic/react';\nimport { lock, time } from 'ionicons/icons';\nimport { Tooltip } from '@material-ui/core';\nimport BigNumber from 'bignumber.js';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport CountdownTimer from '../CountdownTimer';\nimport moment from 'moment';\n\ninterface Props {\n    scriptAddress: string;\n    lockData: BlockStreamApi.Transaction[];\n    lockDurationDay: number;\n    onUnlock?: (lock: BlockStreamApi.Transaction) => void;\n}\n\n/**\n * Shows the number of BTC locked in the given P2SH address. Information is fetched from block stream\n * @param param0 P2SH address to look for\n */\nconst LockStatus: React.FC<Props> = ({ lockData, onUnlock, scriptAddress, lockDurationDay }) => {\n    const [lockedValue, setLockedValue] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    const [canUnlock, setCanUnlock] = useState(false);\n\n    const handleUnlock = (lock: BlockStreamApi.Transaction) => {\n        if (onUnlock) onUnlock(lock);\n    };\n\n    const getLockBal = useCallback(\n        (lock: BlockStreamApi.Transaction) => {\n            const _lockVout = lock.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n            if (_lockVout) return btcLockdrop.satoshiToBitcoin(_lockVout.value.toFixed()).toFixed();\n            else return '0';\n        },\n        [scriptAddress],\n    );\n\n    useEffect(() => {\n        if (lockData.length === 0) {\n            setLockedValue('');\n        } else {\n            let totalBal = new BigNumber(0);\n            lockData.forEach(i => {\n                const _lockVout = i.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n                if (_lockVout) {\n                    totalBal = totalBal.plus(new BigNumber(_lockVout.value.toFixed()));\n                }\n            });\n\n            setLockedValue(btcLockdrop.satoshiToBitcoin(totalBal).toFixed());\n        }\n    }, [lockData, lockedValue, scriptAddress]);\n\n    return (\n        <>\n            <IonModal isOpen={showModal} onDidDismiss={() => setShowModal(false)}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>BTC Lock Information</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={() => setShowModal(false)}>Close</IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardSubtitle>General information about your lock</IonCardSubtitle>\n                        <IonCardTitle>Lock Overview</IonCardTitle>\n                    </IonCardHeader>\n                    <>\n                        {lockData.length > 0 && lockedValue ? (\n                            <IonCardContent>\n                                <IonList>\n                                    {lockData.map(e => (\n                                        <IonItem key={e.txid}>\n                                            <IonLabel>\n                                                <h2>Transaction Hash: {e.txid}</h2>\n                                                <h3>Locked Amount: {getLockBal(e)} BTC</h3>\n                                                {e.status.confirmed ? (\n                                                    <>\n                                                        <p>Locked in block no. {e.status.block_height}</p>\n                                                        {canUnlock ? (\n                                                            <p>Tokens can be unlocked</p>\n                                                        ) : (\n                                                            <>\n                                                                <CountdownTimer\n                                                                    startTime={moment.unix(e.status.block_time)}\n                                                                    endTime={moment\n                                                                        .unix(e.status.block_time)\n                                                                        .add(lockDurationDay, 'days')}\n                                                                    onFinish={(u: boolean) => setCanUnlock(u)}\n                                                                />\n                                                                <p> Till unlock</p>\n                                                            </>\n                                                        )}\n                                                    </>\n                                                ) : (\n                                                    <p>Transaction not confirmed</p>\n                                                )}\n                                            </IonLabel>\n                                            {onUnlock && (\n                                                <IonButton\n                                                    fill=\"outline\"\n                                                    slot=\"end\"\n                                                    onClick={() => handleUnlock(e)}\n                                                    disabled={!canUnlock}\n                                                >\n                                                    Unlock\n                                                </IonButton>\n                                            )}\n                                        </IonItem>\n                                    ))}\n                                </IonList>\n                            </IonCardContent>\n                        ) : (\n                            <IonLabel>No locks found yet! (Please wait for it to be confirmed)</IonLabel>\n                        )}\n                    </>\n                </IonCard>\n            </IonModal>\n\n            <Tooltip title=\"Click for details\" aria-label=\"lock-detail\">\n                <IonChip onClick={() => setShowModal(true)}>\n                    <IonIcon icon={lockedValue ? lock : time} color={lockedValue ? 'success' : 'warning'} />\n                    {lockedValue ? (\n                        <IonLabel>{lockedValue} BTC locked</IonLabel>\n                    ) : (\n                        <>\n                            <IonLabel>No deposits detected yet</IonLabel>\n                            <IonSpinner name=\"bubbles\" />\n                        </>\n                    )}\n                </IonChip>\n            </Tooltip>\n        </>\n    );\n};\n\nexport default LockStatus;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState } from 'react';\nimport { Paper, Typography, makeStyles, createStyles, Tooltip, IconButton } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { IonToast } from '@ionic/react';\n\ninterface Props {\n    message: string;\n    isCode?: boolean;\n    header?: string;\n    componentType?:\n        | 'inherit'\n        | 'button'\n        | 'overline'\n        | 'caption'\n        | 'h1'\n        | 'h2'\n        | 'h3'\n        | 'h4'\n        | 'h5'\n        | 'h6'\n        | 'subtitle1'\n        | 'subtitle2'\n        | 'body1'\n        | 'body2'\n        | 'srOnly';\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        messageBox: {\n            padding: theme.spacing(2, 4),\n            alignItems: 'center',\n        },\n        signMessage: {\n            alignItems: 'center',\n            display: 'flex',\n            justifyContent: 'center',\n            height: '100%',\n        },\n        message: {\n            wordBreak: 'break-all',\n        },\n        copyIcon: {\n            verticalAlign: 'middle',\n        },\n    }),\n);\n\nconst CopyMessageBox: React.FC<Props> = ({ header, message, componentType, isCode }) => {\n    const classes = useStyles();\n    const [showCopyToast, setCopyToast] = useState(false);\n\n    const clickCopyMessage = () => {\n        navigator.clipboard.writeText(message).then(\n            function() {\n                setCopyToast(true);\n            },\n            function(err) {\n                console.error('Async: Could not copy text: ', err);\n            },\n        );\n    };\n    return (\n        <>\n            <Paper elevation={1} className={classes.messageBox}>\n                {header && (\n                    <Typography component=\"h4\" variant=\"h3\">\n                        {header}:\n                    </Typography>\n                )}\n\n                <div className={classes.signMessage}>\n                    {isCode ? (\n                        <code className={classes.message}>{message}</code>\n                    ) : (\n                        <Typography\n                            component=\"h1\"\n                            variant={componentType ? componentType : 'h2'}\n                            className={classes.message}\n                        >\n                            {message}\n                        </Typography>\n                    )}\n\n                    <div className={classes.copyIcon}>\n                        <Tooltip title=\"Copy Message\" aria-label=\"copy\">\n                            <IconButton color=\"inherit\" component=\"span\" onClick={() => clickCopyMessage()}>\n                                <FileCopyIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            </Paper>\n            <IonToast\n                isOpen={showCopyToast}\n                onDidDismiss={() => setCopyToast(false)}\n                message=\"Copied message to clipboard\"\n                duration={2000}\n            />\n        </>\n    );\n};\n\nexport default CopyMessageBox;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonAvatar,\n    IonSkeletonText,\n} from '@ionic/react';\nimport { qrEncodeUri } from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { makeStyles, createStyles, Grid } from '@material-ui/core';\nimport LockStatus from './LockStatus';\nimport CopyMessageBox from '../CopyMessageBox';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\n\ninterface Props {\n    address: string;\n    lockData: BlockStreamApi.Transaction[];\n    lockDurationDay: number;\n    onUnlock?: (lock: BlockStreamApi.Transaction) => void;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        qrImage: {\n            boxSizing: 'border-box',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            verticalAlign: 'middle',\n            alignSelf: 'center',\n            maxHeight: '100%',\n            maxWidth: 250,\n            objectFit: 'cover',\n        },\n        imageSkeleton: {\n            boxSizing: 'border-box',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            verticalAlign: 'middle',\n            alignSelf: 'center',\n            objectFit: 'cover',\n        },\n        chipGrid: {\n            position: 'relative',\n            padding: theme.spacing(2),\n        },\n        statusChip: {\n            [theme.breakpoints.up('sm')]: {\n                position: 'absolute',\n                right: 0,\n                top: 0,\n            },\n        },\n    }),\n);\n\nconst QrEncodedAddress: React.FC<Props> = ({ address, lockData, onUnlock, lockDurationDay }) => {\n    const classes = useStyles();\n    const [imageUri, setUri] = useState('');\n    const [imageLoaded, setImageLoad] = useState(false);\n\n    useEffect(() => {\n        qrEncodeUri(address).then(img => {\n            setUri(img);\n        });\n    }, [address]);\n\n    return (\n        <>\n            <IonCard>\n                <IonCardHeader>\n                    <img\n                        src={imageUri}\n                        className={classes.qrImage}\n                        alt=\"\"\n                        style={imageLoaded ? {} : { display: 'none' }}\n                        onLoad={() => setImageLoad(true)}\n                    />\n                    {imageLoaded ? null : (\n                        <IonAvatar className={classes.imageSkeleton}>\n                            <IonSkeletonText animated />\n                        </IonAvatar>\n                    )}\n\n                    <IonCardSubtitle>Please send the amount you want to lock to this P2SH address</IonCardSubtitle>\n                    <Grid container>\n                        <Grid item xs={12} sm={6}>\n                            <IonCardTitle>Lock Script Address</IonCardTitle>\n                        </Grid>\n                        <Grid item xs={12} sm={6} className={classes.chipGrid}>\n                            <div className={classes.statusChip}>\n                                <LockStatus\n                                    lockData={lockData}\n                                    scriptAddress={address}\n                                    onUnlock={onUnlock}\n                                    lockDurationDay={lockDurationDay}\n                                />\n                            </div>\n                        </Grid>\n                    </Grid>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <CopyMessageBox header=\"P2SH Address\" message={address} />\n                </IonCardContent>\n            </IonCard>\n        </>\n    );\n};\n\nexport default QrEncodedAddress;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonTextarea,\n    IonButton,\n    IonChip,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonTitle,\n    IonText,\n    IonLoading,\n} from '@ionic/react';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport * as btcLock from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DropdownOption } from '../DropdownOption';\nimport { btcDustyDurations, btcDurations } from '../../data/lockInfo';\nimport QrEncodedAddress from './QrEncodedAddress';\nimport CopyMessageBox from '../CopyMessageBox';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport { OptionItem, Lockdrop, LockdropType } from 'src/types/LockdropModels';\nimport * as plasmUtils from '../../helpers/plasmUtils';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport * as polkadotCrypto from '@polkadot/util-crypto';\nimport * as bitcoinjsMessage from 'bitcoinjs-message';\n\ninterface Props {\n    networkType: bitcoinjs.Network;\n    //plasmApi: ApiPromise;\n}\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        button: {\n            textAlign: 'center',\n        },\n    }),\n);\n\n/**\n * Obtains lockdrop participant's public key by receiving raw signatures and BTC address\n * @param networkType Bitcoin network to use\n */\nconst BtcRawSignature: React.FC<Props> = ({ networkType }) => {\n    const classes = useStyles();\n    // switch lock duration depending on the chain network\n    const networkLockDur = networkType === bitcoinjs.networks.bitcoin ? btcDurations : btcDustyDurations;\n\n    const [sigInput, setSig] = useState('');\n    const [addressInput, setAddress] = useState('');\n\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [p2shAddress, setP2sh] = useState('');\n    const [publicKey, setPublicKey] = useState('');\n    const [allLockParams, setAllLockParams] = useState<Lockdrop[]>([]);\n    const [currentScriptLocks, setCurrentScriptLocks] = useState<BlockStreamApi.Transaction[]>([]);\n    const [isLoading, setLoading] = useState<{ loadState: boolean; message: string }>({\n        loadState: false,\n        message: '',\n    });\n\n    // current lock unlock signature data set\n    // everything below here are used for raw unlock signature\n    const [lockUtxo, setLockUtxo] = useState<BlockStreamApi.Transaction>();\n    const [unlockTxBuilder, setUnlockTxBuilder] = useState<bitcoinjs.Transaction>();\n    const [userUnlockSig, setUserUnlockSig] = useState('');\n    const [unlockUtxoHex, setUnlockUtxoHex] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    // in satoshi\n    const [unlockFee, setUnlockFee] = useState('0');\n\n    // signature nonce used for security\n    const sigNonce = useMemo(() => {\n        return polkadotCrypto.randomAsHex(2);\n    }, []);\n\n    const isValidFee = useCallback(\n        (fee: string, lockTx: BlockStreamApi.Transaction) => {\n            // checks if the given string is a valid integer\n            function checkInt(val: string) {\n                const checkString = new RegExp(/^(0|[1-9][0-9]*)$/);\n                return checkString.test(val);\n            }\n\n            if (typeof lockTx !== 'undefined' && !isNaN(parseInt(fee)) && checkInt(fee)) {\n                const lockP2sh = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n                const _fee = parseInt(fee);\n                const lockVout = lockTx.vout.find(locked => locked.scriptpubkey_address === lockP2sh.address!);\n                if (typeof lockVout === 'undefined') {\n                    return false;\n                }\n                return lockVout.value - _fee > 0 && _fee !== 0;\n            } else {\n                return false;\n            }\n        },\n        [publicKey, lockDuration.value, networkType],\n    );\n\n    const sigHash = useMemo(() => {\n        try {\n            if (typeof lockUtxo !== 'undefined' && !isNaN(parseInt(unlockFee)) && isValidFee(unlockFee, lockUtxo)) {\n                const _fee = parseInt(unlockFee);\n                const unsigned = btcLock.unsignedUnlockTx(lockUtxo, publicKey, lockDuration.value, networkType, _fee);\n                setShowModal(true);\n                setUnlockTxBuilder(unsigned.unsignedUnlockTx);\n                return unsigned.signatureHash;\n            }\n        } catch (err) {\n            console.log(err);\n            toast.error(err.message);\n        }\n        return 'N/A';\n    }, [unlockFee, publicKey, lockDuration.value, networkType, lockUtxo, isValidFee]);\n\n    const onSubmit = () => {\n        try {\n            if (!lockDuration || !addressInput || !sigInput) throw new Error('Please fill in all the inputs');\n\n            if (!btcLock.validateBtcAddress(addressInput, networkType))\n                throw new Error('Please use a valid Bitcoin address');\n            const _msg = btcLock.MESSAGE + sigNonce;\n\n            if (bitcoinjsMessage.verify(_msg, addressInput, sigInput)) {\n                const pub = btcLock.getPublicKey(addressInput, sigInput, _msg, networkType);\n                console.log({ _msg, addressInput, sigInput, pub });\n                setPublicKey(pub);\n\n                const p2sh = btcLock.getLockP2SH(lockDuration.value, pub, networkType);\n\n                if (typeof p2sh.address === 'string') {\n                    setP2sh(p2sh.address);\n                } else {\n                    throw new Error('Cannot create P2SH address');\n                }\n                toast.success('Successfully created lock script');\n            } else {\n                throw new Error('Invalid signature');\n            }\n        } catch (e) {\n            console.log(e);\n            toast.error(e.message);\n        }\n    };\n\n    // show unsigned transaction hahs\n    const unlockScriptTx = (lock: BlockStreamApi.Transaction) => {\n        // set default transaction fee\n        setUnlockFee((lock.fee * 0.1).toString());\n        setLockUtxo(lock);\n    };\n\n    // use the obtained transaction signature to create full signed transaction in hex\n    // this function will broad cast the transaction as well\n    const getUnlockUtxo = async () => {\n        if (unlockTxBuilder) {\n            try {\n                if (userUnlockSig === '') {\n                    throw new Error('Please paste the unlock signature');\n                }\n                setLoading({ loadState: true, message: 'broadcasting unlock transaction...' });\n                const lockScript = btcLock.btcLockScript(\n                    publicKey,\n                    btcLock.daysToBlockSequence(lockDuration.value),\n                    networkType,\n                );\n\n                const signedUnlockUtxo = btcLock.signTransactionRaw(\n                    unlockTxBuilder,\n                    userUnlockSig,\n                    lockScript,\n                    networkType,\n                );\n\n                console.log('Signed unlock UTXO hex:\\n' + signedUnlockUtxo);\n\n                setUnlockUtxoHex(signedUnlockUtxo);\n\n                const _net = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n                const unlockTxId = await btcLock.broadcastTransaction(signedUnlockUtxo, _net);\n                console.log('Broadcasted: ' + unlockTxId);\n                toast.success('Successfully broadcasted ' + unlockTxId);\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            } finally {\n                setLoading({ loadState: false, message: '' });\n            }\n        }\n    };\n\n    // clean all unlock UTXO signature state when closing the modal\n    const cleanUnlockTxState = () => {\n        setLockUtxo(undefined);\n        setUnlockTxBuilder(undefined);\n        setUserUnlockSig('');\n        setUnlockFee('0');\n        setUnlockUtxoHex('');\n        setShowModal(false);\n    };\n\n    const getLockBal = useCallback(() => {\n        if (lockUtxo) {\n            const _lockVout = lockUtxo.vout.find(locked => locked.scriptpubkey_address === p2shAddress);\n            if (_lockVout) return btcLock.satoshiToBitcoin(_lockVout.value.toFixed()).toFixed();\n        }\n        return '0';\n    }, [lockUtxo, p2shAddress]);\n\n    const fetchLockdropParams = useCallback(async () => {\n        const blockStreamNet = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n        // initialize lockdrop data array\n        const _lockParams: Lockdrop[] = [];\n\n        // get all the possible lock addresses\n        networkLockDur.map(async (dur, index) => {\n            const scriptAddr = btcLock.getLockP2SH(dur.value, publicKey, networkType).address!;\n            // make a real-time lockdrop data structure with the current P2SH and duration\n            //const lock = await btcLock.getLockParameter(scriptAddr, dur.value, publicKey, blockStreamNet);\n\n            const locks = await btcLock.getBtcTxsFromAddress(scriptAddr, blockStreamNet);\n            const daysToEpoch = 60 * 60 * 24 * dur.value;\n\n            const lockParams = locks.map(i => {\n                const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddr);\n\n                if (lockVal) {\n                    return plasmUtils.createLockParam(\n                        LockdropType.Bitcoin,\n                        '0x' + i.txid,\n                        '0x' + publicKey,\n                        daysToEpoch.toString(),\n                        lockVal.value.toString(),\n                    );\n                } else {\n                    throw new Error('Could not find the lock value from the UTXO');\n                }\n            });\n\n            // if the lock data is the one that the user is viewing\n            if (p2shAddress === scriptAddr && dur.value === lockDuration.value) {\n                setCurrentScriptLocks(locks);\n            }\n\n            // loop through all the token locks within the given script\n            // this is to prevent nested array\n            lockParams.forEach(e => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const currentParam = plasmUtils.structToLockdrop(e as any);\n\n                _lockParams.push(currentParam);\n            });\n\n            // set lockdrop param data if we're in the final loop\n            // we do this because we want to set the values inside the then block\n            if (_lockParams.length > allLockParams.length && index === networkLockDur.length - 1) {\n                setAllLockParams(_lockParams);\n            }\n        });\n    }, [publicKey, networkType, p2shAddress, networkLockDur, allLockParams, lockDuration.value]);\n\n    useEffect(() => {\n        // change P2SH if the user changed the lock duration\n        if (publicKey && lockDuration.value !== 0) {\n            const lockScript = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n            setP2sh(lockScript.address!);\n            fetchLockdropParams().catch(e => {\n                toast.error(e);\n            });\n        }\n    }, [fetchLockdropParams, lockDuration.value, networkType, publicKey]);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            publicKey &&\n                fetchLockdropParams().catch(e => {\n                    toast.error(e);\n                });\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            {p2shAddress && (\n                <QrEncodedAddress\n                    address={p2shAddress}\n                    lockData={currentScriptLocks}\n                    onUnlock={unlockScriptTx}\n                    lockDurationDay={lockDuration.value}\n                />\n            )}\n\n            <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n            <IonModal isOpen={showModal} onDidDismiss={() => cleanUnlockTxState()}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Unlock BTC Transaction</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={() => cleanUnlockTxState()}>Close</IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardSubtitle>\n                            Provide the signature for your unlock script. This will unlock your tokens\n                        </IonCardSubtitle>\n                        <IonCardTitle>Unlock UTXO</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        {lockUtxo && (\n                            <>\n                                <IonLabel>\n                                    <p>Lock ID: {lockUtxo.txid}</p>\n                                    <p>Lock Value: {getLockBal()} BTC</p>\n                                </IonLabel>\n                                {unlockUtxoHex ? (\n                                    <CopyMessageBox header=\"signed unlock transaction\" message={unlockUtxoHex} isCode />\n                                ) : (\n                                    <>\n                                        <CopyMessageBox header=\"unsigned\" message={sigHash} isCode />\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">\n                                                Paste your signature here<IonText color=\"danger\">*</IonText>\n                                            </IonLabel>\n                                            <IonTextarea\n                                                placeholder=\"f816733330690bdce1...\"\n                                                value={userUnlockSig}\n                                                onIonChange={e => setUserUnlockSig(e.detail.value!)}\n                                            ></IonTextarea>\n                                        </IonItem>\n                                        <IonItem>\n                                            <IonLabel position=\"floating\">Transaction fee</IonLabel>\n                                            <IonInput\n                                                placeholder={lockUtxo.fee.toString() + '  Satoshi'}\n                                                onIonInput={e => {\n                                                    const _inputFee = (e.target as HTMLInputElement).value;\n                                                    setUnlockFee(_inputFee);\n                                                }}\n                                                color={isValidFee(unlockFee, lockUtxo) ? 'primary' : 'danger'}\n                                            ></IonInput>\n                                        </IonItem>\n                                    </>\n                                )}\n\n                                <IonButton\n                                    disabled={!!unlockUtxoHex || !isValidFee(unlockFee, lockUtxo)}\n                                    onClick={() => getUnlockUtxo()}\n                                >\n                                    Generate unlock UTXO\n                                </IonButton>\n                            </>\n                        )}\n                    </IonCardContent>\n                </IonCard>\n            </IonModal>\n\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardSubtitle>\n                        Please provide the public key or address and signature of the BTC address you wish to use for\n                        the BTC lockdrop\n                    </IonCardSubtitle>\n                    <IonCardTitle>Get Public Key</IonCardTitle>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <CopyMessageBox header=\"message\" message={btcLock.MESSAGE + sigNonce} />\n                    <IonItem>\n                        <IonLabel position=\"stacked\">Bitcoin Address</IonLabel>\n                        <IonInput\n                            value={addressInput}\n                            placeholder=\"Enter BTC Address\"\n                            onIonChange={e => setAddress(e.detail.value!)}\n                        ></IonInput>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonTextarea\n                            placeholder=\"Paste your base64 message signature here...\"\n                            value={sigInput}\n                            onIonChange={e => setSig(e.detail.value!)}\n                        ></IonTextarea>\n                    </IonItem>\n                    <IonLabel position=\"stacked\">Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={btcDustyDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setDuration(\n                                    btcDustyDurations.filter(\n                                        i => i.value === ((e.target.value as unknown) as number),\n                                    )[0],\n                                )\n                            }\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n                    <div className={classes.button}>\n                        <IonButton onClick={onSubmit} disabled={!!publicKey}>\n                            Generate Lock Script\n                        </IonButton>\n                    </div>\n                </IonCardContent>\n            </IonCard>\n            {/* <SectionCard maxWidth=\"lg\">\n                <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                    Real-time Lockdrop Status\n                </Typography>\n                {publicKey && lockDuration.value !== 0 ? (\n                    <ClaimStatus\n                        claimParams={allLockParams}\n                        plasmApi={plasmApi}\n                        networkType=\"BTC\"\n                        plasmNetwork=\"Dusty\"\n                        publicKey={publicKey}\n                    />\n                ) : (\n                    <>\n                        <Container>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                                Provide signature to view\n                            </Typography>\n                        </Container>\n                    </>\n                )}\n            </SectionCard> */}\n        </div>\n    );\n};\n\nexport default BtcRawSignature;\n","import React, { useEffect } from 'react';\nimport { IonContent, IonPage } from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Link, makeStyles, createStyles } from '@material-ui/core';\nimport quantstampLogo from '../resources/quantstamp-logo.png';\nimport BtcRawSignature from '../components/BtcLock/BtcRawSignature';\n//import TrezorConnect, { DEVICE } from 'trezor-connect';\nimport * as bitcoinjs from 'bitcoinjs-lib';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        quantLogo: {\n            marginRight: theme.spacing(2),\n            maxHeight: 20,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        textBox: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    }),\n);\n\nexport default function DustyBtcLockPage() {\n    const classes = useStyles();\n    // const [isLoading, setLoading] = useState<{\n    //     loadState: boolean;\n    //     message: string;\n    // }>({\n    //     loadState: false,\n    //     message: '',\n    // });\n\n    // connect to plasm node on mount\n    useEffect(() => {\n        // setLoading({\n        //     loadState: true,\n        //     message: 'Connecting to Plasm Network',\n        // });\n        // plasmUtils\n        //     .createPlasmInstance(plasmUtils.PlasmNetwork.Dusty)\n        //     .then(e => {\n        //         setPlasmApi(e);\n        //         console.log('connected to Plasm network');\n        //     })\n        //     .catch(err => {\n        //         toast.error(err);\n        //         console.log(err);\n        //     })\n        //     .finally(() => {\n        //         setLoading({\n        //             loadState: false,\n        //             message: '',\n        //         });\n        //     });\n    }, []);\n\n    return (\n        <>\n            <IonPage>\n                <Navbar />\n                <IonContent>\n                    <SectionCard maxWidth=\"md\">\n                        <div>\n                            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                Dusty Plasm Network BTC Lockdrop\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                                Audited by{' '}\n                                <Link\n                                    color=\"inherit\"\n                                    href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    <img src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                                </Link>\n                            </Typography>\n                        </div>\n                        <BtcRawSignature networkType={bitcoinjs.networks.testnet} />\n                    </SectionCard>\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        </>\n    );\n}\n","import ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport { LockMenu } from '../types/LockdropModels';\nimport { firstLockdropStart, firstLockdropEnd, secondLockdropStart, secondLockdropEnd } from './lockInfo';\n\nexport const firstLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n\nexport const secondLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/second-eth',\n        icon: ethLogo,\n        startDate: secondLockdropStart,\n        endDate: secondLockdropEnd,\n    },\n    // {\n    //     title: 'BTC Lock',\n    //     uri: '/lock-form/first',\n    //     icon: btcLogo,\n    //     startDate: secondLockdropStart,\n    //     endDate: secondLockdropEnd,\n    //     disabled: true,\n    // },\n];\n\nexport const dustyLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/dusty-eth',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n    {\n        title: 'BTC Lock',\n        uri: '/lock-form/dusty-btc',\n        icon: btcLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { IonMenu, IonListHeader, IonContent, IonList, IonItem, IonIcon, IonLabel, IonRouterLink } from '@ionic/react';\nimport { Links } from '../data/links';\nimport homeIcon from '../resources/home-outline.svg';\nimport twitter from '../resources/logo-twitter.svg';\nimport discord from '../resources/logo-discord.svg';\nimport telegram from '../resources/logo-telegram.svg';\nimport github from '../resources/logo-github.svg';\nimport { firstLock, secondLock, dustyLock } from '../data/pages';\nimport { LockMenu } from '../types/LockdropModels';\nimport { calculator } from 'ionicons/icons';\n\ninterface Props {\n    headerText: string;\n    menuItems: LockMenu[];\n}\nconst MenuSection: React.FC<Props> = ({ headerText, menuItems }) => {\n    return (\n        <IonList>\n            <IonListHeader>{headerText}</IonListHeader>\n            {menuItems.map((i, index) => (\n                <IonRouterLink routerLink={i.uri} key={index}>\n                    <IonItem button detail disabled={i.disabled}>\n                        <IonIcon icon={i.icon} slot=\"start\" />\n                        <IonLabel>{i.title}</IonLabel>\n                    </IonItem>\n                </IonRouterLink>\n            ))}\n        </IonList>\n    );\n};\n\nconst SideMenu: React.FC = () => {\n    return (\n        <>\n            <IonMenu contentId=\"main\">\n                <IonListHeader>Sitemap</IonListHeader>\n                <IonContent>\n                    <IonList>\n                        <IonRouterLink routerLink=\"/lock-form\">\n                            <IonItem button detail>\n                                <IonIcon icon={homeIcon} slot=\"start\" />\n                                <IonLabel>Home</IonLabel>\n                            </IonItem>\n                        </IonRouterLink>\n                    </IonList>\n\n                    <MenuSection headerText=\"First Lockdrop\" menuItems={firstLock} />\n                    <MenuSection headerText=\"Second Lockdrop\" menuItems={secondLock} />\n                    <MenuSection headerText=\"Dusty Lockdrop\" menuItems={dustyLock} />\n\n                    <IonList>\n                        <IonListHeader>Lockdrop Utility</IonListHeader>\n                        <IonRouterLink routerLink=\"/utils-calculator\">\n                            <IonItem button detail>\n                                <IonIcon icon={calculator} slot=\"start\" />\n                                <IonLabel>Lockdrop Calculator</IonLabel>\n                            </IonItem>\n                        </IonRouterLink>\n                    </IonList>\n\n                    <IonList>\n                        <IonListHeader>External Links</IonListHeader>\n                        <IonItem href={Links.discord} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon icon={discord} slot=\"start\" />\n                            <IonLabel>Discord</IonLabel>\n                        </IonItem>\n                        <IonItem href={Links.telegram} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon icon={telegram} slot=\"start\" />\n                            <IonLabel>Telegram</IonLabel>\n                        </IonItem>\n                        <IonItem href={Links.twitter} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon icon={twitter} slot=\"start\" />\n                            <IonLabel>Twitter</IonLabel>\n                        </IonItem>\n                        <IonItem href={Links.github} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon icon={github} slot=\"start\" />\n                            <IonLabel>Github</IonLabel>\n                        </IonItem>\n                    </IonList>\n                </IonContent>\n            </IonMenu>\n        </>\n    );\n};\n\nexport default SideMenu;\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport {\n    IonPage,\n    IonContent,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonItem,\n    IonLabel,\n    IonList,\n    IonItemDivider,\n    IonInput,\n    IonSelect,\n    IonSelectOption,\n    IonChip,\n    IonLoading,\n    IonToggle,\n} from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Container, Typography } from '@material-ui/core';\nimport BigNumber from 'bignumber.js';\nimport { ethDurations, btcDurations } from 'src/data/lockInfo';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../helpers/plasmUtils';\n\nconst LockdropCalcPage = () => {\n    const [tokenType, setTokenType] = useState<'BTC' | 'ETH'>('ETH');\n    const [tokenAmount, setTokenAmount] = useState('');\n    const [tokenExRate, setTokenExRate] = useState<[number, number]>([0, 0]); // 1 token to USD rate\n    const [lockDuration, setLockDuration] = useState(0);\n    const [plasmApi, setPlasmApi] = useState<ApiPromise>();\n    const [returnAlpha, setReturnAlpha] = useState(0);\n\n    const [isCustomRate, setIsCustomRate] = useState(false);\n    const [customExRate, setCustomExRate] = useState('');\n\n    const [isLoading, setIsLoading] = useState<{ loading: boolean; message: string }>({ loading: false, message: '' });\n\n    const tokenLockDurs = useMemo(() => {\n        switch (tokenType) {\n            case 'BTC':\n                return btcDurations;\n            case 'ETH':\n            default:\n                return ethDurations;\n        }\n    }, [tokenType]);\n\n    // initial API setup\n    useEffect(() => {\n        setIsLoading({ loading: true, message: 'Connecting to Plasm Network' });\n        (async () => {\n            const api = await plasmUtils.createPlasmInstance(plasmUtils.PlasmNetwork.Main);\n            setPlasmApi(api);\n\n            const networkAlpha = await plasmUtils.getLockdropAlpha(api);\n            setReturnAlpha(networkAlpha);\n            const rate = await plasmUtils.getCoinRate(api);\n            setTokenExRate(rate);\n        })().finally(() => {\n            setIsLoading({ loading: false, message: '' });\n        });\n        return () => {\n            plasmApi && plasmApi.disconnect();\n        };\n        // eslint-disable-next-line\n    }, []);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            if (plasmApi) {\n                try {\n                    const rates = await plasmUtils.getCoinRate(plasmApi);\n                    setTokenExRate(rates);\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const calculatePlm = useCallback(() => {\n        // formula is `alpha * token * USD rate * bonus rate`\n        try {\n            if (typeof lockDuration === 'undefined') throw new Error('No lock duration selected');\n            // check if user toggled custom rate\n            const _exRate = isCustomRate\n                ? parseInt(customExRate) // use user provided token\n                : tokenType === 'BTC' // or use exchange rate for each token\n                ? tokenExRate[0]\n                : tokenExRate[1];\n            const _lockVal = new BigNumber(tokenAmount).times(new BigNumber(_exRate));\n            const total = _lockVal.times(new BigNumber(returnAlpha)).times(new BigNumber(lockDuration));\n            if (total.isNaN()) throw new Error('Invalid value in the calculation');\n            return parseFloat(total.toFixed()).toLocaleString('en');\n        } catch (e) {\n            return '0';\n        }\n    }, [tokenType, tokenExRate, lockDuration, returnAlpha, tokenAmount, isCustomRate, customExRate]);\n\n    return (\n        <>\n            <IonPage>\n                <Navbar />\n                <IonContent>\n                    <IonLoading isOpen={isLoading.loading} message={isLoading.message} />\n                    <Container maxWidth=\"lg\">\n                        <IonCard>\n                            <IonCardHeader>\n                                <IonCardSubtitle>How much tokens you will get for each price points</IonCardSubtitle>\n                                <IonCardTitle>Lockdrop Reward Calculator</IonCardTitle>\n                            </IonCardHeader>\n\n                            <IonCardContent>\n                                <IonLabel>\n                                    This calculation is based on the current price of each locking tokens. The actual\n                                    lockdrop reward is calculated based on the exchange rate of the moment Plasm Network\n                                    validator nodes confirm your transaction, which is{' '}\n                                    <em>around 1 ~ 2 minutes after you press the claim lockdrop button</em>.\n                                    <Typography align=\"center\">\n                                        Therefore,\n                                        <b>\n                                            the results shown from this page will not reflect the actual number of\n                                            tokens you will receive\n                                        </b>\n                                        .\n                                    </Typography>\n                                </IonLabel>\n\n                                <IonList>\n                                    <IonItemDivider color=\"primary\">Token Information</IonItemDivider>\n                                    <IonLabel>Plasm Network alpha value: {returnAlpha.toString()}</IonLabel>\n                                    <IonItem>\n                                        <IonLabel>\n                                            <p>{tokenExRate[0].toString()} USD per 1 BTC</p>\n                                            <p>{tokenExRate[1].toString()} USD per 1 ETH</p>\n                                        </IonLabel>\n                                    </IonItem>\n                                    <IonItem>\n                                        <IonLabel>Toggle custom exchange rate</IonLabel>\n                                        <IonToggle\n                                            checked={isCustomRate}\n                                            onIonChange={e => setIsCustomRate(e.detail.checked)}\n                                        />\n                                    </IonItem>\n                                    <IonItem>\n                                        {isCustomRate ? (\n                                            <>\n                                                <IonLabel>Input token exchange rate (USD)</IonLabel>\n                                                <IonInput\n                                                    placeholder={'ex: 341'}\n                                                    onIonChange={e => {\n                                                        const _input = e.detail.value;\n                                                        if (_input && isFinite(parseFloat(_input))) {\n                                                            setCustomExRate(_input);\n                                                        }\n                                                    }}\n                                                    value={customExRate}\n                                                ></IonInput>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <IonLabel>Locking Token Type</IonLabel>\n                                                <IonSelect\n                                                    value={tokenType}\n                                                    placeholder=\"Choose One\"\n                                                    onIonChange={e => {\n                                                        e.detail.value && setTokenType(e.detail.value);\n                                                    }}\n                                                >\n                                                    <IonSelectOption value=\"BTC\">BTC</IonSelectOption>\n                                                    <IonSelectOption value=\"ETH\">ETH</IonSelectOption>\n                                                </IonSelect>\n                                            </>\n                                        )}\n                                    </IonItem>\n\n                                    <IonItemDivider color=\"primary\">Lockdrop data</IonItemDivider>\n\n                                    <IonItem>\n                                        <IonLabel position=\"floating\">Number of {tokenType} locking</IonLabel>\n                                        <IonInput\n                                            placeholder={'ex: 0.64646 ' + tokenType}\n                                            onIonChange={e => {\n                                                const _input = e.detail.value;\n                                                if (_input && isFinite(parseFloat(_input))) {\n                                                    setTokenAmount(_input);\n                                                }\n                                            }}\n                                            value={tokenAmount}\n                                        ></IonInput>\n                                    </IonItem>\n                                    <IonLabel>Lock Duration</IonLabel>\n                                    <IonItem>\n                                        <IonLabel>Locking for</IonLabel>\n                                        <IonSelect\n                                            value={lockDuration}\n                                            onIonChange={e => {\n                                                setLockDuration(e.detail.value);\n                                            }}\n                                        >\n                                            {tokenLockDurs.map(dat => {\n                                                return (\n                                                    <IonSelectOption key={dat.value} value={dat.rate}>\n                                                        {dat.label}\n                                                    </IonSelectOption>\n                                                );\n                                            })}\n                                        </IonSelect>\n                                        <IonChip>\n                                            <IonLabel>\n                                                {lockDuration !== 0\n                                                    ? 'The rate is ' + lockDuration + 'x'\n                                                    : 'Please choose the duration'}\n                                            </IonLabel>\n                                        </IonChip>\n                                    </IonItem>\n                                </IonList>\n                            </IonCardContent>\n                            <IonCard>\n                                <IonCardHeader>\n                                    <IonCardSubtitle>PLM token calculation</IonCardSubtitle>\n                                    <IonCardTitle>Expected return</IonCardTitle>\n                                </IonCardHeader>\n                                <IonCardContent>\n                                    <IonLabel>\n                                        Lockdrop reward formula:\n                                        <Typography variant=\"h3\" component=\"h4\" align=\"center\">\n                                            alpha * tokens locked * 1 {tokenType} to USD * duration bonus\n                                        </Typography>\n                                    </IonLabel>\n                                    <IonLabel color=\"primary\">\n                                        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n                                            You return is estimated to be: {calculatePlm()} PLM\n                                        </Typography>\n                                    </IonLabel>\n                                </IonCardContent>\n                            </IonCard>\n                        </IonCard>\n                    </Container>\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        </>\n    );\n};\n\nexport default LockdropCalcPage;\n","import { IonLabel, IonButton, IonItem, IonInput, IonCard, IonCardContent, IonChip, IonImg } from '@ionic/react';\nimport React, { useState } from 'react';\nimport { LockInput, OptionItem } from '../../types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport { DropdownOption } from '../DropdownOption';\nimport Container from '@material-ui/core/Container';\nimport { Typography, Link } from '@material-ui/core';\nimport quantstampLogo from '../../resources/quantstamp-logo.png';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { ethDurations, ethDustyDurations } from '../../data/lockInfo';\n\ntype InputProps = {\n    onSubmit: (inputs: LockInput) => void;\n    dusty?: boolean;\n};\n// the main component function\nconst LockdropForm = ({ onSubmit, dusty }: InputProps) => {\n    // states used in this component\n    const [lockAmount, setAmount] = useState('');\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [affAccount, setAff] = useState('');\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            formRoot: {\n                padding: theme.spacing(4, 3, 0),\n            },\n            formLabel: {\n                margin: theme.spacing(2),\n            },\n            quantLogo: {\n                marginRight: theme.spacing(2),\n                maxHeight: '100%',\n                height: 30,\n                verticalAlign: 'middle',\n            },\n            textBox: {\n                marginLeft: 'auto',\n                marginRight: 'auto',\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    // the submit button function\n    function handleSubmit() {\n        const inputs: LockInput = {\n            duration: lockDuration.value,\n            amount: lockAmount,\n            affiliation: affAccount,\n            rate: lockDuration.rate,\n        };\n        onSubmit(inputs);\n    }\n\n    // main render JSX\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.formRoot}>\n                    <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                        {dusty ? 'Dusty Plasm' : 'Plasm Main'} Network Ethereum Lockdrop\n                    </Typography>\n                    <div>\n                        <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                            Audited by\n                        </Typography>\n                        <Link\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <IonImg src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                        </Link>\n                    </div>\n\n                    <IonCard className={classes.textBox}>\n                        <IonCardContent>\n                            This is the lockdrop form for Ethereum. This uses Web3 injection so you must access this\n                            page with a dApp browser or extension installed in order for this to work properly. If you\n                            find any errors or find issues with this form, please contact the Plasm team. Regarding the\n                            audit by Quantstamp, click{' '}\n                            <a\n                                color=\"inherit\"\n                                href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                here\n                            </a>{' '}\n                            for more details\n                        </IonCardContent>\n                    </IonCard>\n\n                    <IonItem>\n                        <IonLabel position=\"floating\">Number of ETH</IonLabel>\n                        <IonInput\n                            placeholder={'ex: 0.64646 ETH'}\n                            onIonChange={e => e.detail.value && setAmount(e.detail.value)}\n                        ></IonInput>\n                    </IonItem>\n                    <IonLabel className={classes.formLabel}>Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={dusty ? ethDustyDurations : ethDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                const durationSet = dusty ? ethDustyDurations : ethDurations;\n                                setDuration(\n                                    durationSet.filter(i => i.value === ((e.target.value as unknown) as number))[0],\n                                );\n                            }}\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>\n                                If you have a friend who is also participating in the lockdrop and is part of our\n                                affiliation program, please input the address. Both parties will be able to receive a\n                                bonus rate of 1% of what the friend is receiving. Checkout this{' '}\n                                <a href=\"https://medium.com/stake-technologies/lockdrop-with-friends-the-plasm-network-affiliation-program-b385c1cd800d\">\n                                    article\n                                </a>{' '}\n                                for details.\n                            </IonCardContent>\n                        </IonCard>\n                        <IonLabel position=\"floating\">Affiliation (optional)</IonLabel>\n\n                        <IonInput\n                            placeholder={'ex: 0x324632...'}\n                            onIonInput={e => setAff((e.target as HTMLInputElement).value)}\n                        ></IonInput>\n                    </IonItem>\n                    <Container>\n                        <IonButton expand=\"block\" onClick={() => handleSubmit()}>\n                            Submit Transaction\n                        </IonButton>\n                    </Container>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockdropForm;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport * as btcLockdrop from '../helpers/lockdrop/BitcoinLockdrop';\nimport * as polkadotUtils from '@polkadot/util';\nimport * as polkadotCrypto from '@polkadot/util-crypto';\nimport { Claim, Lockdrop } from 'src/types/LockdropModels';\nimport {\n    List,\n    makeStyles,\n    createStyles,\n    ListSubheader,\n    Divider,\n    ListItem,\n    Typography,\n    ListItemText,\n    ListItemIcon,\n    Icon,\n    ListItemSecondaryAction,\n    IconButton,\n    CircularProgress,\n} from '@material-ui/core';\nimport plasmIcon from '../resources/plasm-icon.svg';\nimport dustyIcon from '../resources/dusty-icon.svg';\nimport Web3Utils from 'web3-utils';\nimport SendIcon from '@material-ui/icons/Send';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { green } from '@material-ui/core/colors';\nimport BigNumber from 'bignumber.js';\nimport Badge from '@material-ui/core/Badge';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport {\n    IonPopover,\n    IonList,\n    IonItem,\n    IonListHeader,\n    IonLabel,\n    IonAlert,\n    IonModal,\n    IonButton,\n    IonHeader,\n    IonToolbar,\n    IonContent,\n    IonTitle,\n    IonInput,\n} from '@ionic/react';\nimport { toast } from 'react-toastify';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CopyMessageBox from './CopyMessageBox';\n\ninterface Props {\n    claimParams: Lockdrop[];\n    plasmApi: ApiPromise;\n    networkType: 'ETH' | 'BTC';\n    plasmNetwork: 'Plasm' | 'Dusty';\n    publicKey: string;\n    // getLockerSig must return a hex string of the signature\n    getLockerSig: (id: Uint8Array, sendToAddr: string) => Promise<string> | string;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            height: 360,\n            //minHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        inline: {\n            display: 'inline',\n        },\n        iconProgress: {\n            color: green[500],\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            zIndex: 1,\n        },\n        emptyPanel: {\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: 'auto',\n            padding: theme.spacing(3, 0),\n        },\n        claimVoteIcon: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\nconst truncateString = (str: string, num: number) => {\n    if (str.length <= num) {\n        return str;\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...';\n};\n\nconst epochToDays = (epoch: number) => {\n    const epochDays = 60 * 60 * 24;\n    return epoch / epochDays;\n};\n\nconst loadAddrCache = () => {\n    const _cache = localStorage.getItem('plasm-addr');\n    if (_cache === null) {\n        return undefined;\n    }\n    // check if the cached address is valid\n    const addrCheck = polkadotCrypto.checkAddress(_cache, 5);\n    if (!addrCheck[0]) {\n        return undefined;\n    }\n    return _cache;\n};\n\nconst ClaimStatus: React.FC<Props> = ({\n    claimParams,\n    plasmApi,\n    plasmNetwork = 'Plasm',\n    networkType,\n    publicKey,\n    getLockerSig,\n}) => {\n    const classes = useStyles();\n\n    const defaultAddr = useMemo(() => {\n        return plasmUtils.generatePlmAddress(publicKey);\n    }, [publicKey]);\n\n    // global lockdrop claim requirements\n    const [positiveVotes, setPositiveVotes] = useState(0);\n    const [voteThreshold, setVoteThreshold] = useState(0);\n\n    const [isLoadingBal, setLoadingBal] = useState(true);\n    const [isLoadingClaims, setLoadingClaims] = useState(true);\n    // open edit mode if no valid address was saved\n    const [addrEditMode, setAddrEditMode] = useState(typeof loadAddrCache() === 'undefined');\n\n    // the address where PLMs will be sent\n    const [plasmAddr, setPlasmAddr] = useState(loadAddrCache() || defaultAddr);\n    // a temporary address the user will set\n    const [customClaimAddr, setCustomClaimAddr] = useState<string>();\n    const [balance, setBalance] = useState('');\n\n    const [claims, setClaims] = useState<(Claim | undefined)[]>([]);\n\n    const fetchLockData = useCallback(async () => {\n        // create claims IDs from all the lock parameters\n        const claimIds = claimParams.map(c => {\n            // get claim ID of current parameter\n            return plasmUtils.createLockParam(\n                c.type,\n                c.transactionHash.toHex(),\n                c.publicKey.toHex(),\n                c.duration.toString(),\n                c.value.toString(),\n            ).hash;\n        });\n\n        const lockdropStates = claimIds.map(async id => {\n            // parse plasm node to check claim status\n            const claimRes = await plasmUtils.getClaimStatus(plasmApi, id);\n            return claimRes;\n        });\n\n        const _claims = await Promise.all(lockdropStates);\n\n        setClaims(_claims);\n    }, [claimParams, plasmApi]);\n\n    // initial plasm address balance fetch\n    useEffect(() => {\n        (async () => {\n            const _bal = (await plasmUtils.getAddressBalance(plasmApi, plasmAddr, true)).toFixed(3);\n            const formatBal = parseFloat(_bal).toLocaleString('en');\n            setBalance(formatBal);\n        })();\n    }, [plasmApi, plasmAddr]);\n\n    // store plasm address to local storage every time things changes\n    useEffect(() => {\n        const addrCheck = polkadotCrypto.checkAddress(plasmAddr, 5);\n        // only save it locally if it is a valid address\n        if (addrCheck[0]) {\n            localStorage.setItem('plasm-addr', plasmAddr);\n        }\n    }, [plasmAddr]);\n\n    // fetch address balance periodically\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            const _bal = (await plasmUtils.getAddressBalance(plasmApi, plasmAddr, true)).toFixed(3);\n            const formatBal = parseFloat(_bal).toLocaleString('en');\n            const _voteReq = await plasmUtils.getLockdropVoteRequirements(plasmApi);\n            setBalance(formatBal);\n            setPositiveVotes(_voteReq.positiveVotes);\n            setVoteThreshold(_voteReq.voteThreshold);\n\n            await fetchLockData();\n            setLoadingClaims(false);\n\n            isLoadingBal && setLoadingBal(false);\n        }, 15 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const handleEditAddress = () => {\n        try {\n            if (addrEditMode) {\n                // if clicked finished edit\n\n                if (!customClaimAddr) {\n                    throw new Error('No Plasm Network address given');\n                }\n\n                const addrCheck = polkadotCrypto.checkAddress(customClaimAddr, 5);\n                if (!addrCheck[0]) {\n                    //setAddrEditMode(false);\n                    throw new Error('Plasm address check error: ' + addrCheck[1]);\n                }\n\n                setPlasmAddr(customClaimAddr);\n                setAddrEditMode(false);\n            } else {\n                // if clicked edit\n                setAddrEditMode(true);\n                // allow user to edit the address field and hide the claim list to prevent them from claiming\n            }\n        } catch (e) {\n            console.log(e);\n            toast.error(e.message);\n        }\n    };\n\n    return (\n        <div>\n            <IonModal isOpen={addrEditMode} onDidDismiss={() => setAddrEditMode(false)}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Token Claim Address</IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n\n                <IonContent>\n                    <IonList>\n                        <IonItem>\n                            <IonLabel className=\"ion-text-wrap\">\n                                This will set the Plasm Network address that will receive the lockdrop rewards when\n                                claimed. You can always change this later. For more information, please consider reading{' '}\n                                <a\n                                    href=\"https://medium.com/stake-technologies/lockdrop-the-hitchhikers-guide-to-plasm-network-token-distribution-38299e14d5d4\"\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    this\n                                </a>{' '}\n                                article\n                            </IonLabel>\n                        </IonItem>\n                        <IonItem>\n                            <IonLabel position=\"stacked\">Enter Plasm Address</IonLabel>\n                            <IonInput\n                                value={customClaimAddr}\n                                placeholder={defaultAddr}\n                                onIonChange={e => setCustomClaimAddr(e.detail.value || undefined)}\n                                clearInput\n                            ></IonInput>\n                        </IonItem>\n                        <IonItem>\n                            <IonLabel className=\"ion-text-wrap\">Your default Plasm Network address:</IonLabel>\n                        </IonItem>\n                        <IonItem>\n                            <CopyMessageBox message={defaultAddr} isCode />\n                        </IonItem>\n                        <IonItem>\n                            <IonButton\n                                href=\"https://apps.plasmnet.io/#/accounts\"\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                                slot=\"start\"\n                            >\n                                Create a new account\n                            </IonButton>\n                            <IonButton\n                                onClick={handleEditAddress}\n                                disabled={isLoadingBal || isLoadingClaims || !customClaimAddr}\n                                slot=\"end\"\n                            >\n                                Set account\n                            </IonButton>\n                        </IonItem>\n                    </IonList>\n                </IonContent>\n            </IonModal>\n            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                Sending to {plasmAddr}\n                <IconButton\n                    aria-label=\"finish\"\n                    color=\"primary\"\n                    onClick={handleEditAddress}\n                    disabled={isLoadingBal || isLoadingClaims}\n                >\n                    <EditIcon fontSize=\"inherit\" />\n                </IconButton>\n            </Typography>\n\n            {balance && !addrEditMode && (\n                <Typography variant=\"body1\" component=\"p\" align=\"center\">\n                    Has balance of {balance + ' '}\n                    {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                </Typography>\n            )}\n\n            <List className={classes.listRoot} subheader={<li />}>\n                <li className={classes.listSection}>\n                    <ul className={classes.ul}>\n                        {isLoadingBal || isLoadingClaims || addrEditMode ? (\n                            <div className={classes.emptyPanel}>\n                                <CircularProgress />\n                            </div>\n                        ) : claimParams.length > 0 ? (\n                            <>\n                                <ListSubheader>You can claim {claimParams.length} locks</ListSubheader>\n                                <Divider />\n\n                                {claimParams.map((e, i) => (\n                                    <div key={e.transactionHash.toHex()}>\n                                        <ClaimItem\n                                            lockParam={e}\n                                            plasmApi={plasmApi}\n                                            plasmNetwork={plasmNetwork}\n                                            networkType={networkType}\n                                            positiveVotes={positiveVotes}\n                                            voteThreshold={voteThreshold}\n                                            claimData={claims[i]}\n                                            getLockerSig={getLockerSig}\n                                            claimRecipientAddress={plasmAddr}\n                                        />\n                                    </div>\n                                ))}\n                            </>\n                        ) : (\n                            <>\n                                <ListSubheader>You don&apos;t have any locks!</ListSubheader>\n                                <Divider />\n                                <div className={classes.emptyPanel}>\n                                    <Typography>Why does the feeling of emptiness occupy so much space?</Typography>\n                                    <Typography>-James de la Vega-</Typography>\n                                </div>\n                            </>\n                        )}\n                    </ul>\n                </li>\n            </List>\n        </div>\n    );\n};\n\nexport default ClaimStatus;\n\ninterface ItemProps {\n    lockParam: Lockdrop;\n    plasmApi: ApiPromise;\n    plasmNetwork: 'Plasm' | 'Dusty';\n    networkType: 'BTC' | 'ETH';\n    positiveVotes: number;\n    voteThreshold: number;\n    getLockerSig: (id: Uint8Array, sendToAddr: string) => Promise<string> | string;\n    claimRecipientAddress: string;\n    claimData?: Claim;\n}\n\nconst ClaimItem: React.FC<ItemProps> = ({\n    lockParam,\n    plasmApi,\n    plasmNetwork,\n    networkType,\n    positiveVotes,\n    voteThreshold,\n    getLockerSig,\n    claimRecipientAddress,\n    claimData,\n}) => {\n    const classes = useStyles();\n\n    const claimId = useMemo(() => {\n        return plasmUtils.createLockParam(\n            lockParam.type,\n            lockParam.transactionHash.toHex(),\n            lockParam.publicKey.toHex(),\n            lockParam.duration.toString(),\n            lockParam.value.toString(),\n        ).hash;\n    }, [lockParam]);\n\n    // plasmLockdrop.request()\n    const [sendingRequest, setSendingRequest] = useState(false);\n    // plasmLockdrop.claim()\n    const [claimingLock, setClaimingLock] = useState(false);\n    const [approveList, setApproveList] = useState<string[]>([]);\n    const [declineList, setDeclineList] = useState<string[]>([]);\n\n    // for popup modals\n    const [showApproves, setShowApproves] = useState(false);\n    const [showDeclines, setShowDeclines] = useState(false);\n\n    const [claimConfirm, setClaimConfirm] = useState(false);\n\n    const setVoteList = (_claim: Claim) => {\n        const approves = _claim.approve.toJSON() as string[];\n        setApproveList(approves);\n        const decline = _claim.decline.toJSON() as string[];\n        setDeclineList(decline);\n    };\n\n    const hasAllVotes = useMemo(() => {\n        return approveList.length + declineList.length >= voteThreshold;\n    }, [approveList, declineList, voteThreshold]);\n\n    const reqAccepted = useMemo(() => {\n        return approveList.length - declineList.length >= positiveVotes;\n    }, [approveList, declineList, positiveVotes]);\n\n    const receivingPlm = useMemo(() => {\n        if (typeof claimData === 'undefined') return '0';\n\n        return plasmUtils.femtoToPlm(new BigNumber(claimData.amount.toString())).toFixed();\n    }, [claimData]);\n\n    const plasmDefaultAddress = useMemo(() => {\n        return plasmUtils.generatePlmAddress(lockParam.publicKey.toHex());\n    }, [lockParam]);\n\n    /**\n     * sends a lockdrop claim request to the plasm node by the given lockdrop parameter\n     * @param param lockdrop parameter data\n     */\n    const submitClaimReq = (param: Lockdrop) => {\n        setSendingRequest(true);\n        claimData = undefined;\n        const _lock = plasmUtils.createLockParam(\n            param.type,\n            param.transactionHash.toHex(),\n            param.publicKey.toHex(),\n            param.duration.toString(),\n            param.value.toString(),\n        );\n        const _nonce = plasmUtils.claimPowNonce(_lock.hash);\n        // send lockdrop claim request\n        plasmUtils // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .sendLockClaimRequest(plasmApi, _lock as any, _nonce)\n            .then(res => {\n                console.log('Claim ID: ' + _lock.hash + '\\nRequest transaction hash:\\n' + res.toHex());\n            })\n            .catch(e => {\n                toast.error(e);\n                console.log(e);\n            });\n    };\n\n    /**\n     * requests the plasm node to send the lockdrop rewards to the locker's address\n     * @param id lockdrop claim ID\n     */\n    const submitTokenClaim = async (id: Uint8Array) => {\n        try {\n            if (hasAllVotes && reqAccepted && claimData && !claimData.complete.valueOf()) {\n                // show loading circle\n                setClaimingLock(true);\n                let txHash: string;\n\n                if (!!claimRecipientAddress && claimRecipientAddress !== plasmDefaultAddress) {\n                    console.log('using claim_to function');\n                    // hex string signature\n                    const _sig = await getLockerSig(id, claimRecipientAddress);\n\n                    // send claim_to() transaction\n                    txHash = (\n                        await plasmUtils.claimTo(plasmApi, id, claimRecipientAddress, polkadotUtils.hexToU8a(_sig))\n                    ).toHex();\n                } else {\n                    console.log('using claim function');\n                    txHash = (await plasmUtils.sendLockdropClaim(plasmApi, id)).toHex();\n                }\n                console.log('Token claim transaction hash:\\n' + txHash);\n            } else {\n                throw new Error('Claim requirement was not met');\n            }\n        } catch (e) {\n            console.log(e);\n            toast.error(e.message);\n        }\n    };\n\n    // initial set claim status\n    useEffect(() => {\n        // turn off loading if it's on\n        if (claimData) {\n            setVoteList(claimData);\n\n            // turn off loading if it's on\n            if (sendingRequest) setSendingRequest(false);\n            if (claimData.complete.valueOf() && claimingLock) setClaimingLock(false);\n        }\n    }, [claimData, claimingLock, sendingRequest]);\n\n    const ActionIcon = () => {\n        if (claimData && !hasAllVotes) {\n            return <HourglassEmptyIcon />;\n        } else if (claimData === undefined) {\n            return <SendIcon />;\n        } else if (claimData && !reqAccepted) {\n            return <ReplayIcon />;\n        }\n        return <CheckIcon />;\n    };\n\n    return (\n        <>\n            <IonAlert\n                isOpen={claimConfirm}\n                onDidDismiss={() => setClaimConfirm(false)}\n                translucent\n                header={'Confirm Rewards'}\n                subHeader={'Real-time lockdrop claim'}\n                message={`Sending claim rewards of ${receivingPlm} ${plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}.\n                    to ${polkadotCrypto.encodeAddress(claimRecipientAddress, 5)}.\n                    Please confirm`}\n                buttons={[\n                    {\n                        text: 'Cancel',\n                        role: 'cancel',\n                        cssClass: 'secondary',\n                        handler: () => {\n                            setClaimConfirm(false);\n                        },\n                    },\n                    {\n                        text: 'Claim',\n                        role: 'confirm',\n                        handler: () => {\n                            submitTokenClaim(claimId);\n                        },\n                    },\n                ]}\n            />\n            <IonPopover isOpen={showApproves} onDidDismiss={() => setShowApproves(false)}>\n                <IonList>\n                    <IonListHeader>Claim Approvals</IonListHeader>\n                    {approveList.length > 0 ? (\n                        approveList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Approvals</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <IonPopover isOpen={showDeclines} onDidDismiss={() => setShowDeclines(false)}>\n                <IonList>\n                    <IonListHeader>Claim Declines</IonListHeader>\n                    {declineList.length > 0 ? (\n                        declineList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Declines</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>\n                        {plasmNetwork === 'Plasm' ? <img src={plasmIcon} alt=\"\" /> : <img src={dustyIcon} alt=\"\" />}\n                    </Icon>\n                </ListItemIcon>\n                <ListItemText>\n                    <Typography component=\"h4\" variant=\"h5\" color=\"textPrimary\">\n                        Transaction Hash: {truncateString(lockParam.transactionHash.toHex(), 6)}\n                    </Typography>\n                    <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                        Locked{' '}\n                        {networkType === 'ETH'\n                            ? `${Web3Utils.fromWei(lockParam.value.toString(), 'ether')} ETH `\n                            : `${btcLockdrop.satoshiToBitcoin(lockParam.value.toString())} BTC `}\n                        for {epochToDays(lockParam.duration.toNumber()).toString()} days\n                    </Typography>\n\n                    {claimData && (\n                        <>\n                            <br />\n                            <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                                Receiving {receivingPlm} {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                            </Typography>\n                        </>\n                    )}\n\n                    <br />\n                    <Typography component=\"p\" variant=\"body2\" className={classes.inline} color=\"textPrimary\">\n                        Claim ID: {claimId.toHex()}\n                    </Typography>\n                    <br />\n                    <Typography\n                        component=\"p\"\n                        variant=\"body2\"\n                        className={classes.inline}\n                        color={claimData ? 'primary' : 'error'}\n                    >\n                        {claimData\n                            ? claimData.complete.valueOf()\n                                ? 'Claimed Lockdrop'\n                                : 'Claim requested (not claimed)'\n                            : 'Claim not requested'}\n                    </Typography>\n                    {claimData && (\n                        <>\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowApproves(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={approveList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbUpIcon />\n                                </Badge>\n                            </IconButton>\n\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowDeclines(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={declineList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbDownIcon />\n                                </Badge>\n                            </IconButton>\n                        </>\n                    )}\n                </ListItemText>\n\n                <ListItemSecondaryAction>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"request\"\n                            onClick={() => {\n                                claimData === undefined || !reqAccepted\n                                    ? submitClaimReq(lockParam)\n                                    : setClaimConfirm(true);\n                            }}\n                            color=\"primary\"\n                            disabled={\n                                sendingRequest ||\n                                claimData?.complete.valueOf() ||\n                                claimingLock ||\n                                (claimData && !hasAllVotes)\n                            }\n                        >\n                            <ActionIcon />\n                        </IconButton>\n                        {sendingRequest || claimingLock ? (\n                            <CircularProgress size={24} className={classes.iconProgress} />\n                        ) : null}\n                    </div>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading, IonButton } from '@ionic/react';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport LockdropForm from '../components/EthLock/LockdropForm';\nimport * as ethLockdrop from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockInput, LockEvent } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { removeWeb3Event } from '../helpers/getWeb3';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Container, Divider, makeStyles, createStyles } from '@material-ui/core';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport { ApiPromise } from '@polkadot/api';\nimport * as polkadotCrypto from '@polkadot/util-crypto';\nimport * as polkadotUtil from '@polkadot/util';\nimport ClaimStatus from 'src/components/ClaimStatus';\nimport moment from 'moment';\nimport LockdropCountdownPanel from '../components/EthLock/LockdropCountdownPanel';\nimport { secondLockContract } from '../data/lockInfo';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        addressDropdown: {\n            padding: theme.spacing(0, 3, 0),\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            [theme.breakpoints.up('md')]: {\n                maxWidth: '60%',\n            },\n        },\n    }),\n);\n\ninterface Props {\n    lockdropNetwork: plasmUtils.PlasmNetwork;\n}\n\nconst EthRealTimeLockPage: React.FC<Props> = ({ lockdropNetwork }) => {\n    const classes = useStyles();\n    const now = moment.utc().valueOf();\n\n    /**\n     * returns true if this is lockdrop is for the plasm main net.\n     */\n    const isMainnetLock = lockdropNetwork === plasmUtils.PlasmNetwork.Main;\n\n    // this is used for rendering network names\n    const plasmNetToEthNet = isMainnetLock ? 'Main Network' : 'Ropsten';\n\n    const [web3, setWeb3] = useState<Web3>();\n    const [plasmApi, setPlasmApi] = useState<ApiPromise>();\n    const [account, setAccount] = useState<string>('');\n    const [contract, setContract] = useState<Contract>();\n    const [latestBlock, setLatestBlock] = useState(0);\n    // set default testnet contract address\n    const [contractAddress, setContractAddress] = useState(() => {\n        const _mainContract = secondLockContract.find(i => i.type === 'main')?.address;\n        // always use the last contract as default if it's testnet\n        const _ropContract = secondLockContract.filter(i => i.type === 'ropsten')[1].address;\n\n        const _addr = isMainnetLock ? _mainContract : _ropContract;\n        if (typeof _addr === 'undefined') throw new Error('Could not find the correct contract address');\n\n        return _addr;\n    });\n\n    const [isLoading, setLoading] = useState<{\n        loading: boolean;\n        message: string;\n    }>({\n        loading: false,\n        message: '',\n    });\n\n    const [currentNetwork, setCurrentNetwork] = useState('');\n    // get lock event list from the local storage if it exists\n    const [allLockEvents, setLockEvents] = useState<LockEvent[]>([]);\n\n    const [publicKey, setPublicKey] = useState<string>();\n\n    const [lockdropStart, setLockdropStart] = useState('0');\n    const [lockdropEnd, setLockdropEnd] = useState('0');\n\n    const isMainnet = (currentNetwork: string) => {\n        return currentNetwork === 'main';\n    };\n\n    // checks if lockdrop is online\n    const isLockdropOpen = useMemo(() => {\n        if (lockdropStart === '0' || lockdropEnd === '0') return false;\n\n        const startsOn = moment.unix(parseInt(lockdropStart)).valueOf();\n        const endsOn = moment.unix(parseInt(lockdropEnd)).valueOf();\n        const started = now > startsOn;\n        const ended = now > endsOn;\n\n        return started && !ended;\n    }, [now, lockdropStart, lockdropEnd]);\n\n    const getAddressArray = useMemo(() => {\n        const _rop = secondLockContract.filter(i => i.type === 'ropsten');\n        const _addr = _rop.map(i => i.address);\n        return _addr;\n    }, []);\n\n    // lockdrop parameter for real-time lockdrop rewards\n    const lockParams = useMemo(() => {\n        if (typeof publicKey === 'undefined' || typeof web3 === 'undefined') return [];\n\n        const myLocks = allLockEvents.filter(lock => {\n            return lock.lockOwner.toLowerCase() === account.toLowerCase();\n        });\n\n        if (myLocks.length > 0) {\n            return plasmUtils.getClaimParamsFromEth(publicKey, myLocks, latestBlock);\n        } else {\n            return [];\n        }\n    }, [allLockEvents, account, publicKey, latestBlock, web3]);\n\n    const handleFetchLockEvents = useCallback(\n        async (contractInst: Contract) => {\n            // only fetch the events if the block number is high\n            if (\n                allLockEvents.length === 0 ||\n                (latestBlock !== 0 && ethLockdrop.getHighestBlockNo(allLockEvents) <= latestBlock)\n            ) {\n                const _allLocks = await ethLockdrop.getAllLockEvents(contractInst);\n                setLockEvents(_allLocks);\n            }\n        },\n        [latestBlock, allLockEvents],\n    );\n\n    // initial API loading\n    useEffect(() => {\n        setLoading({\n            loading: true,\n            message: 'Syncing with Ethereum...',\n        });\n        (async function() {\n            try {\n                const web3Inst = await ethLockdrop.connectWeb3();\n                const _netType = await web3Inst.eth.net.getNetworkType();\n\n                if (isMainnet(_netType) === isMainnetLock) {\n                    // get user account from injected web3\n                    const ethAddr = await ethLockdrop.fetchAllAddresses(web3Inst);\n                    setCurrentNetwork(_netType);\n                    const _latest = await web3Inst.eth.getBlockNumber();\n                    setLatestBlock(_latest);\n\n                    const _contract = await ethLockdrop.createContractInstance(web3Inst, contractAddress);\n\n                    // check contract start and end dates\n                    const _end = await ethLockdrop.getContractEndDate(_contract);\n                    const _start = await ethLockdrop.getContractStartDate(_contract);\n                    setLockdropEnd(_end);\n                    setLockdropStart(_start);\n\n                    await handleFetchLockEvents(_contract);\n\n                    setWeb3(web3Inst);\n                    setContract(_contract);\n                    setAccount(ethAddr[0]);\n                    // connect to plasm node\n                    const plasmNode = await plasmUtils.createPlasmInstance(\n                        isMainnetLock ? plasmUtils.PlasmNetwork.Main : plasmUtils.PlasmNetwork.Dusty,\n                    );\n                    setPlasmApi(plasmNode);\n                } else {\n                    throw new Error('User is not connected to ' + plasmNetToEthNet);\n                }\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            }\n        })().finally(() => {\n            setLoading({ loading: false, message: '' });\n        });\n        return () => {\n            plasmApi && plasmApi.disconnect();\n        };\n        // we disable this because we want this to only call once (on component mount)\n        // eslint-disable-next-line\n    }, []);\n\n    // fetch ethereum block header in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            try {\n                if (web3 && contract) {\n                    const _latest = await web3.eth.getBlockNumber();\n                    if (_latest > latestBlock) {\n                        setLatestBlock(_latest);\n                        await handleFetchLockEvents(contract);\n                    }\n                }\n            } catch (error) {\n                toast.error(error.message);\n                console.log(error);\n            }\n        }, 25 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    // refresh if contract reloads\n    useEffect(() => {\n        if (web3) {\n            setLoading({\n                loading: true,\n                message: 'Connecting to Web3 instance with new contract...',\n            });\n\n            (async function() {\n                // fetch a new contract\n                const _contract = await ethLockdrop.createContractInstance(web3, contractAddress);\n                // fetch new lock events\n                await handleFetchLockEvents(_contract);\n                // check contract start and end dates\n                const _end = await ethLockdrop.getContractEndDate(_contract);\n                const _start = await ethLockdrop.getContractStartDate(_contract);\n                setLockdropEnd(_end);\n                setLockdropStart(_start);\n                setContract(_contract);\n            })()\n                .catch(e => {\n                    console.log(e);\n                    toast.error(e.message);\n                })\n                .finally(() => {\n                    setLoading({ loading: false, message: '' });\n                });\n        }\n        return () => {\n            removeWeb3Event();\n            if (plasmApi && plasmApi.hasSubscriptions) plasmApi.disconnect();\n        };\n        // we disable next line to prevent change on getClaimParams\n        // eslint-disable-next-line\n    }, [contractAddress]);\n\n    /**\n     * called when the user changes MetaMask account\n     */\n    const handleAccountChange = useCallback(() => {\n        const currentAccount = (window as any).ethereum.selectedAddress as string;\n        if (account !== currentAccount) {\n            console.log('user changed account to ' + currentAccount);\n            setAccount(currentAccount);\n        }\n    }, [account]);\n\n    // handle metamask account change event handler\n    useEffect(() => {\n        // checks if account has changed in MetaMask\n        if ((window as any).ethereum.on) {\n            (window as any).ethereum.on('accountsChanged', handleAccountChange);\n        }\n        return () => {\n            (window as any).ethereum.on && (window as any).ethereum.on('disconnect', handleAccountChange);\n        };\n    }, [handleAccountChange]);\n\n    const handleGetPublicKey = useCallback(() => {\n        if (!publicKey && web3) {\n            setLoading({\n                loading: true,\n                message: 'Obtaining user signature...',\n            });\n\n            (async function() {\n                try {\n                    const _pub = await ethLockdrop.getPubKey(\n                        web3,\n                        `Sign this message to submit a lock request.\n                    This action is required for the real-time lockdrop module ${polkadotCrypto.randomAsHex(3)}`,\n                    );\n                    setPublicKey(_pub);\n                } catch (e) {\n                    console.log(e);\n                    toast.error(e.message);\n                }\n            })().finally(() => {\n                setLoading({ loading: false, message: '' });\n            });\n        } else if (typeof web3 === 'undefined') {\n            toast.error('Not connected to Web3');\n        }\n    }, [publicKey, web3]);\n\n    const handleSubmit = useCallback(\n        async (formInputVal: LockInput) => {\n            setLoading({\n                loading: true,\n                message: 'Submitting transaction...',\n            });\n            try {\n                if (typeof web3 === 'undefined') {\n                    throw new Error('Could not find a Web3 instance');\n                }\n                if (typeof contract === 'undefined') {\n                    throw new Error('Could not find a contract instance');\n                }\n                const lockAmount = parseFloat(formInputVal.amount);\n                if (Number.isNaN(lockAmount)) {\n                    throw new Error('Invalid number given');\n                }\n                if (formInputVal.duration <= 0) {\n                    throw new Error('Please choose a lock duration');\n                }\n\n                if (!publicKey) {\n                    const _publicKey = await ethLockdrop.getPubKey(\n                        web3,\n                        `Sign this message to submit a lock request.\n                This action is required for the real-time lockdrop module\n                ${polkadotCrypto.randomAsHex(3)}`,\n                    );\n                    setPublicKey(_publicKey);\n                }\n\n                await ethLockdrop.submitLockTx(formInputVal, account, contract);\n                toast.success(`Successfully locked ${formInputVal.amount} ETH for ${formInputVal.duration} days!`);\n                await handleFetchLockEvents(contract);\n            } catch (e) {\n                toast.error(e.message.toString());\n                console.log(e);\n            } finally {\n                setLoading({ loading: false, message: '' });\n            }\n        },\n        [account, contract, publicKey, web3, handleFetchLockEvents],\n    );\n\n    const getClaimToSig = async (id: Uint8Array, sendAddr?: string) => {\n        if (typeof web3 === 'undefined' || typeof sendAddr === 'undefined') {\n            throw new Error('Could not connect to Web3js');\n        }\n\n        const _claimId = polkadotUtil.u8aToHex(id);\n        const _msg = plasmUtils.claimToMessage(_claimId, sendAddr);\n        return await ethLockdrop.getMessageSignature(web3, _msg, false);\n    };\n\n    return (\n        <IonPage>\n            <Navbar />\n            <IonContent>\n                <IonLoading isOpen={isLoading.loading} message={isLoading.message} />\n                {isMainnet(currentNetwork) !== isMainnetLock ? (\n                    <SectionCard maxWidth=\"lg\">\n                        <Typography variant=\"h2\" component=\"h4\" align=\"center\">\n                            Please access this page with a {plasmNetToEthNet} wallet\n                        </Typography>\n                    </SectionCard>\n                ) : (\n                    <>\n                        <SectionCard maxWidth=\"lg\">\n                            <LockdropCountdownPanel\n                                startTime={moment.unix(parseInt(lockdropStart))}\n                                endTime={moment.unix(parseInt(lockdropEnd))}\n                                lockData={allLockEvents}\n                            />\n                            {!isMainnetLock && (\n                                <>\n                                    <Divider />\n                                    <Typography variant=\"h4\" component=\"h5\" align=\"center\">\n                                        Lockdrop Contract Address\n                                    </Typography>\n                                    <Dropdown\n                                        options={getAddressArray}\n                                        value={contractAddress}\n                                        onChange={e => setContractAddress(e.value)}\n                                        className={classes.addressDropdown}\n                                    />\n                                </>\n                            )}\n                        </SectionCard>\n\n                        {isLockdropOpen && <LockdropForm onSubmit={handleSubmit} dusty={!isMainnetLock} />}\n\n                        <SectionCard maxWidth=\"lg\">\n                            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                Real-time Lockdrop Status\n                            </Typography>\n                            {publicKey && plasmApi ? (\n                                <ClaimStatus\n                                    claimParams={lockParams}\n                                    plasmApi={plasmApi}\n                                    networkType=\"ETH\"\n                                    plasmNetwork={isMainnetLock ? 'Plasm' : 'Dusty'}\n                                    publicKey={publicKey}\n                                    getLockerSig={(id, addr) => getClaimToSig(id, addr)}\n                                />\n                            ) : (\n                                <Container>\n                                    <IonButton expand=\"block\" onClick={handleGetPublicKey}>\n                                        Click to view lock claims\n                                    </IonButton>\n                                </Container>\n                            )}\n                        </SectionCard>\n                        {web3 && (\n                            <LockedEthList\n                                web3={web3}\n                                account={account}\n                                lockData={allLockEvents}\n                                onClickRefresh={\n                                    contract\n                                        ? () => {\n                                              setLoading({\n                                                  loading: true,\n                                                  message: 'Fetching contract events...',\n                                              });\n                                              return handleFetchLockEvents(contract).finally(() => {\n                                                  setLoading({\n                                                      loading: false,\n                                                      message: '',\n                                                  });\n                                              });\n                                          }\n                                        : undefined\n                                }\n                            />\n                        )}\n                    </>\n                )}\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\nexport default EthRealTimeLockPage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet, IonSplitPane } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport LandingPage from './pages/LandingPage';\nimport FirstEthLockdropPage from './pages/FirstEthLockdropPage';\nimport DustyBtcLockPage from './pages/DustyBtcLockPage';\nimport SideMenu from './components/SideMenu';\nimport LockdropCalcPage from './pages/LockdropCalcPage';\nimport EthRealTimeLockPage from './pages/EthRealTimeLockPage';\nimport * as plasmUtils from './helpers/plasmUtils';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\n\nconst App: React.FC = () => {\n    return (\n        <IonApp>\n            <IonReactHashRouter>\n                <IonSplitPane contentId=\"main\" when=\"lg\">\n                    <SideMenu />\n\n                    <IonRouterOutlet id=\"main\" animated>\n                        <Route exact path=\"/lock-form\" component={LandingPage} />\n                        <Route path=\"/lock-form/first\" component={FirstEthLockdropPage} />\n                        <Route\n                            path=\"/lock-form/second-eth\"\n                            component={(props: any) => (\n                                <EthRealTimeLockPage {...props} lockdropNetwork={plasmUtils.PlasmNetwork.Main} />\n                            )}\n                        />\n                        <Route\n                            path=\"/lock-form/dusty-eth\"\n                            component={(props: any) => (\n                                <EthRealTimeLockPage {...props} lockdropNetwork={plasmUtils.PlasmNetwork.Dusty} />\n                            )}\n                        />\n                        <Route path=\"/lock-form/dusty-btc\" component={DustyBtcLockPage} />\n                        <Route path=\"/utils-calculator\" component={LockdropCalcPage} />\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/lock-form\" />} />\n                    </IonRouterOutlet>\n                </IonSplitPane>\n            </IonReactHashRouter>\n        </IonApp>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable-line  no-use-before-define */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-virtualized/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport { toast } from 'react-toastify';\n\n// define web3 instance as a global variable\ndeclare global {\n    interface Window {\n        web3: Web3;\n        contract: Contract;\n    }\n}\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nwindow.contract = window.contract || {};\nwindow.web3 = window.web3 || {};\n\nlet theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n            'Work Sans',\n            '-apple-system',\n            'BlinkMacSystemFont',\n            'Segoe UI',\n            'Roboto',\n            'Oxygen',\n            'Ubuntu',\n            'Cantarell',\n            'Fira Sans',\n            'Droid Sans',\n            'Helvetica Neue',\n        ].join(','),\n    },\n    palette: {\n        primary: {\n            main: '#4791db',\n            light: '#1976d2',\n            dark: '#115293',\n        },\n    },\n});\n\ntheme = responsiveFontSizes(theme);\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Web3 from 'web3';\n\nasync function web3Listener() {\n    // Modern dapp browsers...\n    if ((window as any).ethereum) {\n        const web3 = new Web3((window as any).ethereum);\n        try {\n            // Request account access if needed\n            //await (window as any).ethereum.enable();\n            await (window as any).ethereum.request({ method: 'eth_requestAccounts' });\n            console.log('Dapp browser detected');\n\n            // Accounts now exposed\n            return web3;\n        } catch (error) {\n            return error;\n        }\n    }\n    // Legacy dapp browsers...\n    else if ((window as any).web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = (window as any).web3;\n        console.log('Injected web3 detected.');\n        return web3;\n    }\n    // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        return web3;\n    }\n}\n\nexport const removeWeb3Event = () => {\n    new Promise((resolve, reject) => {\n        try {\n            window.removeEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // check if the event was already fired\n        if (document.readyState === 'complete') {\n            // reload page to reset the event\n            window.location.reload();\n        }\n\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        try {\n            window.addEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n\nexport default getWeb3;\n","import { Moment } from 'moment';\nimport { u64, u128, U8aFixed, BTreeSet } from '@polkadot/types';\nimport { H256, AuthorityId } from '@polkadot/types/interfaces';\nimport { BigNumber } from 'bignumber.js';\n\n/**\n * lock contract parameter\n */\nexport interface LockInput {\n    duration: number; // in days\n    amount: string; // in ETH\n    affiliation: string; // Ethereum address\n    rate: number;\n}\n\n/**\n * defines the method for creating a BTC transaction\n */\nexport enum BtcWalletType {\n    Trezor,\n    Ledger,\n    Raw,\n    None,\n}\n\nexport interface UnspentTx {\n    value: number;\n    txId: string;\n    vout: number;\n    address?: string;\n    height?: number;\n}\n\nexport interface LockMenu {\n    uri?: string;\n    icon?: string;\n    title: string;\n    startDate: Moment;\n    endDate: Moment;\n    disabled?: boolean;\n}\n\nexport interface TimeFormat {\n    days: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n}\n\nexport enum LockSeason {\n    First,\n    Second,\n    Dusty,\n    Third,\n}\n\n/**\n * The lockdrop lock token type. This is used for the real-time lockdrop module\n */\nexport enum LockdropType {\n    Bitcoin,\n    Ethereum,\n}\n\nexport interface LockEvent {\n    eth: BigNumber; // locked value in wei\n    duration: number; // in Unix epoch seconds\n    lock: string; // lock address\n    introducer: string;\n    blockNo: number;\n    timestamp: number; // in Unix epoch seconds\n    lockOwner: string; // locker's address\n    transactionHash: string;\n}\n\n// option data is the type that is going to be passed to the component\nexport interface OptionData {\n    dataSets: OptionItem[];\n    onChoose: Function;\n}\n\n// option item type is used to provide the data for dropdown items\nexport interface OptionItem {\n    label: string; // the dropdown display label\n    value: number; // dropdown select return value\n    rate: number;\n}\n\n/**\n * used for real-time lockdrop parameter\n * this data is used to communicate with Substrate\n */\nexport interface Lockdrop {\n    type: LockdropType;\n    transactionHash: H256; //H256\n    publicKey: U8aFixed; // [u8; 33]\n    duration: u64; // u64\n    value: u128; // u128\n}\n\nexport interface Claim {\n    params: Lockdrop;\n    approve: BTreeSet<AuthorityId>;\n    decline: BTreeSet<AuthorityId>;\n    amount: u128; // u128\n    complete: boolean;\n}\n\nexport interface HwSigner {\n    publicKey: Buffer;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    network?: any;\n    sign(hash: Buffer, lowR?: boolean): Buffer | Promise<Buffer>;\n    getPublicKey?(): Buffer;\n}\n","module.exports = __webpack_public_path__ + \"static/media/bitcoin_logo.c200e932.svg\";","import BigNumber from 'bignumber.js';\nimport { LockEvent } from './LockdropModels';\n\nexport class PlmDrop {\n    receiver: string;\n    basePlm: BigNumber;\n    introducerAndBonuses: [string, BigNumber][];\n    affiliationRefsBonuses: [string, BigNumber][];\n    locks: LockEvent[];\n\n    constructor(\n        receiver: string,\n        basePlm: BigNumber,\n        introducerAndBonuses: [string, BigNumber][],\n        affiliationRefsBonuses: [string, BigNumber][],\n        locks: LockEvent[],\n    ) {\n        this.receiver = receiver;\n        this.basePlm = basePlm;\n        this.introducerAndBonuses = introducerAndBonuses;\n        this.affiliationRefsBonuses = affiliationRefsBonuses;\n        this.locks = locks;\n    }\n\n    getTotal() {\n        let totalIntroBonuses = new BigNumber(0);\n\n        for (let i = 0; i < this.introducerAndBonuses.length; i++) {\n            totalIntroBonuses = totalIntroBonuses.plus(this.introducerAndBonuses[i][1]);\n        }\n\n        const affBonus = this.calculateAffBonus();\n\n        return this.basePlm\n            .plus(totalIntroBonuses)\n            .plus(affBonus)\n            .toFixed();\n    }\n\n    getTotalPlm() {\n        return new BigNumber(this.getTotal()).toFixed();\n    }\n\n    getAffBonus() {\n        return new BigNumber(this.calculateAffBonus()).toFormat(2);\n    }\n\n    getIntroBonus() {\n        return new BigNumber(this.calculateIntroBonus()).toFormat(2);\n    }\n\n    // calculate the number of PLM you get for being affiliated\n    calculateAffBonus() {\n        return this.affiliationRefsBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n\n    // the number of PLM you get for referencing an affiliate\n    calculateIntroBonus() {\n        return this.introducerAndBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/media/quantstamp-logo.a01ad5b8.png\";","/* eslint-disable @typescript-eslint/camelcase */\nimport BigNumber from 'bignumber.js';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { Hash, H256 } from '@polkadot/types/interfaces';\nimport * as polkadotUtilCrypto from '@polkadot/util-crypto';\nimport * as polkadotUtils from '@polkadot/util';\nimport { u8aConcat } from '@polkadot/util';\nimport { Struct, TypeRegistry, u64, u128, U8aFixed, u8 } from '@polkadot/types';\nimport * as plasmDefinitions from '@plasm/types/interfaces/definitions';\nimport { LockdropType, Claim, Lockdrop, LockEvent } from 'src/types/LockdropModels';\n\n/**\n * Plasm network enum\n */\nexport enum PlasmNetwork {\n    Local,\n    Dusty,\n    Main,\n}\n\n/**\n * converts the plasm network minimum denominator to PLM\n * @param femto minimum token value\n */\nexport function femtoToPlm(femto: BigNumber) {\n    if (femto.isLessThanOrEqualTo(new BigNumber(0))) {\n        return new BigNumber(0);\n    }\n    const plmDenominator = new BigNumber(10).pow(new BigNumber(15));\n    return femto.dividedBy(plmDenominator);\n}\n\n/**\n * a Proof-of-Work function that hashes the lockdrop claim ID and the nonce\n * together to verify the unsigned transaction.\n * this will return the correct nonce in hex string\n * @param claimId the real-time lockdrop claim ID (blake2 hashed lock parameter)\n */\nexport function claimPowNonce(claimId: Uint8Array | H256): Uint8Array {\n    let nonce = polkadotUtilCrypto.randomAsU8a();\n    while (true) {\n        const hash = polkadotUtilCrypto.blake2AsU8a(u8aConcat(claimId, nonce));\n        //console.log('PoW hash: ' + u8aToHex(hash));\n        if (hash[0] > 0) {\n            nonce = polkadotUtilCrypto.randomAsU8a();\n            //console.log('Next nonce: ' + u8aToHex(nonce));\n        } else {\n            return nonce;\n        }\n    }\n}\n\n/**\n * used for adding new polkadot-js api types for communicating with plasm node\n */\nexport const plasmTypeReg = new TypeRegistry();\n\n/**\n * establishes a connection between the client and the plasm node with the given endpoint.\n * this will default to the main net node\n * @param network end point for the client to connect to\n */\nexport async function createPlasmInstance(network?: PlasmNetwork) {\n    let endpoint = '';\n    const types = Object.values(plasmDefinitions).reduce((res, { types }): object => ({ ...res, ...types }), {});\n\n    switch (network) {\n        case PlasmNetwork.Local:\n            endpoint = 'ws://127.0.0.1:9944';\n            break;\n        case PlasmNetwork.Dusty:\n            endpoint = 'wss://rpc.dusty.plasmnet.io/';\n            break;\n        case PlasmNetwork.Main: // main net endpoint will be the default value\n        default:\n            endpoint = 'wss://rpc.plasmnet.io';\n            break;\n    }\n\n    const wsProvider = new WsProvider(endpoint);\n\n    const api = await ApiPromise.create({\n        provider: wsProvider,\n        types: {\n            ...types,\n            // aliases that don't do well as part of interfaces\n            'voting::VoteType': 'VoteType',\n            'voting::TallyType': 'TallyType',\n            // chain-specific overrides\n            Address: 'GenericAddress',\n            Keys: 'SessionKeys4',\n            StakingLedger: 'StakingLedgerTo223',\n            Votes: 'VotesTo230',\n            ReferendumInfo: 'ReferendumInfoTo239',\n        },\n        // override duplicate type name\n        typesAlias: { voting: { Tally: 'VotingTally' } },\n    });\n\n    return await api.isReady;\n}\n\n/**\n * convert the given lock duration in to PLM issue bonus rate\n * @param duration token lock duration\n */\nexport function lockDurationToRate(duration: number) {\n    if (duration < 30) {\n        return 0;\n    } else if (duration < 100) {\n        return 24;\n    } else if (duration < 300) {\n        return 100;\n    } else if (duration < 1000) {\n        return 360;\n    } else {\n        return 1600;\n    }\n}\n\n/**\n * Create a lock parameter object with the given lock information.\n * This is used for the real-time lockdrop module in Plasm for both ETH and BTC locks\n * @param network the lockdrop network type\n * @param transactionHash the lock transaction hash in hex string\n * @param publicKey locker's public key in hex string\n * @param duration lock duration in Unix epoch (seconds)\n * @param value lock value in the minimum denominator (Wei or Satoshi)\n */\nexport function createLockParam(\n    network: LockdropType,\n    transactionHash: string,\n    publicKey: string,\n    duration: string,\n    value: string,\n) {\n    const lockParam = new Struct(\n        plasmTypeReg,\n        {\n            type: u8,\n            transactionHash: 'H256',\n            publicKey: U8aFixed, // [u8; 33]\n            duration: u64,\n            value: u128,\n        },\n        {\n            type: network, // enum is converted to number\n            transactionHash: transactionHash,\n            publicKey: new U8aFixed(plasmTypeReg, publicKey, 264),\n            duration: new u64(plasmTypeReg, duration),\n            value: new u128(plasmTypeReg, value),\n        },\n    );\n\n    return lockParam;\n}\n\n/**\n * signature message that is used for the claim_to() function.\n * sign this message with a ECDSA private key to generate the correct signature.\n * the 0x prefix will be automatically removed\n * @param claimId lockdrop claim ID in hex string\n * @param plasmAddress plasm network public address in ss58 encoding. This is the receiving address\n */\nexport const claimToMessage = (claimId: string, plasmAddress: string) => {\n    const addressHex = polkadotUtils.u8aToHex(polkadotUtilCrypto.decodeAddress(plasmAddress)).replace('0x', '');\n\n    return `I declare to claim lockdrop reward with ID ${claimId.replace('0x', '')} to AccountId ${addressHex}`;\n};\n\n/**\n * sends the unclaimed lockdrop reward to the given plasm address.\n * the signature must derive from the public key that made the lock.\n * @param api plasm network API instance\n * @param claimId lockdrop claim ID hash in raw byte stream\n * @param recipient plasm address in decoded form\n * @param signature hex string without the 0x for the ECDSA signature from the user\n */\nexport async function claimTo(\n    api: ApiPromise,\n    claimId: Uint8Array,\n    recipient: Uint8Array | string,\n    signature: Uint8Array,\n) {\n    const encodedAddr = recipient instanceof Uint8Array ? polkadotUtilCrypto.encodeAddress(recipient) : recipient;\n    const addrCheck = polkadotUtilCrypto.checkAddress(encodedAddr, 5);\n    if (!addrCheck[0]) {\n        throw new Error('Plasm address check error: ' + addrCheck[1]);\n    }\n\n    const claimToTx = api.tx.plasmLockdrop.claimTo(claimId, encodedAddr, signature);\n\n    const txHash = await claimToTx.send();\n\n    return txHash;\n}\n\n/**\n * submits a real-time lockdrop claim request to plasm node and returns the transaction hash.\n * this is a unsigned transaction that is only authenticated by a simple PoW to prevent spamming\n * @param api plasm node api instance (polkadot-js api)\n * @param lockParam lockdrop parameter that contains the lock data\n * @param nonce nonce for PoW authentication with the node\n */\nexport async function sendLockClaimRequest(api: ApiPromise, lockParam: Struct, nonce: Uint8Array): Promise<Hash> {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.request(lockParam.toU8a(), nonce);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * generates a Plasm public address with the given ethereum public key\n * @param ethPubKey an compressed ECDSA public key. With or without the 0x prefix\n */\nexport function generatePlmAddress(publicKey: string) {\n    // converts a given hex string into Uint8Array\n    const toByteArray = (hexString: string) => {\n        const result = [];\n        for (let i = 0; i < hexString.length; i += 2) {\n            result.push(parseInt(hexString.substr(i, 2), 16));\n        }\n        return new Uint8Array(result);\n    };\n\n    // hash to blake2\n    const plasmPubKey = polkadotUtilCrypto.blake2AsU8a(toByteArray(publicKey.replace('0x', '')), 256);\n    // encode address\n    const plasmAddress = polkadotUtilCrypto.encodeAddress(plasmPubKey, 5);\n    return plasmAddress;\n}\n\n/**\n * Fetches the number of free balance for the given address in femto.\n * @param api polkadot-js api instance\n * @param plasmAddress Plasm network address\n * @param asPlm if the output value should be in PLM. Default denominator is in femto\n */\nexport async function getAddressBalance(api: ApiPromise, plasmAddress: string | Uint8Array, asPlm?: boolean) {\n    const encodedAddr =\n        plasmAddress instanceof Uint8Array ? polkadotUtilCrypto.encodeAddress(plasmAddress) : plasmAddress;\n    const addrCheck = polkadotUtilCrypto.checkAddress(encodedAddr, 5);\n    if (!addrCheck[0]) {\n        throw new Error('Plasm address check error: ' + addrCheck[1]);\n    }\n\n    const { data: balance } = await api.query.system.account(plasmAddress);\n    let _bal = new BigNumber(balance.free.toString());\n    if (asPlm) {\n        _bal = femtoToPlm(new BigNumber(balance.free.toString()));\n    }\n    return _bal;\n}\n\n/**\n * Fetches Plasm real-time lockdrop vote threshold and positive vote values.\n * @param api polkadot-js api instance\n */\nexport async function getLockdropVoteRequirements(api: ApiPromise) {\n    // number of minium votes required for a claim request to be accepted\n    const _voteThreshold = Number.parseInt((await api.query.plasmLockdrop.voteThreshold()).toString());\n    // number of outstanding votes (approve votes - decline votes) required for a claim request to be accepted\n    const _positiveVotes = Number.parseInt((await api.query.plasmLockdrop.positiveVotes()).toString());\n\n    return {\n        voteThreshold: _voteThreshold,\n        positiveVotes: _positiveVotes,\n    };\n}\n\n/**\n * sends a lockdrop claim request to Plasm net node. This will fund the ECDSA address.\n * @param api polkadot API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function sendLockdropClaim(api: ApiPromise, claimId: Uint8Array | H256) {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.claim(claimId);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * Plasm network real-time lockdrop claim data query wrapper.\n * This will query the node with the given claim ID and wrap the data to a readable interface.\n * This function will return undefined if the claim data does not exists on the chain.\n * @param api Polkadot-js API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function getClaimStatus(api: ApiPromise, claimId: Uint8Array | H256) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = (await api.query.plasmLockdrop.claims(claimId)) as any;\n\n    // wrap block query data to TypeScript interface\n    const data: Claim = {\n        params: {\n            // we use snake case here because this data is directly parsed from the node\n            type: claim.get('params').get('type'),\n            transactionHash: claim.get('params').get('transaction_hash'),\n            publicKey: claim.get('params').get('public_key'),\n            duration: claim.get('params').get('duration'),\n            value: claim.get('params').get('value'),\n        },\n        approve: claim.get('approve'),\n        decline: claim.get('decline'),\n        amount: claim.get('amount'),\n        complete: claim.get('complete'),\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_key, value] of Object.entries(data.params)) {\n        // check if data exists on chain\n        if (\n            typeof value === 'undefined' ||\n            value.toHex() === '0x000000000000000000000000000000000000000000000000000000000000000000' || // pub key\n            value.toHex() === '0x0000000000000000000000000000000000000000000000000000000000000000' // tx hash\n        ) {\n            return undefined;\n        }\n    }\n\n    return data;\n}\n\nexport async function getLockdropAlpha(api: ApiPromise) {\n    const alpha = await api.query.plasmLockdrop.alpha();\n    // the queried data will always be a whole number, but the calculated data is between 0 ~ 1.\n    // so we need to manually convert them\n    return parseFloat('0.' + alpha.toString());\n}\n\nexport function subscribeCoinRate(api: ApiPromise, subscribeCallback: (rate: [number, number]) => void) {\n    //const rate = ((await api.query.plasmLockdrop.dollarRate()) as unknown) as [number, number];\n    const unsub = api.query.plasmLockdrop.dollarRate(data => {\n        const _rate = (data as unknown) as [number, number];\n        subscribeCallback(_rate);\n    });\n    return unsub;\n}\n\nexport async function getCoinRate(api: ApiPromise) {\n    const rate = ((await api.query.plasmLockdrop.dollarRate()) as unknown) as [number, number];\n    return rate;\n}\n\n/**\n * converts lockdrop parameter into a Lockdrop type\n * @param lockdropParam lockdrop parameter type in polakdot-js structure\n */\nexport function structToLockdrop(lockdropParam: Struct) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = lockdropParam as any;\n    const param: Lockdrop = {\n        type: claim.get('type'),\n        transactionHash: claim.get('transactionHash'),\n        publicKey: claim.get('publicKey'),\n        duration: claim.get('duration'),\n        value: claim.get('value'),\n    };\n\n    return param;\n}\n\nconst durationToEpoch = (duration: number) => {\n    const epochDays = 60 * 60 * 24;\n    return duration * epochDays;\n};\n\n/**\n * converts all lockdrops on ethereum into plasm lockdrop claim parameter\n * @param pubKey the public key of the locker\n * @param locks the lock event that has been parsed from the chain\n * @param latestBlock the current highest ethereum block number\n */\nexport const getClaimParamsFromEth = (pubKey: string, locks: LockEvent[], latestBlock: number) => {\n    if (typeof pubKey === 'undefined' || pubKey === '') {\n        throw new Error('No public key was provided');\n    }\n\n    if (locks.length === 0) {\n        throw new Error('No lock events found');\n    }\n\n    const claimableLocks = locks.filter(i => {\n        // check if the lock as been confirmed for at least 5 blocks\n        const blockPassed = i.blockNo + 5 < latestBlock;\n        return blockPassed;\n    });\n\n    const claimIDs = claimableLocks.map(lock => {\n        const _wei = lock.eth.toFixed();\n        const _param = createLockParam(\n            LockdropType.Ethereum,\n            lock.transactionHash,\n            pubKey,\n            durationToEpoch(lock.duration).toString(),\n            _wei,\n        );\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return structToLockdrop(_param as any);\n    });\n\n    return claimIDs;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// This module is used for communicating with the Ethereum smart contract\nimport Lockdrop from '../../contracts/Lockdrop.json';\nimport getWeb3 from '../getWeb3';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport { LockEvent, LockInput } from '../../types/LockdropModels';\nimport BigNumber from 'bignumber.js';\nimport { isValidIntroducerAddress, defaultAddress, affiliationRate } from '../../data/affiliationProgram';\nimport { lockDurationToRate } from '../plasmUtils';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport Web3Utils from 'web3-utils';\nimport * as ethereumUtils from 'ethereumjs-util';\nimport EthCrypto from 'eth-crypto';\n//import { firstLockContract, secondLockContract } from 'src/data/lockInfo';\n//import _ from 'lodash';\nimport { EtherScanApi } from 'src/types/EtherScanTypes';\n\n/**\n * exchange rate at the start of April 14 UTC (at the end of the first lockdrop)\n * this is only used for the first lockdrop\n */\nexport const ethFinalExRate = 205.56;\n\n// the total amount of issueing PLMs at 1st Lockdrop.\nconst totalAmountOfPLMs = new BigNumber('500000000.000000000000000');\nconst totalAmountOfPLMsForLockdrop = totalAmountOfPLMs.times(new BigNumber('17').div(new BigNumber('20')));\n/**\n * retrieves the ECDSA signature from the given message via Web3js client call.\n * this will either return the v, r, s values, or the full sig in hex string\n * @param web3 web3js api instance\n * @param message message string to sign\n * @param asSigParam return ECDSA sig param if true (i.e. only v, r, s values)\n */\nexport async function getMessageSignature<T extends boolean>(\n    web3: Web3,\n    message: string,\n    asSigParam: T,\n): Promise<T extends true ? ethereumUtils.ECDSASignature : string>;\n\nexport async function getMessageSignature(web3: Web3, message: string, asSigParam: boolean) {\n    const addresses = await web3.eth.getAccounts();\n\n    // ask the user to sign the message\n    // the password parameter is only used for specific wallets (most wallets will prompt the user to provide it)\n    const sig = '0x' + (await web3.eth.personal.sign(message, addresses[0], 'SecureP4ssW0rd')).slice(2);\n\n    const res = ethereumUtils.fromRpcSig(sig);\n    if (!ethereumUtils.isValidSignature(res.v, res.r, res.s)) {\n        throw new Error('Invalid signature');\n    }\n\n    if (asSigParam) {\n        return res;\n    } else {\n        return sig;\n    }\n}\n\n/**\n * Fetches ethereum lock event from the cache server.\n * This is a temporary cache server with not query\n * @param contractAddr contract address that emits the event\n */\nexport const fetchEventsFromCache = async (contractAddr: string) => {\n    const api = `https://cache.plasmnet.io/locks/cache-${contractAddr.slice(0, 6)}.json`;\n\n    const res = await fetch(api);\n\n    const jsonData: any[] = await res.json();\n\n    const evs = jsonData.map(i => {\n        return {\n            eth: new BigNumber(i.eth),\n            duration: i.duration,\n            lock: i.lock,\n            introducer: i.introducer,\n            blockNo: i.blockNo,\n            timestamp: i.timestamp,\n            lockOwner: i.lockOwner,\n            transactionHash: i.transactionHash,\n        } as LockEvent;\n    });\n\n    return evs;\n};\n\n/**\n * finds the highest block number from the given lock event\n * @param lockEvents lock event list\n */\nexport function getHighestBlockNo(lockEvents: LockEvent[]) {\n    const latestBlock = Math.max(\n        ...lockEvents.map(o => {\n            return o.blockNo;\n        }),\n    );\n    return latestBlock;\n}\n\n/**\n * asks the user to sign a hashed message from their dApp browser to recover the user's public key.\n * This will return a compressed public key.\n * @param web3 a web3.js instance to access the user's wallet information\n * @param message an optional message that the user should sign\n */\nexport async function getPubKey(web3: Web3, message?: string) {\n    // default message\n    let msg = 'Please Sign this message to generate Plasm Network address';\n    // change message if the function provides one\n    if (message) {\n        msg = message;\n    }\n    const hash = web3.eth.accounts.hashMessage(msg);\n    const res = (await getMessageSignature(web3, msg, true)) as ethereumUtils.ECDSASignature;\n\n    const publicKey = ethereumUtils.bufferToHex(\n        ethereumUtils.ecrecover(ethereumUtils.toBuffer(hash), res.v, res.r, res.s),\n    );\n    const compressedPubKey = '0x' + EthCrypto.publicKey.compress(publicKey.replace('0x', ''));\n\n    return compressedPubKey;\n}\n\nexport async function fetchAllAddresses(web3: Web3) {\n    let ethAddr: string[];\n    // get user account from injected web3\n    // we try every method here\n    try {\n        ethAddr = await web3.eth.getAccounts();\n    } catch (e) {\n        try {\n            ethAddr = await web3.eth.requestAccounts();\n        } catch (e) {\n            try {\n                ethAddr = [(window as any).ethereum.selectedAddress as string];\n            } catch (e) {\n                throw new Error(e);\n            }\n        }\n    }\n\n    // throw if the address is still 0\n    if (ethAddr.length === 0) throw new Error('Could not fetch address from wallet');\n\n    return ethAddr;\n}\n\n/**\n * serializes ethereum lock event list and encodes them into base64 string\n * @param lockEvents smart contract lock event\n */\nexport function serializeLockEvents(lockEvents: LockEvent[]) {\n    const _ev = JSON.stringify(lockEvents);\n    // encode utf-8 JSON to base 64 string\n    return Buffer.from(_ev).toString('base64');\n}\n\n/**\n * deserialize the base64 string into a lock event list\n * @param lockEvents lock event list in base64 string\n */\nexport function deserializeLockEvents(lockEvents: string) {\n    try {\n        const eventJson = Buffer.from(lockEvents, 'base64').toString('utf-8');\n\n        const parsedData: any[] = JSON.parse(eventJson);\n        const locks = parsedData.map(e => {\n            const dat: LockEvent = {\n                blockNo: e.blockNo,\n                duration: e.duration,\n                eth: new BigNumber(e.eth),\n                introducer: e.introducer,\n                lock: e.lock,\n                lockOwner: e.lockOwner,\n                timestamp: e.timestamp,\n                transactionHash: e.transactionHash,\n            };\n            return dat;\n        });\n\n        return locks;\n    } catch (e) {\n        console.log(e);\n        return [];\n    }\n}\n\n/**\n * fetch contract logs from etherscan. Because there is no API keys, the fetch will be limited to 1 time ever second\n * @param contractAddress lockdrop smart contract address\n * @param fromBlock which block to search from\n * @param toBlock up to what block the API should fetch for\n * @param ropsten pass true to search for ropsten network\n */\nexport async function fetchLockdropEvents(\n    web3: Web3,\n    contractAddress: string,\n    fromBlock: number | 'latest' | 'pending' | 'earliest' | 'genesis' = 'genesis',\n    toBlock: number | 'latest' | 'pending' | 'earliest' | 'genesis' = 'latest',\n    ropsten?: boolean,\n) {\n    function wait(ms: number) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    const networkToken = ropsten ? 'api-ropsten' : 'api';\n    const api = `https://${networkToken}.etherscan.io/api?module=logs&action=getLogs&fromBlock=${fromBlock}&toBlock=${toBlock}&address=${contractAddress}&apikey=YourApiKeyToken`;\n\n    // delay for 3 seconds to prevent IP ban\n    await wait(3000);\n    const res = await (await fetch(api)).text();\n    const logs: EtherScanApi.Response = JSON.parse(res);\n\n    if (logs.status === '0') {\n        throw new Error(logs.message);\n    }\n\n    const lockdropAbiInputs = [\n        {\n            indexed: true,\n            internalType: 'uint256',\n            name: 'eth',\n            type: 'uint256',\n        },\n        {\n            indexed: true,\n            internalType: 'uint256',\n            name: 'duration',\n            type: 'uint256',\n        },\n        {\n            indexed: false,\n            internalType: 'address',\n            name: 'lock',\n            type: 'address',\n        },\n        {\n            indexed: false,\n            internalType: 'address',\n            name: 'introducer',\n            type: 'address',\n        },\n    ];\n\n    const lockEvents = logs.result.map(async event => {\n        const decoded = web3.eth.abi.decodeLog(lockdropAbiInputs, event.data, event.topics);\n        const senderTx = await web3.eth.getTransaction(event.transactionHash);\n\n        //console.log(new BigNumber(senderTx.value));\n\n        const ev = {\n            eth: new BigNumber(senderTx.value),\n            duration: Web3Utils.hexToNumber(event.topics[2]),\n            lock: decoded['lock'],\n            introducer: decoded['introducer'],\n            blockNo: Web3Utils.hexToNumber(event.blockNumber),\n            timestamp: Web3Utils.hexToNumber(event.timeStamp),\n            lockOwner: senderTx.from,\n            transactionHash: event.transactionHash,\n        } as LockEvent;\n        return ev;\n    });\n\n    return Promise.all(lockEvents);\n}\n\n/**\n * returns an array of locked events for the lock contract from the latest event block number.\n * This function will return the full list (i.e. previous events + new events) and handle caching as well\n * @param instance a contract instance to parse the contract events\n */\nexport async function getAllLockEvents(instance: Contract) {\n    const contractAddr = instance.options.address;\n\n    const lockStoreKey = `id:${contractAddr}`;\n\n    const eventCache = localStorage.getItem(lockStoreKey);\n\n    // remove the local cache if it exists\n    if (eventCache) {\n        localStorage.removeItem(lockStoreKey);\n    }\n    const cacheEvents = await fetchEventsFromCache(contractAddr);\n\n    return cacheEvents;\n}\n\n/**\n * returns a 0 ethereum address if an empty string was provided.\n * this function is used for lockers with no introducers\n * @param aff a valid introducer ETH address\n */\nexport function defaultAffiliation(aff: string) {\n    // check if affiliation address is not empty and is not themselves\n    if (aff) {\n        // return itself when it is a valid address\n        return aff;\n    } else {\n        // if it is an invalid address, return the default affiliation address\n        return defaultAddress;\n    }\n}\n\nfunction plmBaseIssueRatio(lockData: LockEvent, ethExchangeRate: BigNumber): BigNumber {\n    // get lockTimeBonus * ethExRate\n    const bonusRate = new BigNumber(lockDurationToRate(lockData.duration)).times(ethExchangeRate);\n\n    // calculate issuingPLMRate = lockedEth([ETH]) * lockBonusRate * ethExRate\n    const issuingRatio = new BigNumber(Web3Utils.fromWei(lockData.eth.toFixed(), 'ether')).times(bonusRate);\n    return issuingRatio;\n}\n\nfunction totalPlmBaseIssuingRate(allLocks: LockEvent[], ethExchangeRate: BigNumber): BigNumber {\n    return allLocks.reduce(\n        (sum: BigNumber, value: LockEvent): BigNumber => sum.plus(plmBaseIssueRatio(value, ethExchangeRate)),\n        new BigNumber(0),\n    );\n}\n\nfunction plmBaseIssueAmountInLock(lock: LockEvent, totalPlmsRate: BigNumber, ethExchangeRate: BigNumber): BigNumber {\n    const currentIssue = plmBaseIssueRatio(lock, ethExchangeRate);\n    return totalAmountOfPLMsForLockdrop.times(currentIssue).div(totalPlmsRate);\n}\n\n/**\n * returns an array of addresses that referenced the given address for the affiliation program\n * @param address ETH address\n * @param lockData list of contract lock event\n */\nfunction getAllAffReferences(address: string, lockData: LockEvent[]) {\n    // check if there is\n    const results: LockEvent[] = [];\n    const refEvents = lockData.filter(e => e.introducer.toLowerCase() === address.toLowerCase());\n\n    for (let i = 0; i < refEvents.length; i++) {\n        results.push(refEvents[i]);\n    }\n\n    return results;\n}\n\nexport function calculateNetworkAlpha(allLocks: LockEvent[]): BigNumber {\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    const totalPlmRate = totalPlmBaseIssuingRate(allLocks, ethExchangeRate);\n\n    // alpha_1 = totalAmountOfPLMsForLockdrop /totalPlmRate\n    const alpha1 = totalAmountOfPLMsForLockdrop.div(totalPlmRate);\n\n    return alpha1;\n}\n\n/**\n * calculate the total receiving PLMs from the lockdrop including the affiliation program bonus\n * in this function, affiliation means the current address being referenced by others\n * and introducer means this address referencing other affiliated addresses\n * @param address the lockdrop participant's ETH address\n * @param lockData a list of lockdrop contract events\n */\nexport function calculateTotalPlm(address: string, lockData: LockEvent[]): PlmDrop {\n    const receivingPlm = new PlmDrop(address, new BigNumber(0), [], [], []);\n\n    const currentAddressLocks = lockData.filter(i => i.lockOwner.toLowerCase() === address.toLowerCase());\n\n    receivingPlm.locks = currentAddressLocks;\n\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    // get total plm rate for calculating actual issuing PLMs.\n    const totalPlmRate = totalPlmBaseIssuingRate(lockData, ethExchangeRate);\n\n    for (let i = 0; i < currentAddressLocks.length; i++) {\n        // calculate total base issuing PLM tokens\n        const issuingPlm = plmBaseIssueAmountInLock(currentAddressLocks[i], totalPlmRate, ethExchangeRate);\n\n        // add value to the total amount\n        receivingPlm.basePlm = receivingPlm.basePlm.plus(issuingPlm);\n\n        // self -> introducer : bonus getting PLMs.\n        // check if this address has an introducer\n        if (\n            isValidIntroducerAddress(currentAddressLocks[i].introducer) &&\n            currentAddressLocks[i].introducer !== defaultAddress\n        ) {\n            receivingPlm.introducerAndBonuses.push([\n                currentAddressLocks[i].introducer,\n                issuingPlm.times(new BigNumber(affiliationRate)),\n            ]);\n        }\n    }\n\n    // someone -> self(introducer) : bonus getting PLMs.\n    // calculate affiliation bonus for this address\n    if (isValidIntroducerAddress(address)) {\n        const allRefs = getAllAffReferences(address, lockData);\n\n        for (let i = 0; i < allRefs.length; i++) {\n            // reference amount * 0.01\n            receivingPlm.affiliationRefsBonuses.push([\n                allRefs[i].lock,\n                plmBaseIssueAmountInLock(allRefs[i], totalPlmRate, ethExchangeRate).times(\n                    new BigNumber(affiliationRate),\n                ),\n            ]);\n        }\n    }\n    return receivingPlm;\n}\n\n/**\n * parses through the given lock events to calculate the total amount of locked ETH\n * @param locks a list of lockdrop contract events\n * @param roundTo\n */\nexport function getTotalLockVal(locks: LockEvent[], roundTo?: number): string {\n    //let totalVal = new BigNumber(0);\n    if (locks.length > 0 && Array.isArray(locks)) {\n        const allVal = locks.map(e => {\n            return e.eth;\n        });\n\n        const totalVal = allVal.reduce((a, b) => a.plus(b), new BigNumber(0));\n\n        const _eth = Web3Utils.fromWei(totalVal.toFixed(), 'ether');\n\n        if (roundTo) return new BigNumber(_eth).toFixed(roundTo, 5);\n        return new BigNumber(_eth).toFixed();\n    }\n    return '0';\n}\n\n/**\n * creates a smart contract instance based on the contract address\n * @param web3 web3js API instance\n * @param contractAddress smart contract address\n */\nexport async function createContractInstance(web3: Web3, contractAddress: string) {\n    const lockdropAbi = Lockdrop.abi as Web3Utils.AbiItem[];\n\n    // create an empty contract instance first\n    return new web3.eth.Contract(lockdropAbi, contractAddress);\n}\n\n/**\n * returns the unlock date of the given ethereum lock event.\n * this will return the unlock date in unix time (seconds)\n * @param lockInfo\n */\nexport const getUnlockDate = (lockInfo: LockEvent) => {\n    // 24 hours in epoch\n    const epochDay = 60 * 60 * 24;\n\n    const lockedDay = lockInfo.timestamp;\n\n    // locked date + lock duration in days to epoch\n    const unlockDate = lockedDay + lockInfo.duration * epochDay;\n\n    return unlockDate;\n};\n\n/**\n * authenticate if the client has web3 enabled wallet installed and can communicate with the blockchain\n * returns the web3.js instance, list of active accounts and the contract instance\n * @param contractAddress the contract address that it should look for\n */\nexport async function connectWeb3() {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n\n    if (web3 instanceof Web3) {\n        return web3;\n    } else {\n        throw new Error('Cannot get Web3 instance from the client');\n    }\n}\n\n/**\n * returns the UTC (in seconds) epoch string of when the lockdrop smart contract will end\n * @param contract the lockdrop contract instance\n */\nexport async function getContractEndDate(contract: Contract) {\n    const _lockdropEndDate = await contract.methods.LOCK_END_TIME().call();\n    return _lockdropEndDate as string;\n}\n\n/**\n * returns the UTC (in seconds) epoch string of when the lockdrop smart contract will start\n * @param contract the lockdrop contract instance\n */\nexport async function getContractStartDate(contract: Contract) {\n    const _lockdropStartDate = await contract.methods.LOCK_START_TIME().call();\n    return _lockdropStartDate as string;\n}\n\n/**\n * validate and create a transaction to the lock contract with the given parameter.\n * This will return the transaction hash\n * @param txInput the lock parameter for the contract\n * @param address the address of the locker\n * @param contract smart contract instance used to invoke the contract method\n */\nexport async function submitLockTx(txInput: LockInput, address: string, contract: Contract) {\n    // return a default address if user input is empty\n    const introducer = defaultAffiliation(txInput.affiliation).toLowerCase();\n    if (Number.parseFloat(txInput.amount) < 0) {\n        throw new Error('Number value must be greater than 0');\n    }\n    // check user input\n    if (introducer === address) {\n        throw new Error('Cannot self introduce');\n    }\n    if (introducer && !Web3.utils.isAddress(introducer)) {\n        throw new Error('Please input a valid Ethereum address');\n    }\n    if (!isValidIntroducerAddress(introducer)) {\n        throw new Error('Please input a valid introducer address.');\n    }\n\n    // convert user input to Wei\n    const amountToSend = Web3.utils.toWei(txInput.amount, 'ether');\n    let hash = '';\n\n    // communicate with the smart contract\n    await contract.methods\n        .lock(txInput.duration, introducer)\n        .send({\n            from: address,\n            value: amountToSend,\n        })\n        .on('transactionHash', (res: any) => {\n            hash = res;\n        });\n\n    if (hash === '') {\n        throw new Error('An error has occurred while trying to send transaction');\n    }\n    return hash;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport bip68 from 'bip68';\nimport { LockdropType, HwSigner } from '../../types/LockdropModels';\nimport { Network } from 'bitcoinjs-lib';\nimport BigNumber from 'bignumber.js';\nimport * as plasmUtils from '../plasmUtils';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport { SoChainApi } from 'src/types/SoChainTypes';\nimport AppBtc from '@ledgerhq/hw-app-btc';\nimport * as LedgerTypes from '../../types/LedgerTypes';\nimport * as bitcoinjsMessage from 'bitcoinjs-message';\n\n// https://www.blockchain.com/api/api_websocket\nexport const BLOCKCHAIN_WS = 'wss://ws.blockchain.info/inv';\n\n/**\n * the message that will be hashed and signed by the client\n */\nexport const MESSAGE = 'plasm network btc lock'; //todo: add nonce for security\n\n/**\n * returns a blob url for the qr encoded bitcoin address\n * @param btcAddress bitcoin address\n */\nexport async function qrEncodeUri(btcAddress: string, size = 300) {\n    const qrCode = URL.createObjectURL(\n        await fetch(`https://chart.googleapis.com/chart?chs=${size}x${size}&cht=qr&chl=${btcAddress}`).then(res =>\n            res.blob(),\n        ),\n    );\n\n    return qrCode;\n}\n\n/**\n * Returns a list of transactions from the given address.\n * This data is fetched from BlockStream\n * @param address BTC address to look for\n * @param network BTC network token (mainnet or testnet)\n */\nexport async function getBtcTxsFromAddress(address: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/address/${address}/txs`;\n    const res = await (await fetch(api)).text();\n    if (res.includes('Invalid Bitcoin address')) {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    const txs: BlockStreamApi.Transaction[] = JSON.parse(res);\n    return txs;\n}\n\n/**\n * Returns the transaction information from the given transaction hash/TXID.\n * This data is fetched from BlockStream\n * @param txid transaction hash or TXID in hex string\n * @param network BTC network token (mainnet or testnet)\n */\nexport async function getBtcTxFromTxId(txid: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/tx/${txid.replace('0x', '')}`;\n    const res = await (await fetch(api)).text();\n    if (res.includes('Invalid hex string')) {\n        throw new Error('Invalid hex string');\n    }\n\n    const tx: BlockStreamApi.Transaction = JSON.parse(res);\n    return tx;\n}\n\n/**\n * returns the transaction information including the inputs and outputs from ledger node API.\n * @param txId bitcoin transaction hash\n * @param isTestnet check if looking for BTC testnet\n */\nexport async function getTransactionEndpoint(txId: string, isTestnet?: boolean) {\n    const network = isTestnet ? 'btc_testnet' : 'btc';\n    const api = `https://api.ledgerwallet.com/blockchain/v2/${network}/transactions/${txId}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('error')) {\n        throw new Error(res);\n    }\n\n    const hashEndpoint: LedgerTypes.Transaction = JSON.parse(res);\n    return hashEndpoint;\n}\n\n/**\n * returns a raw transaction in hex strings from SoChain REST API.\n * @param txId transaction ID or transaction hash\n * @param network BTC network to choose from\n */\nexport async function getTransactionHex(txId: string, network: 'BTC' | 'BTCTEST') {\n    const api = `https://sochain.com/api/v2/get_tx/${network}/${txId}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('fail')) {\n        throw new Error(res);\n    }\n\n    const txHex: SoChainApi.Transaction = JSON.parse(res);\n    return txHex.data.tx_hex;\n}\n\n/**\n * Broadcasts the given transaction hex through BlockStream REST API\n * @param txHex raw transaction in hex string\n * @param network bitcoin network to broadcast for\n */\nexport async function broadcastTransaction(txHex: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/tx`;\n    const res = await fetch(api, {\n        method: 'POST',\n        body: txHex,\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        },\n    });\n    const responseText = await res.text();\n    if (!res.ok || responseText.includes('error')) {\n        throw new Error('Failed to broadcast the transaction:\\n' + responseText);\n    }\n\n    console.log(responseText);\n    // returns a tx ID if everything went well\n    return responseText;\n}\n\n/**\n * Validates the given BTC address by checking if it's in the correct format.\n * The default network is set to mainnet, byt anything else will require you to explicitly\n * pass it as the parameter.\n * @param address Bitcoin public address\n * @param network bitcoin network type (bitcoinjs-lib)\n */\nexport function validateBtcAddress(address: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.address.toOutputScript(address, network);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * Validates the given public key hex by importing it through bitcoinjs ECPair.\n * Returns true if it's valid, and false if it's invalid\n * @param publicKey Bitcoin public key hex string\n * @param network bitcoin network to check from. Defaults to mainnet\n */\nexport function validatePublicKey(publicKey: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), { network: network });\n\n        const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network: network });\n        if (typeof address === 'string' && !validateBtcAddress(address, network)) {\n            throw new Error('Invalid public key');\n        }\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * returns the network type that the given address belongs to.\n * this will also validate the address before returning a value.\n * @param address bitcoin address\n */\nexport function getNetworkFromAddress(address: string) {\n    // sources: https://en.bitcoin.it/wiki/List_of_address_prefixes\n    // main net public key hash prefixes\n    const mainNetPref = ['1', '3', 'bc1'];\n    // test net public key hash prefixes\n    const testNetPref = ['m', 'n', 'tb1', '2'];\n    let addressNetwork: bitcoinjs.networks.Network;\n\n    if (new RegExp(`^(${mainNetPref.join('|')})`).test(address)) {\n        // check for regex match from the given address and array\n        addressNetwork = bitcoinjs.networks.bitcoin;\n        //return bitcoinjs.networks.bitcoin;\n    } else if (new RegExp(`^(${testNetPref.join('|')})`).test(address)) {\n        addressNetwork = bitcoinjs.networks.testnet;\n        //return bitcoinjs.networks.testnet;\n    } else {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    if (!validateBtcAddress(address, addressNetwork)) {\n        throw new Error('Invalid Bitcoin address');\n    }\n    return addressNetwork;\n}\n\n/**\n * converts satoshi to bitcoin\n * @param satoshi number of satoshi\n */\nexport function satoshiToBitcoin(satoshi: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshi\n    const denominator = new BigNumber(10).pow(new BigNumber(8));\n\n    if (typeof satoshi === 'string' || typeof satoshi === 'number') {\n        const _satNum = typeof satoshi === 'string' ? parseInt(satoshi) : satoshi;\n        if (isNaN(_satNum)) {\n            throw new Error('Provided value is not a number');\n        }\n        if (_satNum < 0) {\n            throw new Error('Provided value cannot be negative');\n        }\n    }\n\n    return new BigNumber(satoshi).div(denominator);\n}\n\n/**\n * converts bitcoin into satoshi\n * @param bitcoin number of bitcoin\n */\nexport function bitcoinToSatoshi(bitcoin: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshis\n    const denominator = new BigNumber('100000000');\n\n    if (typeof bitcoin === 'number' || typeof bitcoin === 'string') {\n        const _btcNum = typeof bitcoin === 'string' ? parseFloat(bitcoin) : bitcoin;\n        if (isNaN(_btcNum)) {\n            throw new Error('Provided value is not a number');\n        }\n        if (_btcNum < 0) {\n            throw new Error('Provided value cannot be negative');\n        }\n    }\n\n    return new BigNumber(bitcoin).multipliedBy(denominator).integerValue();\n}\n\n/**\n * converts an compressed public key to a uncompressed public key\n * @param publicKey compressed BTC public key\n */\nexport function decompressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: false,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * compresses the given BTC public key\n * @param publicKey uncompressed BTC public key\n * @param network bitcoin network the public key will encode for\n */\nexport function compressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: true,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * returns a compressed public key from the given address and signature.\n * this function will only work with BIP44 encoded address. BIP49 or BIP84 will return\n * an error.\n * @param address bitcoin address in base58 string\n * @param signature the signature in base64 string or buffer\n * @param msg message that was used to sign excluding the prefix in string\n * @param network bitcoin network this belongs to. If none is given, the function will guess one\n */\nexport function getPublicKey(address: string, signature: string | Buffer, msg: string, network?: bitcoinjs.Network) {\n    const _net = network ? network : getNetworkFromAddress(address);\n\n    // returns a compressed public key by default\n    const _pubKey = bitcoinjsMessage.recover(msg, address, signature);\n\n    const recoveredAddress = bitcoinjs.payments.p2pkh({\n        pubkey: Buffer.from(_pubKey, 'hex'),\n        network: _net,\n    }).address!;\n\n    if (recoveredAddress !== address) {\n        throw new Error('Could not recover public key for ' + address);\n    }\n    return _pubKey;\n}\n\n/**\n * used for CHECKSEQUENCEVERIFY relative time lock.\n * this converts days to bip68 encoded block number.\n * @param days number of days to be converted to sequence number\n */\nexport function daysToBlockSequence(days: number) {\n    // verify lock days value\n    if (!Number.isInteger(days) || !Number.isFinite(days)) {\n        throw new Error('Lock days must be a valid integer, but received: ' + days);\n    }\n    const blocksPerDay = 144; //10 min per block. day = 6 * 24\n    const blockSequence = bip68.encode({ blocks: days * blocksPerDay });\n    if (blockSequence >= 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    return blockSequence;\n}\n\n/**\n * create a bitcoin lock script buffer with the given public key.\n * this will lock the token for the given number of block sequence.\n * if the given public key is not compressed, this function will compress it.\n * @param publicKeyHex compressed BTC public key in hex string\n * @param blockSequence bip68 encoded block sequence\n * @param network bitcoin network the public key belongs to\n */\nexport function btcLockScript(publicKeyHex: string, blockSequence: number, network: bitcoinjs.Network): Buffer {\n    // verify block sequence value\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be a negative number');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (blockSequence >= 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    // verify public key by converting to an address\n    if (!validatePublicKey(publicKeyHex, network)) {\n        throw new Error('Invalid public key');\n    }\n\n    const pubKeyBuffer = Buffer.from(compressPubKey(publicKeyHex, network), 'hex');\n\n    return bitcoinjs.script.fromASM(\n        `\n        ${bitcoinjs.script.number.encode(blockSequence).toString('hex')}\n        OP_CHECKSEQUENCEVERIFY\n        OP_DROP\n        ${pubKeyBuffer.toString('hex')}\n        OP_CHECKSIG\n        `\n            .trim()\n            .replace(/\\s+/g, ' '),\n    );\n}\n\n/**\n * creates a P2SH instance that locks the sent token for the given duration.\n * the locked tokens can only be claimed by the provided public key\n * @param lockDays the lock duration in days\n * @param publicKey public key of the locker. This can be both compressed or uncompressed\n * @param network bitcoin network the script will generate for\n */\nexport function getLockP2SH(lockDays: number, publicKey: string, network: bitcoinjs.Network) {\n    // only check lock duration boundaries for main net\n    if (network === bitcoinjs.networks.bitcoin) {\n        if (lockDays > 300 || lockDays < 30) {\n            throw new Error('Lock duration must be between 30 days to 300 days');\n        }\n    }\n\n    return bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDays), network),\n        },\n    });\n}\n\n/**\n * creates a lock redeem UTXO\n * @param signer the signer for signing the transaction hash\n * @param network network type (bitcoinjs-lib)\n * @param lockTx the transaction that locks the value to P2SH address\n * @param lockScript the lock script (P2SH)\n * @param blockSequence block sequence to lock the funds, should be the same value used in the lock script\n * @param recipient recipient for the transaction output\n * @param fee transaction fee for the lock transaction\n */\nexport async function btcUnlockTx(\n    signer: HwSigner,\n    network: Network,\n    lockTx: bitcoinjs.Transaction,\n    lockScript: Buffer,\n    blockSequence: number,\n    recipientAddress: string,\n    fee: number, // satoshis\n) {\n    function idToHash(txid: string): Buffer {\n        return Buffer.from(txid, 'hex').reverse();\n    }\n    function toOutputScript(address: string): Buffer {\n        return bitcoinjs.address.toOutputScript(address, network);\n    }\n\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be less than zeo');\n    }\n    if (fee < 0) {\n        throw new Error('Transaction fee cannot be less than zero');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (!Number.isInteger(fee) || !Number.isFinite(fee)) {\n        throw new Error('Fee must be a valid integer, but received: ' + fee);\n    }\n    const txIndex = 0;\n    if (lockTx.outs[txIndex].value - fee < 0) {\n        throw new Error(`Transaction fee cannot be larger than ${lockTx.outs[txIndex].value} Satoshi`);\n    }\n\n    //const sequence = bip68.encode({ blocks: lockBlocks });\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(idToHash(lockTx.getId()), txIndex, blockSequence);\n    tx.addOutput(toOutputScript(recipientAddress), lockTx.outs[txIndex].value - fee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType);\n    const signature = bitcoinjs.script.signature.encode(await signer.sign(signatureHash), hashType);\n\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network,\n        redeem: {\n            network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n    if (redeemScriptSig instanceof Buffer) {\n        tx.setInputScript(0, redeemScriptSig);\n    } else {\n        throw new Error('Transaction is invalid');\n    }\n\n    return tx;\n}\n\n/**\n * create a unsigned unlock transaction. This function will return a signature hash for the transaction that the user will sign,\n * the unsigned transaction instance and the lock P2SH payment instance that this will be unlocking for.\n * @param lockTransaction the lock UTXO that is already in the blockchain\n * @param publicKey public key of the user in string hex (compression is done within the function)\n * @param lockDuration script token locking duration in days (converted to relative block sequence within the function)\n * @param network the bitcoin network the transaction is for\n * @param txFee the transaction fee for the UTXO in Satoshi\n */\nexport function unsignedUnlockTx(\n    lockTransaction: BlockStreamApi.Transaction,\n    publicKey: string,\n    lockDuration: number,\n    network: bitcoinjs.Network,\n    txFee: number,\n) {\n    const lockP2sh = getLockP2SH(lockDuration, publicKey, network);\n    const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network });\n\n    if (typeof address === 'undefined') {\n        throw new Error('could not get P2PKH address from the given public key');\n    }\n\n    const lockVout = lockTransaction.vout.find(locked => locked.scriptpubkey_address === lockP2sh.address!);\n\n    if (typeof lockVout === 'undefined') {\n        throw new Error('Invalid public key provided');\n    }\n\n    if (lockVout.value - txFee < 0) {\n        throw new Error(`Transaction fee cannot be larger than ${lockVout.value} Satoshi`);\n    }\n    if (txFee <= 0) {\n        throw new Error('Transaction fee cannot be 0 or less');\n    }\n\n    const lockScript = btcLockScript(publicKey, daysToBlockSequence(lockDuration), network);\n    const sequence = 0;\n    const output = bitcoinjs.address.toOutputScript(address, network);\n\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(Buffer.from(lockTransaction.txid, 'hex').reverse(), 0, sequence);\n    tx.addOutput(output, lockVout.value - txFee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType).toString('hex');\n\n    return {\n        signatureHash,\n        unsignedUnlockTx: tx,\n        lockP2sh,\n    };\n}\n\n/**\n * Signs the given transaction and returns it as a raw transaction hex that is ready for being broadcasted.\n * The signature should be provided by the user.\n * @param unsignedTx transaction instance that isn't signed\n * @param userUnlockSig signature for the transaction signed by the sender's wallet\n * @param lockScript the lock script used for the lock transaction\n * @param network bitcoin network the transaction will be propagating for\n */\nexport function signTransactionRaw(\n    unsignedTx: bitcoinjs.Transaction,\n    userUnlockSig: string,\n    lockScript: Buffer,\n    network: bitcoinjs.Network,\n) {\n    if (userUnlockSig === '') {\n        throw new Error('Please paste the unlock signature');\n    }\n    const rawSignature = Buffer.from(userUnlockSig.replace(' ', ''), 'hex');\n\n    const signature = bitcoinjs.script.signature.encode(rawSignature, bitcoinjs.Transaction.SIGHASH_ALL);\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            network: network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n\n    unsignedTx.setInputScript(0, redeemScriptSig!);\n\n    const signedTxHex = unsignedTx.toHex();\n\n    return signedTxHex;\n}\n\n/**\n * creates a lockdrop parameter from the given lock script address and values\n * by fetching all transactions in the lock script address from block stream\n * @param scriptAddress the P2SH lock address\n * @param lockDuration duration of the lock in days\n * @param publicKey compressed BTC public key of the locker\n * @param network bitcoin network\n */\nexport async function getLockParameter(\n    scriptAddress: string,\n    lockDurationDays: number,\n    publicKey: string,\n    network: 'mainnet' | 'testnet',\n) {\n    const btcNetwork = network === 'mainnet' ? bitcoinjs.networks.bitcoin : bitcoinjs.networks.testnet;\n    const p2sh = bitcoinjs.payments.p2sh({\n        network: btcNetwork,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDurationDays), btcNetwork),\n        },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    if (p2sh.address && p2sh.address !== scriptAddress) {\n        throw new Error('Lock script information does not match P2SH');\n    }\n\n    if (!validatePublicKey(publicKey, btcNetwork)) {\n        throw new Error('Invalid Public Key');\n    }\n\n    if (lockDurationDays < 0 || !Number.isInteger(lockDurationDays)) {\n        throw new Error('Invalid lock duration');\n    }\n\n    const locks = await getBtcTxsFromAddress(scriptAddress, network);\n    const daysToEpoch = 60 * 60 * 24 * lockDurationDays;\n\n    const lockParams = locks.map(i => {\n        const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n\n        if (typeof lockVal === 'undefined') {\n            throw new Error('Cannot find lock transaction for ' + scriptAddress);\n        }\n\n        return plasmUtils.createLockParam(\n            LockdropType.Bitcoin,\n            '0x' + i.txid,\n            '0x' + publicKey,\n            daysToEpoch.toString(),\n            lockVal.value.toString(),\n        );\n    });\n\n    return lockParams;\n}\n\n/**\n * Creates a signer instance for signing transactions made with bitcoinjs-lib\n * from Ledger BTC App.\n * @param ledgerApi\n * @param path HD address path\n * @param network bitcoin network the transaction will belong\n * @param lockTxHex raw lock UTXO in hex string\n * @param lockScript lock script used to generate the P2SH\n * @param publicKey compressed public key in string format\n */\nexport const generateSigner = async (\n    ledgerApi: AppBtc,\n    path: string,\n    network: bitcoinjs.Network,\n    lockTxHex: string,\n    lockScript: bitcoinjs.payments.Payment,\n    publicKey: string,\n) => {\n    const isSegWit = bitcoinjs.Transaction.fromHex(lockTxHex).hasWitnesses();\n    const ledgerTx = ledgerApi.splitTransaction(lockTxHex, isSegWit);\n    const txIndex = 0; //temp value\n\n    return {\n        network,\n        publicKey: Buffer.from(publicKey, 'hex'),\n\n        sign: async (hash: Buffer, lowR?: boolean) => {\n            console.log('signing with ledger\\n' + hash.toString('hex'));\n\n            const ledgerTxSignatures = await ledgerApi.signP2SHTransaction({\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                inputs: [[ledgerTx, txIndex, lockScript.redeem!.output!.toString('hex'), null]],\n                associatedKeysets: [path],\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                outputScriptHex: lockScript.output!.toString('hex'),\n                segwit: isSegWit,\n                transactionVersion: 2,\n                sigHashType: bitcoinjs.Transaction.SIGHASH_ALL,\n            });\n\n            console.log(ledgerTxSignatures);\n            console.log(hash.toString('hex') + lowR);\n            const [ledgerSignature] = ledgerTxSignatures;\n            const encodedSignature = (() => {\n                if (isSegWit) {\n                    return Buffer.from(ledgerSignature, 'hex');\n                }\n                return Buffer.concat([\n                    Buffer.from(ledgerSignature, 'hex'),\n                    Buffer.from('01', 'hex'), // SIGHASH_ALL\n                ]);\n            })();\n            const decoded = bitcoinjs.script.signature.decode(encodedSignature);\n            return decoded.signature;\n        },\n    } as HwSigner;\n};\n","module.exports = __webpack_public_path__ + \"static/media/plasm-logo.e814f1e5.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_a.c31d8b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_b.5a855f2c.png\";","module.exports = __webpack_public_path__ + \"static/media/UserAgreement.fd3c8e89.md\";","module.exports = __webpack_public_path__ + \"static/media/home-outline.5d4dea4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-twitter.27ff8f62.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-discord.fee2b0c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-telegram.ed1ca736.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-github.01fb3515.svg\";","module.exports = __webpack_public_path__ + \"static/media/plasm-icon.cee6d05f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dusty-icon.acfa536a.svg\";","var map = {\n\t\"./ion-action-sheet-controller_8.entry.js\": [\n\t\t1787,\n\t\t43\n\t],\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t1788,\n\t\t44\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t1789,\n\t\t45\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t1790,\n\t\t24\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t1791,\n\t\t25\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t1792,\n\t\t11\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t1793,\n\t\t12\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t1794,\n\t\t46\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t1795,\n\t\t47\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t1796,\n\t\t48\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t1797,\n\t\t49\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t1798,\n\t\t81\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t1799,\n\t\t82\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t1800,\n\t\t50\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t1801,\n\t\t51\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t1802,\n\t\t52\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t1803,\n\t\t53\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t1804,\n\t\t54\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t1805,\n\t\t55\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t1806,\n\t\t56\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t1807,\n\t\t57\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t1808,\n\t\t83\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t1809,\n\t\t20\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t1810,\n\t\t21\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t1811,\n\t\t58\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t1812,\n\t\t59\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t1813,\n\t\t84\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t1814,\n\t\t39\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t1815,\n\t\t40\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t1816,\n\t\t60\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t1817,\n\t\t61\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t1818,\n\t\t62\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t1819,\n\t\t63\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t1820,\n\t\t64\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t1821,\n\t\t65\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t1822,\n\t\t26\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t1823,\n\t\t27\n\t],\n\t\"./ion-menu_4-ios.entry.js\": [\n\t\t1824,\n\t\t18\n\t],\n\t\"./ion-menu_4-md.entry.js\": [\n\t\t1825,\n\t\t19\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t1826,\n\t\t14\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t1827,\n\t\t15\n\t],\n\t\"./ion-nav_5.entry.js\": [\n\t\t1828,\n\t\t13\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t1829,\n\t\t16\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t1830,\n\t\t17\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t1831,\n\t\t66\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t1832,\n\t\t67\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t1833,\n\t\t32\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t1834,\n\t\t33\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t1835,\n\t\t68\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t1836,\n\t\t69\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t1837,\n\t\t41\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t1838,\n\t\t42\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t1839,\n\t\t37\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t1840,\n\t\t38\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t1841,\n\t\t85\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t1842,\n\t\t70\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t1843,\n\t\t28\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t1844,\n\t\t29\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t1845,\n\t\t71\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t1846,\n\t\t72\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t1847,\n\t\t34\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t1848,\n\t\t35\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t1849,\n\t\t86\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t1850,\n\t\t87\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t1851,\n\t\t73\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t1852,\n\t\t88\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t1853,\n\t\t89\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t1854,\n\t\t74\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t1855,\n\t\t75\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t1856,\n\t\t36\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t1857,\n\t\t76\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t1858,\n\t\t77\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t1859,\n\t\t78\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t1860,\n\t\t30\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t1861,\n\t\t31\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t1862,\n\t\t22\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t1863,\n\t\t23\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t1864,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 786;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t1868,\n\t\t98\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 788;\nmodule.exports = webpackAsyncContext;","// the default introducer address when none is provided by the user\nexport const defaultAddress = '0x0000000000000000000000000000000000000000';\n\nexport const affiliationRate = 0.01;\n\nexport const firstEthIntroducer = [\n    '0xd8de1f6764e442b8763d313722e9eaee3779707e',\n    '0x1d32750e8a03443f008236f7c344fc84821cf690',\n    '0xa5a6d551ab33c3920848844b3fe3b27591df8f10',\n    '0xd8068f813c45c88cebb02cbc0f91f95626ec9a34',\n    '0x45ee0a0db0e775aecbebb300ccfc6486690b3287',\n    '0xd419d53817e1daa7b2f72e51707774f3ff0a54a3',\n    '0x1080355c93a1b4c0dd3c340eed4f7e514c583077',\n    '0x0013aa2fb5ec916660b38f1d53d4fc9bf8ef8a84',\n    '0x78ce6849d00c2f22aec93d29144fc68366cf0c62',\n    '0x60dc4b3d8e8d2c5449186270f385a56a21bb82c3',\n    '0x380566185c87ab93ca4edd474cf6998b5fc4153e',\n    '0x6a61dc52015945dfc6cd0c42f94a722d5022e3d1',\n    '0x520e74218a9fd5563855f11d204810281a833e0f',\n    '0x27c72e4bd23c910218d8f06c4a1742e06657c874',\n    '0xd307ff28710b7a4587200c5ba4c67648c1f24045',\n    '0x9498db340a3ecab7bb0973ee36e95e58c8e58a41',\n    '0xe552821ee85284249c71d4abfc4437992ed2fb93',\n    '0xc78a748dccbd806ae782eb3b8590ae7d162e5a90',\n    '0x20edd77ea8582f4a2400d3c0d53154a74a1ca887',\n    '0xeef2e4a5f6a01d5fb89f38211fb4e6a8702d33b6',\n    '0x531c2607862de00604f600cff6be9cb312467570',\n    '0xf22b286fda7369255376742f360ffcee4e1fbd42',\n    '0xb35e0bfec9facd8f2dcc0e43e68350d5e7baa82f',\n    '0x7b4d4ba1070c4562c568fed6280c800a68fa5427',\n    '0x81042f7f99a86d3981308e72feb36bd791c31920',\n    '0xb98df9f7cdc3a983081cefa1cd94aed4e936f1a9',\n    '0x5b6c1f8838b9abf16c0383b7e4f3c5a750707af2',\n    '0x711b3ca2cc9d5a827f83d5ceafcb0925f2fb82b3',\n    '0x8e7fcc7a17f00f0f5f85f2d5964a581d0813c8a6',\n    '0x6b5e2758bdb9ed798acbfd64104c1deaf09cd24b',\n    '0x55763d6db54736084c1b8d010aa1d99f0dc6d07c',\n    '0xfadf736b86f09f2d07d2b655cfc848fe215140d4',\n    '0x9f4f9e15a4a963a9a3885979cc64b326dcaa18a8',\n    '0x0def9b4811e4c4e9da5acf82d421c97b5e9c152f',\n];\n\nconst secondEthIntroducer = [\n    // first lockdrop participent.\n    '0x0def9b4811e4c4e9da5acf82d421c97b5e9c152f',\n    '0xd8068f813c45c88cebb02cbc0f91f95626ec9a34',\n    '0x00eea078f8fbfc5d62458584e95306e60c4a638e',\n    '0x116fd435e3b2e57598353089ba95e6a0febdb2f3',\n    '0xd307ff28710b7a4587200c5ba4c67648c1f24045',\n    '0x8e7fcc7a17f00f0f5f85f2d5964a581d0813c8a6',\n    '0xe552821ee85284249c71d4abfc4437992ed2fb93',\n    '0x02c2b66dc9678ba1441d384300299783aae5c2c1',\n    '0x12909009d651d40d6ae00b150db3107bc5654603',\n    '0xe0e0b97949687e5cdc9ca843c0428bd0437e176d',\n    '0xd419d53817e1daa7b2f72e51707774f3ff0a54a3',\n    '0xdc1f0c07202629be59e1f5396e7d78803423650e',\n    '0xdbfce5f51e67be01ce77b54766f3770992878263',\n    '0x9999999ccd21cf1517e907b535dc8507f79bce09',\n    '0xc55022673882d57ad13358567e62025467f5a57f',\n    '0x531c2607862de00604f600cff6be9cb312467570',\n    '0xaf1b057a6011583171fb1ea6e627babd6ba0cab4',\n    '0xc8145caf71b4af6c6cc682fc7e1a41c8769c6e86',\n    '0xb86617a3e305e53eb860d3b9fe9999fe72e04767',\n    '0x95600d3c264e5b6b5bf0a7b346450e73f5cd972e',\n    '0x1d32750e8a03443f008236f7c344fc84821cf690',\n    '0x286755cf1b65af2d10613b58f4c2e7792a7cccbe',\n    '0x7f0d238412e75e45cb69b3cacd4b59f220da2442',\n    '0x10534d4e612071e6b6480c498dd8bdb8f51b9ed7',\n    '0xc8e99360d5b672d66610b0db0807611fe954ccf9',\n    '0x00fdbb477d1cd363c333eac93fe7eb0397acd470',\n    '0x7ba00c82c5b19b2ec77836b23a2289fb32558e88',\n    '0xd5aa581ee5d9033b2e36811869781043b1d571a6',\n    '0xbdde562d6c0a3440806e13fd69d6e28c0cb452ca',\n    '0x6c7e7fbfa69f4b5a5ade1c27bc74fa4290a3b8a3', // Chinese ambassador.\n    '0x1fef0f8a5ac51790de232f0ae3e1bfa47eadbacd',\n    '0xaec05c2a88f2b7896005086adbaba3cfd81b63be',\n    '0x6b924183307ef2e529db662f80200611328a0cbd',\n    '0x880c4f74c3d4c39d75f8e2ad958f40671416bf66',\n    '0x155ef6e396f63501804c192f80d223fd618b9795',\n    '0xd8de1f6764e442b8763d313722e9eaee3779707e',\n    '0x9a72b97137065b3816d091310e483811baa1be0f',\n    '0x29c176bc50433d65113a2e6776b595a3de04f92f',\n    '0xd997ca66e558aa3d8d2ec39f3c5196fe5f31fede',\n    '0x61d0a005725b5a742d232655a7e22efb7cad3414',\n    '0xd3320c2b9ec1d41b8fdc8884ea59b660302985ca',\n    '0x50873df6f51369746638a4df373aef4b9e053fee',\n    '0x81042f7f99a86d3981308e72feb36bd791c31920',\n    '0xe81ff5a7f528c660cb41facedd53485e20ea2758',\n    '0x7136adc702e26c13158284c4b0fcff66fa52c99b',\n    '0x164767126f2570a427e3c2f34da27003f8394a40',\n    '0xa8f89819ab9c31dc5b2b33caaf8de1dca0a7fea9',\n    '0x274d5d04597a6c86a5a8cb9dd25c3035af6f2d12',\n    '0xe32c5673b152571e57976bf3a75068917da2da9c',\n    '0x72df03913ed789b45bfb04a9d6b399b8ce2a133e',\n    '0x1cade4c72ccd35870c6d917bfacc2bc7cc0734c5',\n    '0x80844fb6785c1eab7671584e73b0a2363599cb2f',\n    '0x0fbb89875a0cb732437b63740f4d4f265ac727f1',\n    '0x08fde66bf84c45fe0ca982425882abe7168c1c2c',\n    '0x61e15f0bf503f38bc3de9ca4e7c1d2245a94dd6f',\n    '0xd617cc373ecf63c592b44ca76290290bb7321c9f',\n    '0x39d76f41cc6c17e21017dad9abc6609cacd5af67',\n    '0xcb2e279b6846f8263b1559504d1773acf835e0bb',\n    '0xffb3468b6861ba7044fcf61a2d976028204efc49',\n    '0x900a30257db838d82130980497bd403adaf5e441',\n    '0x7b22cee637f699f5792348d0085832d4312b2bd7',\n    '0xdb422897f0f0d3f33845545f691eac4501799a4d',\n    '0x2411605a576fe058483382c1db691318056ebaad',\n    '0xe98407caac216cebe793e577930b8b4ca7a6ad61',\n    '0xb4b10f0b0ac5a8e2b613d3dbe9505a07e3781128',\n    '0x296f0063bdd07be8cba2f5183592574e0d62efca',\n    '0xaad9a85cc1df4e36ed208420cd81a5b3acf984b6',\n    '0x16617c3dc6cb3d3adc5471153520cb9c9a4a0498',\n    '0x5a24f5764fc0a5fd7d74856ac25084bec0916f7c',\n    '0x11a7c436365766b4a1500219529bb94a36c3f6f4',\n    '0x46808e14ada3d28e0a09ce365b281254c6b8c6fa',\n    '0x91715128a71c9c734cdc20e5edeeea02e72e428e',\n    '0x0c4ca96d4e63af64fb7896ab41e0aa871a59fabb',\n    '0x74630370197b4c4795bfeef6645ee14f8cf8997d',\n    '0x8284048672d74d8165f7e38c5c0e6f8fde18c98c',\n    '0x72f843eba7bc13185f9454df5b6194d3d81d2a4b',\n    '0x05a0fa3b8f65c62a77e388dabaf2ec7176c3635e',\n    '0x90fdff26419fb9550a6a55c792b14122e72714da',\n    '0x13fcb7b29f135d3740ca8c6e3f775df6994a3d8e',\n    '0xf46a707e36e82e8875d95db044d61d946decbfd7',\n    '0x9628be77fb3dcd890fd93a5d039092fca855d3cc',\n    '0xaadb9ed84fe0812b87ca98341aef5599b47ea60f',\n    '0x2f0c01465d38fc4a31c95b7e74a4c80be6d87bbe',\n    '0x5023732c23c04bbccce4c75ae9da307a74478dc3',\n    '0x7a4caa3526f80793d6c11d9398efc1686f239e35',\n    '0xe4bb14f0c5e772896ffa5007ea24a5109d910c8e',\n    '0x327dc3388a5138a76568042a2f60bab46b086cdf',\n    '0x06608f5ad0101bdf2786a6a47fc694c88a625a73',\n    '0x17e35b700e6d014d9cc4cc093d6eff6e66d9f117',\n    '0xb16ee2a981cce4c4c075b2bd9406d5074da02727',\n    '0xbd8152fc7f060c6555809f6eada3ce64cba4d723',\n    '0xaf95c1022817a47d23ac90da77be788d66ccfa69',\n    '0x24f94fcd6bfe7a8ca2f9a0730dab0e91590c9147',\n    '0xc1c7f7169b6c3022d172302a32d59c90a33230aa',\n    '0xe5fdedd718bdf40904d67658fa4b9629a7a8b515',\n    '0x4a491bc9abd9ae4f335a074a00c87da5d1f9cbd1',\n    '0x574319e245428c9f064006e49ad5f83947f763ec',\n    '0x2589b11029bd58ca8d917e2ba9f062dec946b463',\n    '0x0a338782562e1740b9468f0855dd4c51f29defde',\n    '0x38bc00ea43ebb5ef5150593a0ba6c381803717e2',\n    '0xe91aee4906c8635bf15962a639436f40780233a0',\n    '0x3385dc8e3ea5a0b077678a7ffdddb2bbed7142b8',\n    '0x2f6f830e90baaf06575d7102f9cd83cf7880e101',\n    '0x19ee7696d2a71548a7f1fc9cef644460d7e73297',\n    '0x198a123599e65140bfefa096648d968a67c3b807',\n    '0x943d56d95613984e4972ae0c4edf1471502a248e',\n    '0x9a94771e7e73f9d8d6e880cfb12cab4e9573c45e',\n    '0xff3fc772434505abff38eecde3c689d4b0254528',\n    '0x6f9393ebeb1eae46417b915bec7849d270d44d57',\n    '0x965e5c422913310d4b0929d3349cb6ba2c7c9d9f',\n    '0x35dcf2c2223f335266e17dacbe8777d7c5bf8a15',\n    '0x61c11f9f831186b8da28978220ae7827cdeddf83',\n    '0x0c1633e0ba164a9def56d86d7c46afcbe4d28a77',\n    '0x9ed176365cc9928d492218f837aae08019f1f465',\n    '0x184cca7d9e77d07fe76450019b0df461cf83f316',\n    '0xe5ee62d72a8b26cc1c6c8c2aa0d9697c3f766893',\n    '0x057dc43af6187a931e78a56b3293912a5b42e5ec',\n    '0x8dc9a800a12a6f0b8e0cb485213b777c296a9536',\n    '0x9cc30a6b421c4e6be8547b8d694a46adf45e8f87',\n    '0xbc3639460ec1e13024c87011a169db2dd07e0d7e',\n    '0x157d9ff7ddd8d426a0013c682dd1567f074f6ec7',\n    '0x25dba4fe43f3e630bbf5c675568c3d463f5b870c',\n    '0x30086c39930c0708b83e2c31ee080505d843ac8c',\n    '0x762bb60be9460754dff50275d23e742e33844491',\n    '0x381150118f049e8970e57b06a6e880b10769e745',\n    '0x34c3a5ea06a3a67229fb21a7043243b0eb3e853f',\n    '0x4260e8206c58cd0530d9a5cff55b77d6165c7bcd',\n    '0x5459fd1a4b2b798aa742223897a43a67e904f629',\n    '0xccb12611039c7cd321c0f23043c841f1d97287a5',\n    '0xab38a0d96586c0f536b09339daa61c4e6981d3fd',\n    '0x37ad9f5cb15867156bd75e76b8d9edc40fc077a8',\n    '0xcddc876165579bddbebf2ea6ddacaa54896b2b6a',\n    '0x3fd1ddf28f604cfe5fefa3adc38e38be2f7208d6',\n    '0x6f04ee370184c6ed094f85a0132358f6352fb7db',\n    '0x51340435b04c3e8d33d7cc0d10f6ad076da50ae9',\n    '0x4718fc7e40092a9d5fc584699aea1aa4c6f63d33',\n    '0x33f3341d95adefed3a51358b04b599862f0f2b8c',\n    '0xbd7c0a61406df33a22eb055643316adce6145198',\n    '0x757058fa2a6261ce0834782152413609ca86c9be',\n    '0xf59c491c98c0268480c0c4661b082961f8029fb0',\n    '0x6dbc25e9ccb0995b935a4107953ba98563ed6c6f',\n    '0x2ecd81e43c1f66185446f4af7dfeaa6aae249f55',\n    '0x4f47f2eb86153d036a18f4858970a8ec7d51066d',\n    '0xde45ac1ddb50d0c7ddb7ce66b3af6a696aec6035',\n    '0xaf5d6846a4b7c2cdfabebf001382bc9cba4dd266',\n    '0xf3b02c6df19e6d1fad2ce2b5a463c3cb253194e1',\n    '0xe2e4f2a725e42d0f0ef6291f46c430f963482001',\n    '0x376e21b6eab3ad3623e4002612c5196c4edfef2a',\n    '0x30f2db9deb67121593c2909b5948d68b9fef57c7',\n    '0x4af013afbadb22d8a88c92d68fc96b033b9ebb8a',\n    '0xf4e2fcd72b667b9f9e71bce82069cd174348fd90',\n    '0x974a3cb54d84b22a6dbeb1bf4e9546eddd825003',\n    '0x6a9f813fb3e6a8f7013dabd1695bae1d49ae8481',\n    '0x3a5444d841f540fc23c9fae2b5d1fb7ee0838a06',\n    '0x04e6839909b7330dc28bf267230d28da5e83bd2a',\n    '0x32057597286efed4d8833de4d7b57907e1cd4012',\n    '0xb36e9e8218866df29a46ee3f2160e380b15bcb57',\n    '0xc9930c8e4055bd5f4619dc345d142e7b814ff655',\n    '0xcbf111366e51ca8e90180d0ee2c7fed9d2bd62dc',\n    '0x3017c658c3fa05781e96599395325ea3f2350b93',\n    '0x6fa7a51725800af7973be549ac5c5bb2c057de37',\n    '0x7756525541d5cc50bd1c0dc1c99cc29ac3fc0d6b',\n    '0x11604a4e849b9d4c6a459a6c69938fc9bc4054db',\n    '0x1391bec69fa33ae796dce01fa12d194e449db65f',\n    '0x589842e8ccd2367df47603189b1c2d3447d6734d',\n    '0x62647118b8b13dd459232ae46c8feb157a054d1f',\n    '0x38567f34e6154f923a96f1eca2cf42be9db1ef4d',\n    '0xc2e44cc966a1a7538b31f84b119dc2a8b25a975d',\n    '0x9bc11c78c3a2a157b01b2b4fe3c610bcc04ff84b',\n    '0x3bb6051cdb5f3e399679dd20400a12919d7e65a9',\n    '0xeca41677558025c76bfd20e9289283cb4ca85f46',\n    '0x6da35093d7661418dc24606b5d3478cd1e64124d',\n    '0x4db6ec655eb2b5bc9dda13e0cfa6df0a301c5ba8',\n    '0xd77caf4c72c635e0ee0853694607cb567c06653d',\n    '0x71232ead3bec1ac03ecfe2556acd6c7d0bd349c7',\n    '0x77cc6ec00f1b6eb1a2a4a5a66e3199f0d99a2716',\n    '0x67468a31b888f631b520db2299c4ccead4eed18f',\n    '0x0ab57e2507efc52c1cf65fd829f638e82287638b',\n    '0x3044392bc94888126fa00c6586dbe86000a64a02',\n    '0x555672439e6f44b6d11abcbcac1e568377b82501',\n    '0x7d04227808dd38f649fe272fe004c029b68f40d7',\n    '0x3288cb2b35d4b25deb6c4e7f8042523b52eb48cd',\n    '0xaa3d5ab57060e32546e45e7fdddbf482879a3609',\n    '0x1ee0950a899d327e1041728a66fc140d859be81c',\n    '0x5c91c5fd6851f9ed55dacb5d7eae87d9549b8d82',\n    '0xb008c5a449bf9f36858846a2d1080120a2560216',\n    '0x95340b69162d21a931da57cb9759b671ef57ee7f',\n    '0xfaf55d4daf9e5377eb33a9eadde86d3a455f6c6d',\n    '0xce57992a5a760ff983bfa5cc15415a18a50b3ecd',\n    '0x798121bef71dafcff3d046e4c29893675f4ed503',\n    '0x44a82977f3b357edfee04231077f990d291735c3',\n    '0x951ed2323ad203e490353ab2ac8ee142fe4b771e',\n    '0xbdcee87119265fc0ec27a3113efc3fbbb90d4d7b',\n    '0x462cc75caee4d0be283eeddbc2cd5698b9880b91',\n    '0x1b8027dc7a6a8949d1ba4aa1c1a81555c6ae2a3a',\n    '0xfa6fd86b42ce2ec5e00c1cd35fb0c78bd88c0417',\n    '0x14a6f964b3d904c918f740826c99dd6a481a95c8',\n    '0x9406a41d8d845a2fca05f860d33f50c9195bdce3',\n    '0x75b07e64161ace39d6eab54d25f25410ffd3d458',\n    '0xbdb7f183b9684e51abce065ad2ebeb58c53b9705',\n    '0x1aaea220580bfe9abd2c30a75cd1c5451c6a13b2',\n    '0xa4ad15c9ee1bce28dec3fad031fc3b56e45928a0',\n    '0xcbd0edbf33209e309b88c86772de17012d586fd6',\n    '0x67fbbfc36c4276e4855658e4e3310abef7c6fcc0',\n    '0x6130a038b17f7ee8d28abd54415f2066c0e81b0b',\n    '0xe7d52be2217cc6178b661e4fe0e9e371ee18b630',\n    '0xea8dd9381571d618119912af553ce81c3c0dff12',\n    '0x98a581c72d4b5b47bd6348ea52d17963f68af33e',\n    '0x2ec7947f3ac9aaaa44b53640506cdc9d848d9489',\n    '0x86486edcb3ebc8f79db2d799b47cb833662740e8',\n    '0xee4c6232735b63796446c837e7f4b8bd299fc844',\n    '0xc5c510ae135b70a12a6be47d0e8ec072e9c62610',\n    '0x787659052e92862f225b139060569083d6dff695',\n    '0x96dc4580e02c10548bc2e170aa7d41725159c5c4',\n    '0x2298718f8c34adb143bdcc017feae24de4a62653',\n    '0x58ffe60904be609b4af1b42ce7bfaadfd0030cea',\n    '0x6de754c0816aa1ec98d2ff55ad6ea7d00ab6e131',\n    '0x5f9f19434824cc539ef0d3c0a386a9707cf2a2ec',\n    '0xea313f37c177d780d5fc9760c5619b4466099a7b',\n    '0xe1478cbf115c2d6bec1572e0e6a43a2dfadca15a',\n    '0xa6ab73d38f67c873fc8e0d54c30a25ed4255b5cb',\n    '0xe68705ee4f07365c31fb7927f7da89dfe710ec5b',\n    '0x4e65a036fa1df22e6f108ecf256a25d3e6f6ea1d',\n    '0xcdceff3dcf24d6286f8accab295abd5bd5f2ef11',\n    '0xb87d9edb23e88bc7c1e6f2cd3aa65fae6397670f',\n    '0x01734005354d569716291cd1cfbc67f3f56a0b6f',\n    '0xc4b0259cf0252eb3b3cf61f41e055e6db34f644c',\n    '0x70aecbb415372151c47e4d82a3263b6cc8ea1995',\n    '0x6a6d6d904812b6d559c18eca37ffe366a6c29d9d',\n    '0x23c6f263adfb998f16a3d95f9c0d4d2024003156',\n    '0x880c15b9f264554effd3191010c99ae84b5b4876',\n    '0x33d30dc6eae66f5a5f9ea54f6b54e3ab9cd9ba38',\n    '0x607f625300099cbd4f8c7430f10112075a7102de',\n    '0x2aaaf3e244b493f9f1e1a0ec17ff344109900842',\n    '0x84609c7176b18487a2b09a2bc4e6db9f5b8e8e0e',\n    '0x926132c52a4a050eabe0bc034b6233a2b37a96b3',\n    '0xfbb447166a9826ae2cb5fb7ca86a2a66a17147be',\n    '0x67f40170bf81d44017be25e6596d1df7e67538f8',\n    '0xea3c39496c2868741ff8a32b49a2943309ead303',\n    '0x7981889f6f7930a3a9f5cb8425cba6fd4991125c',\n    '0xebda2d5559eec2fcd86a001a99955fdb75e206e4',\n    '0x90755a465d1b711a6b68e81deb3e3e5fbcdc3d0c',\n    '0x40f657e85bbb5cc7beb402da315c3fe1974442bf',\n    '0x9fe7a3ed1f3734604c365e3d461e4c1644b1e8e2',\n    '0xe6410ecbaa041a5dcde79164ca66de42a8d72bee',\n    '0x552ec58ec4aa8b5374b042f2995fa857167c99af',\n    '0x234d1f81f8c88d306ac5f7a67b0066a5214b35d5',\n    '0x24e99405587ec0c52521c39159931b70f546e7d2',\n    '0x5cbe5aeef459fcf20b3811f636ddd33f9aa1641e',\n    '0xa3587c55f1d2f8458cbb70cfb432203ac566fffa',\n    '0x0e5dc416760b2bd2c1ca953e437f7a58798531f1',\n    '0xd220d187d5cc56ef262fb02f381a06a7bc69f3ee',\n    '0x2d165e5191ef0674da2637b421a765bdb1f8d346', //  Community Manager and Italian ambassador.\n    '0xc49b6c714feaf22b12eb02a01521dab6edd1fcbd',\n    '0x6b418a0a93532a660fcfdfcbc74078dae1e43dec',\n    '0x504361604c519a16cc19a628f3de1993996f2a7c',\n    '0xc8d5e16e0638a7ed4c30cb92c3b0810d2d1c09ad',\n    '0x2efdb0192db45f3a8bb8510613aff0303911b85b',\n    '0x028ced475400006c4033d84ee6eb7dc9182d8855',\n    '0xf0a355a5ab3d96a4347e9fe3052ef39357df90d0',\n    '0x215a2a56984df578603f6f9f5a46750efb356894',\n    '0x95f1872c2c63f54072bd42f68beee71e0d6f67d3',\n];\n\nconst specialCommunityCommitter = [\n    '0xf5d7d97b33c4090a8cace5f7c5a1cc54c5740930', // Russian lockdrop movie introducer.\n    '0xa451fd5fcc0d389e0c27ff22845c0e17153f7dc8', // Community Manager.\n    '0x3937B5F83f8e3DB413bD202bAf4da5A64879690F', // Korean lockdrop manual translator + community manager\n];\n\nconst secondBtcIntroducer = ['add Bitcoin addresses'];\n\nexport const validEthAddressList = [\n    ...firstEthIntroducer,\n    ...secondEthIntroducer,\n    ...specialCommunityCommitter,\n    defaultAddress,\n];\n\nexport const validBtcAddressList = [...secondBtcIntroducer];\n\n/**\n * Checks if the given introducer address is listed as a valid introducer for the lockdrop\n * @param introducer a bitcoin or ethereum address\n * @param tokenType what blockchain network the given address belongs to. Default is ETH\n */\nexport function isValidIntroducerAddress(introducer: string, tokenType: 'BTC' | 'ETH' = 'ETH') {\n    const validIntroducer =\n        tokenType === 'ETH'\n            ? validEthAddressList.find(i => introducer.toLowerCase().match(i.toLowerCase()))\n            : validBtcAddressList.find(i => introducer.toLowerCase().match(i.toLowerCase()));\n    return typeof validIntroducer === 'string';\n}\n"],"sourceRoot":""}