{"version":3,"sources":["resources/plasm-logo.png","resources/ld_logo_a.png","resources/ld_logo_b.png","resources/quantstamp-logo.png","helpers/lockdrop/BitcoinLockdrop.ts","resources/plasm-icon.svg","resources/dusty-icon.svg","resources/home-outline.svg","resources/logo-twitter.svg","resources/logo-discord.svg","resources/logo-telegram.svg","resources/logo-github.svg","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm/legacy lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","resources/ethereum_logo.svg","components/Navbar.tsx","data/links.ts","theme/themes.ts","components/Footer.tsx","components/SectionCard.tsx","data/lockInfo.ts","pages/LandingPage.tsx","components/DropdownOption.tsx","components/EthLock/LockdropForm.tsx","helpers/getWeb3.ts","data/affiliationProgram.ts","helpers/plasmUtils.ts","types/PlasmDrop.ts","helpers/lockdrop/EthereumLockdrop.ts","components/EthLock/CurrentLocks.tsx","components/EthLock/EthGlobalLocks.tsx","components/EthLock/LockedEthList.tsx","components/EthLock/LockdropCountdownPanel.tsx","components/EthLock/LockdropResult.tsx","components/EthLock/AffiliationList.tsx","pages/EthLockdropPage.tsx","types/LockdropModels.ts","components/ClaimStatus.tsx","pages/DustyEthLockPage.tsx","components/SideMenu.tsx","App.tsx","serviceWorker.ts","index.tsx","resources/bitcoin_logo.svg"],"names":["module","exports","satoshiToBitcoin","satoshi","denominator","BigNumber","pow","div","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","useStyles","makeStyles","theme","createStyles","grow","flexGrow","navbar","backgroundColor","logoIcon","margin","spacing","maxHeight","height","verticalAlign","title","color","inputRoot","sectionDesktop","display","breakpoints","up","sectionMobile","listItem","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Navbar","classes","className","slot","src","plasmLogo","alt","Links","Community","description","link","icon","Company","Products","Collaboration","Blogs","ThemeColors","Copyright","Typography","variant","Date","getFullYear","Link","href","rel","target","root","marginTop","socialIcon","paddingLeft","footer","padding","footerHeader","siteMap","StickyFooter","Container","maxWidth","Grid","container","justify","item","component","align","Divider","List","company","key","ListItem","button","ListItemText","primary","product","collaboration","blog","community","SectionCard","children","paper","Paper","elevation","firstLockdropStart","moment","utc","firstLockdropEnd","secondLockdropStart","secondLockdropEnd","lockdropContracts","firstLock","main","ropsten","private","Lockdrop","networks","address","secondLock","thirdLock","ethDurations","label","value","rate","ethDustyDurations","uri","ethLogo","startDate","endDate","disabled","btcLogo","dustyLock","lockdropLogo","Math","floor","random","lockdropLogoA","lockdropLogoB","logoImg","marginLeft","marginRight","LandingPage","fill","routerLink","format","toString","DropdownOption","props","items","dataSets","x","indexOf","interface","onIonChange","onChoose","LockdropForm","token","onSubmit","dusty","useState","BN","lockAmount","setAmount","lockDuration","setDuration","affAccount","setAff","formRoot","txButton","formLabel","quantLogo","textBox","quantstampLogo","parse","position","placeholder","onIonInput","filter","i","expand","onClick","inputs","duration","amount","affiliation","handleSubmit","web3Listener","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","removeWeb3Event","reject","removeEventListener","error","getWeb3","document","readyState","location","reload","addEventListener","defaultAddress","validEthAddressList","validBtcAddressList","isValidIntroducerAddress","introducer","includes","toLowerCase","PlasmNetwork","femtoToPlm","femto","isLessThanOrEqualTo","plmDenominator","dividedBy","plasmTypeReg","TypeRegistry","createPlasmInstance","network","endpoint","types","values","plasmDefinitions","reduce","res","Local","Dusty","Main","wsProvider","WsProvider","ApiPromise","create","Address","Keys","StakingLedger","Votes","ReferendumInfo","typesAlias","voting","Tally","createLockParam","transactionHash","publicKey","Struct","type","u8","U8aFixed","u64","u128","api","lockParam","nonce","tx","plasmLockdrop","claimRequestTx","request","toU8a","send","txHash","generatePlmAddress","plasmPubKey","polkadotUtil","hexString","result","length","push","parseInt","substr","Uint8Array","toByteArray","replace","getAddressBalance","plasmAddress","asPlm","query","system","account","balance","data","_bal","free","toFixed","getLockdropVoteRequirements","Number","voteThreshold","_voteThreshold","positiveVotes","_positiveVotes","claimId","claim","getClaimStatus","claims","params","get","approve","decline","complete","entries","toHex","undefined","PlmDrop","receiver","basePlm","introducerAndBonuses","affiliationRefsBonuses","locks","this","totalIntroBonuses","plus","affBonus","calculateAffBonus","getTotal","toFormat","calculateIntroBonus","sum","bonus","totalAmountOfPLMsForLockdrop","times","getPubKey","message","msg","hash","eth","accounts","hashMessage","getAccounts","addresses","personal","sign","slice","sig","fromRpcSig","bufferToHex","ecrecover","toBuffer","v","r","s","compressedPubKey","EthCrypto","compress","getAllLockEvents","instance","getPastEvents","fromBlock","ev","all","returnValues","getTransaction","eventHashes","blockHash","lockEvent","getBlock","blockNumber","transactionString","time","timestamp","lock","blockNo","lockOwner","from","defaultAffiliation","aff","plmBaseIssueRatio","lockData","ethExchangeRate","bonusRate","Web3Utils","fromWei","totalPlmBaseIssuingRate","allLocks","plmBaseIssueAmountInLock","totalPlmsRate","currentIssue","calculateTotalPlm","receivingPlm","currentAddressLocks","totalPlmRate","issuingPlm","allRefs","results","refEvents","getAllAffReferences","getTotalLockVal","totalVal","currentEth","connectWeb3","lockSeason","lockdropAbi","abi","net","getNetworkType","networkType","contractAddress","lockInfo","Contract","contract","alert","submitLockTx","txInput","utils","isAddress","amountToSend","toWei","methods","on","listRoot","palette","background","overflow","listSection","ul","lockListPage","textAlign","tabMenu","itemButtons","alignContent","UnlockInfo","getUnlockDate","useCallback","calculateTimeLeft","tillEnd","now","days","hours","minutes","seconds","canUnlock","setLockState","tillUnlock","setUnlockDate","unlocked","setUnlockState","isLoading","setLoading","checkUnlock","today","lockedDay","unlockDate","getBalance","lockBalance","useEffect","interval","setInterval","clearInterval","alignItems","xs","LinearProgress","ListItemSecondaryAction","Tooltip","aria-label","IconButton","edge","sendTransaction","to","CurrentLocks","lockEvents","setEvents","isLoadingComp","setLoadState","getUserLocks","CircularProgress","subheader","ListSubheader","eventItem","GlobalLocks","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","LockState","LockedEthList","useTheme","React","setValue","AppBar","Tabs","onChange","_event","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","LockdropCountdownPanel","startTime","endTime","tillStart","valueOf","difference","diff","timeLeft","getLockState","notStart","start","end","setTimeLeft","lockState","totalLockVal","setTotalLockVal","getLockValue","_totalLockVal","err","PanelWrapper","LockdropResult","pageContent","header","claimButton","totalPlm","setTotalPlm","exRate","setExRate","showIntoRefPopover","setShowIntroRefPopover","showIntoPopover","setShowIntroPopover","totalIssue","countupTotalPlmVal","getTotalPlm","toNumber","decimals","separator","getAffBonus","isOpen","onDidDismiss","getIntroBonus","IntoRefItems","IntoAffItems","ClaimPlm","paddingTop","addressPanel","nested","plmAddress","setPlmAddress","ethPubkey","setEthPubkey","open","setOpen","getPlasmAddress","pubKey","size","ListItemIcon","Collapse","in","timeout","unmountOnExit","IntroducerBonusesItems","lockResult","AffiliationList","lockdropResult","setLockdropResult","sort","b","getAffiliationResults","toast","configure","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","BtcWalletType","LockSeason","LockdropType","hasFirstLockdropEnded","EthLockdropPage","timerInterval","componentDidMount","web3State","setState","handleAccountChange","state","getLockData","componentWillUnmount","isMainnet","allLockEvents","formInputVal","isProcessing","success","fetchingLockData","hasFirstLockdropStarted","Component","inline","iconProgress","green","top","left","zIndex","emptyPanel","justifyContent","claimVoteIcon","ClaimStatus","claimParams","plasmApi","plasmNetwork","setPositiveVotes","setVoteThreshold","plasmAddr","setPlasmAddr","setBalance","plasmUtils","_voteReq","ClaimItem","claimData","setClaimData","setClaimId","sendingRequest","setSendingRequest","claimingLock","setClaimingLock","approveList","setApproveList","declineList","setDeclineList","showApproves","setShowApproves","showDeclines","setShowDeclines","setVoteList","_claim","approves","toJSON","submitClaimReq","param","_lock","_nonce","u8aConcat","hasAllVotes","reqAccepted","submitTokenClaim","catch","epoch","str","num","ActionIcon","authority","Icon","plasmIcon","dustyIcon","btcLockdrop","Badge","badgeContent","showZero","max","anchorOrigin","vertical","horizontal","DustyEthLockPage","plasmNode","_allLocks","_lockParam","getClaimParams","lockParams","setPublicKey","pub","lockdropParam","Ethereum","durationToEpoch","_publicKey","MenuSection","headerText","menuItems","detail","SideMenu","contentId","homeIcon","discord","telegram","twitter","github","App","when","animated","exact","path","render","Boolean","hostname","match","createMuiTheme","fontFamily","join","light","dark","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,wC,qBCA3CD,EAAOC,QAAU,IAA0B,uC,qBCA3CD,EAAOC,QAAU,IAA0B,uC,qBCA3CD,EAAOC,QAAU,IAA0B,6C,wIC+IpC,SAASC,EAAiBC,GAG7B,IAAMC,EAAc,IAAIC,IAAU,IAAIC,IAAI,IAAID,IAAU,IAGxD,MAAuB,kBAAZF,GAA0C,iBAAXA,EAC/B,IAAIE,IAAUF,GAASI,IAAIH,GAE/BD,EAAQI,IAAIH,M,6CCxJvBJ,EAAOC,QAAU,IAA0B,wC,qBCA3CD,EAAOC,QAAU,IAA0B,wC,qBCA3CD,EAAOC,QAAU,IAA0B,0C,qBCA3CD,EAAOC,QAAU,IAA0B,0C,qBCA3CD,EAAOC,QAAU,IAA0B,0C,qBCA3CD,EAAOC,QAAU,IAA0B,2C,qBCA3CD,EAAOC,QAAU,IAA0B,yC,oFCA3C,IAAIO,EAAM,CACT,2CAA4C,CAC3C,KACA,IAED,kCAAmC,CAClC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,iCAAkC,CACjC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,uBAAwB,CACvB,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,qBAAsB,CACrB,KACA,IAED,uCAAwC,CACvC,KACA,IAED,sCAAuC,CACtC,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,mCAAoC,CACnC,KACA,IAED,kCAAmC,CAClC,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,uBAAwB,CACvB,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,kCAAmC,CAClC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,iCAAkC,CACjC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,uBAAwB,CACvB,KACA,IAED,sBAAuB,CACtB,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gCAAiC,CAChC,KACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,KACzBpB,EAAOC,QAAUQ,G,qBC5UjB,IAAID,EAAM,CACT,sBAAuB,CACtB,KACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,KACzBpB,EAAOC,QAAUQ,G,keCxBjBT,EAAOC,QAAU,IAA0B,2C,uPCKrCsB,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,OAAQ,CACJC,gBAAiB,SAErBC,SAAU,CACNC,OAAQP,EAAMQ,QAAQ,GACtBC,UAAW,GACXC,OAAQ,OACRC,cAAe,UAEnBC,MAAO,CACHC,MAAO,SAEXC,UAAW,CACPD,MAAO,WAEXE,eAAe,aACXC,QAAS,QACRhB,EAAMiB,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,SAGjBG,cAAc,aACVH,QAAS,QACRhB,EAAMiB,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,SAGjBI,SAAU,CACNC,MAAO,QAEXC,QAAS,CACLC,SAAUvB,EAAMwB,WAAWC,QAAQ,IACnCC,WAAY1B,EAAMwB,WAAWG,wBAK1B,SAASC,IACpB,IAAMC,EAAU/B,IAEhB,OACI,oCACI,kBAAC,IAAD,CAAWgC,UAAWD,EAAQzB,QAC1B,kBAAC,IAAD,CAAYS,MAAM,SACd,kBAAC,IAAD,CAAYkB,KAAK,SACb,kBAAC,IAAD,CAAeD,UAAWD,EAAQjB,QAClC,yBAAKkB,UAAWD,EAAQvB,SAAU0B,IAAKC,IAAWC,IAAI,MAE1D,kBAAC,IAAD,CAAUJ,UAAWD,EAAQjB,OAA7B,oB,yEC1DPuB,EAEH,wCAFGA,EAGA,oCAHAA,EAID,6CAJCA,EAKC,6BALDA,EAMA,wCAyCAC,EAAY,CACrB,CACIC,YAAa,UACbC,KAAMH,EACNI,KAAM,WAEV,CACIF,YAAa,WACbC,KAAMH,EACNI,KAAM,aAIDC,EAAU,CACnB,CACIH,YAAa,OACbC,KAvDE,wBAyDN,CACID,YAAa,aACbC,KAAK,UAAD,OA5DD,sBAgEEG,EAAW,CACpB,CACIJ,YAAa,QACbC,KAAM,8CAEV,CACID,YAAa,qBACbC,KAAM,6CAEV,CACID,YAAa,iBACbC,KAAM,oDAEV,CACID,YAAa,uBACbC,KAAM,kDAEV,CACID,YAAa,iBACbC,KAAM,qDAIDI,EAAgB,CACzB,CACIL,YAAa,6BACbC,KAAM,+BAEV,CACID,YAAa,iCACbC,KAAM,6BAIDK,EAAQ,CACjB,CACIN,YAAa,SACbC,KAAMH,I,UC5GDS,EAGF,UAHEA,EAKC,UALDA,EAQH,UCKV,SAASC,IACL,OACI,oCACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SACf,cAAY,IAAIC,MAAOC,cAAgB,IACxC,kBAACC,EAAA,EAAD,CAAMrC,MAAM,UAAUsC,KAAK,uBAAuBC,IAAI,sBAAsBC,OAAO,UAAnF,4BAEQ,IACP,yBAMjB,IAAMvD,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCsD,KAAM,CACFC,UAAWvD,EAAMQ,QAAQ,KAE7BgD,WAAY,CACR3C,MAAO,QACPU,SAAU,GACVkC,YAAazD,EAAMQ,QAAQ,IAE/BkD,OAAQ,CACJC,QAAS3D,EAAMQ,QAAQ,GACvBH,gBAAiB,QACjBQ,MAAO,SAEX+C,aAAc,CACV/C,MAAO+B,GAEXiB,QAAS,OAGE,SAASC,IACpB,IAAMjC,EAAU/B,IAEhB,OACI,yBAAKgC,UAAWD,EAAQyB,MACpB,4BAAQxB,UAAWD,EAAQ6B,QACvB,kBAACK,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,EAAG2D,QAAQ,SAASrC,UAAWD,EAAQgC,SAC5D,kBAACI,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,WAGA,kBAACW,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX7B,EAAQzD,KAAI,SAAA0F,GAAO,OAChB,kBAACvB,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAMsB,EAAQnC,KACdoC,IAAKD,EAAQpC,YACbe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAQpC,qBAMnD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,gBAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX5B,EAAS1D,KAAI,SAAAgG,GAAO,OACjB,kBAAC7B,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM4B,EAAQzC,KACdoC,IAAKK,EAAQ1C,YACbe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASC,EAAQ1C,qBAMnD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,iBAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX3B,EAAc3D,KAAI,SAAAiG,GAAa,OAC5B,kBAAC9B,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM6B,EAAc1C,KACpBoC,IAAKM,EAAc3C,YACnBe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASE,EAAc3C,qBAMzD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,QAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX1B,EAAM5D,KAAI,SAAAkG,GAAI,OACX,kBAAC/B,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM8B,EAAK3C,KACXoC,IAAKO,EAAK5C,YACVe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASG,EAAK5C,qBAMhD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,aAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACXjC,EAAUrD,KAAI,SAAAmG,GAAS,OACpB,kBAAChC,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM+B,EAAU5C,KAChBoC,IAAKQ,EAAU7C,YACfe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASI,EAAU7C,uBAS7D,kBAAC0B,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cACzE,kBAACf,EAAD,U,cCrITsC,EAtBsB,SAAC,GAA4B,IAA1BnB,EAAyB,EAAzBA,SAAUoB,EAAe,EAAfA,SASxCvD,EARY9B,aAAW,SAAAC,GAAK,MAAK,CACnCqF,MAAO,CACHhF,gBAAiBuC,EACjBe,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,GAC7BD,OAAQP,EAAMQ,QAAQ,OAIdV,GAEhB,OACI,oCACI,kBAACiE,EAAA,EAAD,CAAWC,SAAUA,GACjB,kBAACsB,EAAA,EAAD,CAAOC,UAAW,EAAGzD,UAAWD,EAAQwD,OACnCD,M,qGChBRI,GAAqBC,IAAOC,IAAI,uBAMhCC,GAAmBF,IAAOC,IAAI,uBAG9BE,GAAsBH,IAAOC,IAAI,uBAEjCG,GAAoBJ,IAAOC,IAAI,uBAG/BI,GAAoB,CAC7BC,UAAW,CACPC,KAAM,6CACNC,QAAS,6CACTC,QAASC,EAASC,SAAS,MAAMC,SAErCC,WAAY,CACRN,KAAM,KACNC,QAAS,6CACTC,QAASC,EAASC,SAAS,MAAMC,SAErCE,UAAW,CAAEP,KAAM,KAAMC,QAAS,KAAMC,QAASC,EAASC,SAAS,MAAMC,UAMhEG,GAA6B,CACtC,CAAEC,MAAO,UAAWC,MAAO,GAAIC,KAAM,IACrC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,KACvC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,KACvC,CAAEF,MAAO,YAAaC,MAAO,IAAMC,KAAM,OAMhCC,GAAkC,CAC3C,CAAEH,MAAO,SAAUC,MAAO,EAAGC,KAAM,IACnC,CAAEF,MAAO,UAAWC,MAAO,GAAIC,KAAM,KACrC,CAAEF,MAAO,UAAWC,MAAO,GAAIC,KAAM,KACrC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,OAyC9BZ,GAAwB,CACjC,CACInF,MAAO,WACPiG,IAAK,mBACLtE,KAAMuE,IACNC,UAAWvB,GACXwB,QAASrB,KAIJW,GAAyB,CAClC,CACI1F,MAAO,WAEP2B,KAAMuE,IACNC,UAAWnB,GACXoB,QAASnB,GACToB,UAAU,GAEd,CACIrG,MAAO,WAEP2B,KAAM2E,IACNH,UAAWnB,GACXoB,QAASnB,GACToB,UAAU,IAILE,GAAwB,CACjC,CACIvG,MAAO,WACPiG,IAAK,uBACLtE,KAAMuE,IACNC,UAAWvB,GACXwB,QAASrB,IAEb,CACI/E,MAAO,WAEP2B,KAAM2E,IACNH,UAAWvB,GACXwB,QAASrB,GACTsB,UAAU,ICjHZG,GAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAAIC,IAAgBC,IAEpE3H,GAAYC,aAAW,iBAAO,CAChC2H,QAAS,CACL1G,QAAS,QACTgD,SAAU,OACV3C,MAAO,QACPX,OAAQ,OACRiH,WAAY,OACZC,YAAa,YA0GNC,GArGsB,WACjC,IAAMhG,EAAU/B,KAEhB,OACI,kBAAC,IAAD,KACI,kBAAC8B,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaoC,SAAS,MAClB,yBAAKhC,IAAKoF,GAAclF,IAAI,GAAGJ,UAAWD,EAAQ6F,UAClD,kBAAC,IAAD,KACI,kBAAC,IAAD,+CACA,kBAAC,IAAD,gCAEJ,kBAAC,IAAD,wIAEsC,IAClC,uBACI7G,MAAM,UACNsC,KAAK,2HACLC,IAAI,sBACJC,OAAO,UAJX,QAOK,IAVT,aAeJ,kBAAC,EAAD,CAAaW,SAAS,MAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,wBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAShC,IAAK8E,IAAS/E,KAAK,UAC5B,kBAAC,IAAD,uBAEA,kBAAC,IAAD,CAAW+F,KAAK,UAAU/F,KAAK,OAC3B,kBAAC,IAAD,CAAegG,WAAW,oBAA1B,UAIR,kBAAC,IAAD,oBACiBvC,GAAmBwC,OAAO,oBAAoBC,WAD/D,OAEI,6BAFJ,aAGetC,GAAiBqC,OAAO,oBAAoBC,WAH3D,SAOJ,kBAAC,EAAD,CAAajE,SAAS,MAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,yBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAShC,IAAK8E,IAAS/E,KAAK,UAC5B,kBAAC,IAAD,uBACA,kBAAC,IAAD,CAAW+F,KAAK,UAAU/F,KAAK,MAAMkF,UAAU,GAA/C,SAKJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASjF,IAAKkF,IAASnF,KAAK,UAC5B,kBAAC,IAAD,uBACA,kBAAC,IAAD,CAAW+F,KAAK,UAAU/F,KAAK,MAAMkF,UAAU,GAA/C,SAIJ,kBAAC,IAAD,uBAEI,6BAFJ,kBAOJ,kBAAC,EAAD,CAAajD,SAAS,MAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,wBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAShC,IAAK8E,IAAS/E,KAAK,UAC5B,kBAAC,IAAD,uBAEA,kBAAC,IAAD,CAAW+F,KAAK,UAAU/F,KAAK,OAC3B,kBAAC,IAAD,CAAegG,WAAW,wBAA1B,UAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAS/F,IAAKkF,IAASnF,KAAK,UAC5B,kBAAC,IAAD,uBAEA,kBAAC,IAAD,CAAW+F,KAAK,UAAU/F,KAAK,MAAMkF,UAAQ,GACzC,kBAAC,IAAD,CAAec,WAAW,wBAA1B,WAIZ,kBAAC,EAAD,S,0EClIHG,GAAiB,SAACC,GAC3B,IAAMC,EAAQD,EAAME,SAAStJ,KAAI,SAAAuJ,GAC7B,OACI,kBAAC,IAAD,CAAiBxG,UAAU,gBAAgB4C,IAAKyD,EAAME,SAASE,QAAQD,GAAI5B,MAAO4B,EAAE5B,OAC/E4B,EAAE7B,UAKf,OACI,kBAAC,IAAD,CAAW+B,UAAU,UAAUC,YAAa,SAAAlJ,GAAC,OAAI4I,EAAMO,SAASnJ,KAC3D6I,I,gECmIEO,GA9HM,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUxG,EAAqC,EAArCA,YAAayG,EAAwB,EAAxBA,MAAwB,EAE1CC,mBAAa,IAAIC,KAAG,IAFsB,oBAEnEC,EAFmE,KAEvDC,EAFuD,OAGtCH,mBAAqB,CAAEtC,MAAO,GAAIC,MAAO,EAAGC,KAAM,IAHZ,oBAGnEwC,EAHmE,KAGrDC,EAHqD,OAI7CL,mBAAS,IAJoC,oBAInEM,EAJmE,KAIvDC,EAJuD,KA8BpEzH,EAxBY9B,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTsJ,SAAU,CACN5F,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,IAEjCgJ,SAAU,CACNjJ,OAAQP,EAAMQ,QAAQ,IAE1BiJ,UAAW,CACPlJ,OAAQP,EAAMQ,QAAQ,IAE1BkJ,UAAW,CACP9B,YAAa5H,EAAMQ,QAAQ,GAC3BC,UAAW,GACXC,OAAQ,OACRC,cAAe,UAEnBgJ,QAAS,CACLhC,WAAY,OACZC,YAAa,YAKT9H,GAchB,OACI,oCACI,kBAAC,EAAD,CAAakE,SAAS,MAClB,yBAAKlC,UAAWD,EAAQ0H,UACpB,kBAACzG,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UACzCwE,EAAQ,cAAgB,aAD7B,8BAGA,kBAAChG,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,UAAjD,aACe,IACX,kBAACpB,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAK,4HACLC,IAAI,sBACJC,OAAO,UAEP,yBAAKrB,IAAK4H,KAAgB1H,IAAI,GAAGJ,UAAWD,EAAQ6H,cAI3DrH,EACG,kBAAC,IAAD,CAASP,UAAWD,EAAQ8H,SACxB,kBAAC,IAAD,KAAiBE,KAAMxH,KAE3B,KAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUyH,SAAS,YAAnB,aAAyClB,GACzC,kBAAC,IAAD,CACImB,YAAa,eAAiBnB,EAC9BoB,WAAY,SAAAzK,GAAC,OAAI2J,EAAY3J,EAAE8D,OAA4BqD,WAGnE,kBAAC,IAAD,CAAU5E,UAAWD,EAAQ4H,WAA7B,iBACA,kBAAC,IAAD,KACI,kBAAC,GAAD,CACIpB,SAAUS,EAAQlC,GAAoBJ,GACtCkC,SAAU,SAACnJ,GAEP6J,GADoBN,EAAQlC,GAAoBJ,IAEhCyD,QAAO,SAAAC,GAAC,OAAIA,EAAExD,QAAYnH,EAAE8D,OAAOqD,SAA8B,OAIzF,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKyC,EAAazC,MACR,eAAiByC,EAAaxC,KAAO,IACrC,gCAKlB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAS7E,UAAWD,EAAQ8H,SACxB,kBAAC,IAAD,+OAGoE,IAChE,uBAAGxG,KAAK,kHAAR,WAEK,IANT,iBAUJ,kBAAC,IAAD,CAAU2G,SAAS,YAAnB,0BAEA,kBAAC,IAAD,CACIC,YAAa,kBACbC,WAAY,SAAAzK,GAAC,OAAI+J,EAAQ/J,EAAE8D,OAA4BqD,WAG/D,kBAAC3C,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWoG,OAAO,QAAQC,QAAS,kBAnFvD,WACI,IAAMC,EAAoB,CACtBC,SAAUnB,EAAazC,MACvB6D,OAAQtB,EACRuB,YAAanB,EACb1C,KAAMwC,EAAaxC,MAEvBkC,EAASwB,GA4EgDI,IAAgB3I,UAAWD,EAAQ2H,UAA5E,2B,8BCtITkB,K,gFAAf,mCAAAC,EAAA,0DAESC,OAAeC,SAFxB,wBAGcC,EAAO,IAAIC,KAAMH,OAAeC,UAH9C,kBAMmBD,OAAeC,SAASG,SAN3C,cAOYC,QAAQC,IAAI,yBAPxB,kBASmBJ,GATnB,mGAecF,OAAeE,KAf7B,wBAiBcA,EAAQF,OAAeE,KAC7BG,QAAQC,IAAI,2BAlBpB,kBAmBeJ,GAnBf,eAuBcK,EAAW,IAAIJ,KAAKK,UAAUC,aAAa,yBAC3CP,EAAO,IAAIC,KAAKI,GACtBF,QAAQC,IAAI,gDAzBpB,kBA0BeJ,GA1Bf,0D,sBAgEO,IAAMQ,GAAkB,WAC3B,IAAIlM,SAAQ,SAACC,EAASkM,GAClB,IACIX,OAAOY,oBAAoB,QAAQ,kBAAMnM,EAAQqL,SACnD,MAAOe,GACLF,EAAOE,QAqBJC,GAhBC,kBACZ,IAAItM,SAAQ,SAACC,EAASkM,GAEU,aAAxBI,SAASC,YAEThB,OAAOiB,SAASC,SAIpB,IACIlB,OAAOmB,iBAAiB,QAAQ,kBAAM1M,EAAQqL,SAChD,MAAOe,GACLF,EAAOE,Q,oBCxFNO,GAAiB,6CA6CjBC,GAAmB,UAzCL,CACvB,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,8CAGwB,CAAC,0BAIG,CAAmDD,KAEtEE,GAAmB,UAJJ,CAAC,0BAUtB,SAASC,GAAyBC,GACrC,OACIH,GAAoBI,SAASD,EAAWE,gBAAkBJ,GAAoBG,SAASD,EAAWE,e,IC3C9FC,G,8DAUL,SAASC,GAAWC,GACvB,GAAIA,EAAMC,oBAAoB,IAAI9N,KAAU,IACxC,OAAO,IAAIA,KAAU,GAEzB,IAAM+N,EAAiB,IAAI/N,KAAU,IAAIC,IAAI,IAAID,KAAU,KAC3D,OAAO6N,EAAMG,UAAUD,I,SAffJ,O,iBAAAA,I,iBAAAA,I,gBAAAA,Q,KAqBL,IAAMM,GAAe,IAAIC,gBAOzB,SAAeC,GAAtB,mC,gDAAO,WAAmCC,GAAnC,oBAAArC,EAAA,sDACCsC,EAAW,GACTC,EAAQrN,OAAOsN,OAAOC,IAAkBC,QAAO,SAACC,EAAD,OAAQJ,EAAR,EAAQA,MAAR,oBAAC,gBAAiCI,GAAQJ,KAAU,IAFtG,KAIKF,EAJL,cAKMT,GAAagB,MALnB,SAQMhB,GAAaiB,MARnB,QAWMjB,GAAakB,KAXnB,uBAMKR,EAAW,sBANhB,mCASKA,EAAW,+BAThB,mCAaKA,EAAW,wBAbhB,oCAiBGS,EAAa,IAAIC,cAAWV,GAjB/B,UAmBUW,cAAWC,OAAO,CAC3B1C,SAAUuC,EACVR,MAAM,6BACCA,GADF,IAGD,mBAAoB,WACpB,oBAAqB,YAErBY,QAAS,iBACTC,KAAM,eACNC,cAAe,qBACfC,MAAO,aACPC,eAAgB,wBAGpBC,WAAY,CAAEC,OAAQ,CAAEC,MAAO,kBAlChC,sF,sBAiEA,SAASC,GACZtB,EACAuB,EACAC,EACAlE,EACA5D,GAoBA,OAlBkB,IAAI+H,UAClB5B,GACA,CACI6B,KAAMC,MACNJ,gBAAiB,OACjBC,UAAWI,YACXtE,SAAUuE,OACVnI,MAAOoI,SAEX,CACIJ,KAAM1B,EACNuB,gBAAiBA,EACjBC,UAAW,IAAII,YAAS/B,GAAc2B,EAAW,KACjDlE,SAAU,IAAIuE,OAAIhC,GAAcvC,GAChC5D,MAAO,IAAIoI,QAAKjC,GAAcnG,K,gDAsBnC,WAAoCqI,EAAiBC,EAAmBC,GAAxE,kBAAAtE,EAAA,yDACiC,qBAAzBoE,EAAIG,GAAGC,cADf,sBAEO,IAAI3P,MAAM,0CAFjB,cAKG4P,EAAiBL,EAAIG,GAAGC,cAAcE,QAAQL,EAAUM,QAASL,GALpE,SAOkBG,EAAeG,OAPjC,cAOGC,EAPH,yBASIA,GATJ,4C,sBAgBA,SAASC,GAAmBjB,GAE/B,IASMkB,EAAcC,eATA,SAACC,GAEjB,IADA,IAAMC,EAAS,GACN3F,EAAI,EAAGA,EAAI0F,EAAUE,OAAQ5F,GAAK,EACvC2F,EAAOE,KAAKC,SAASJ,EAAUK,OAAO/F,EAAG,GAAI,KAEjD,OAAO,IAAIgG,WAAWL,GAImBM,CAAY3B,EAAU4B,QAAQ,KAAM,KAAM,KAGvF,OADqBT,iBAA2BD,EAAa,GAU1D,SAAeW,GAAtB,uC,gDAAO,WAAiCtB,EAAiBuB,EAAsBC,GAAxE,oBAAA5F,EAAA,sEAC6BoE,EAAIyB,MAAMC,OAAOC,QAAQJ,GADtD,uBACWK,EADX,EACKC,KACJC,EAAOF,EAAQG,KAAK7I,WACpBsI,IACAM,EAAOrE,GAAW,IAAI5N,KAAU+R,EAAQG,KAAK7I,aAAa8I,WAJ3D,kBAMIF,GANJ,4C,sBAaA,SAAeG,GAAtB,mC,gDAAO,WAA2CjC,GAA3C,kBAAApE,EAAA,kEAEoBsG,OAFpB,SAE2ClC,EAAIyB,MAAMrB,cAAc+B,gBAFnE,0BAEoFjJ,WAAjFkJ,EAFH,KAE2BnB,SAF3B,qBAIoBiB,OAJpB,SAI2ClC,EAAIyB,MAAMrB,cAAciC,gBAJnE,0BAIoFnJ,WAAjFoJ,EAJH,KAI2BrB,SAJ3B,kCAMI,CACHkB,cAAeC,EACfC,cAAeC,IARhB,6C,sEAiBA,WAAiCtC,EAAiBuC,GAAlD,kBAAA3G,EAAA,yDACiC,qBAAzBoE,EAAIG,GAAGC,cADf,sBAEO,IAAI3P,MAAM,0CAFjB,cAKG4P,EAAiBL,EAAIG,GAAGC,cAAcoC,MAAMD,GAL/C,SAOkBlC,EAAeG,OAPjC,cAOGC,EAPH,yBASIA,GATJ,4C,sBAmBA,SAAegC,GAAtB,qC,gDAAO,WAA8BzC,EAAiBuC,GAA/C,0BAAA3G,EAAA,sEAEkBoE,EAAIyB,MAAMrB,cAAcsC,OAAOH,GAFjD,OAEGC,EAFH,OAKGX,EAAc,CAChBc,OAAQ,CAEJhD,KAAM6C,EAAMI,IAAI,UAAUA,IAAI,QAC9BpD,gBAAiBgD,EAAMI,IAAI,UAAUA,IAAI,oBACzCnD,UAAW+C,EAAMI,IAAI,UAAUA,IAAI,cACnCrH,SAAUiH,EAAMI,IAAI,UAAUA,IAAI,YAClCjL,MAAO6K,EAAMI,IAAI,UAAUA,IAAI,UAEnCC,QAASL,EAAMI,IAAI,WACnBE,QAASN,EAAMI,IAAI,WACnBpH,OAAQgH,EAAMI,IAAI,UAClBG,SAAUP,EAAMI,IAAI,aAjBrB,MAoByB9R,OAAOkS,QAAQnB,EAAKc,QApB7C,wEAuBsB,qBAHPhL,EApBf,OAwBuB,yEAAlBA,EAAMsL,SACY,uEAAlBtL,EAAMsL,QAzBX,8CA2BYC,GA3BZ,2DA+BIrB,GA/BJ,6C,sBC1OA,IAAMsB,GAAb,WAOI,WACIC,EACAC,EACAC,EACAC,EACAC,GACD,0BAZHJ,cAYE,OAXFC,aAWE,OAVFC,0BAUE,OATFC,4BASE,OARFC,WAQE,EACEC,KAAKL,SAAWA,EAChBK,KAAKJ,QAAUA,EACfI,KAAKH,qBAAuBA,EAC5BG,KAAKF,uBAAyBA,EAC9BE,KAAKD,MAAQA,EAlBrB,wDAwBQ,IAFA,IAAIE,EAAoB,IAAI7T,KAAU,GAE7BsL,EAAI,EAAGA,EAAIsI,KAAKH,qBAAqBvC,OAAQ5F,IAClDuI,EAAoBA,EAAkBC,KAAKF,KAAKH,qBAAqBnI,GAAG,IAG5E,IAAMyI,EAAWH,KAAKI,oBAEtB,OAAOJ,KAAKJ,QACPM,KAAKD,GACLC,KAAKC,GACL5B,YAjCb,oCAqCQ,OAAO,IAAInS,KAAU4T,KAAKK,YAAY9B,YArC9C,oCAyCQ,OAAO,IAAInS,KAAU4T,KAAKI,qBAAqBE,SAAS,KAzChE,sCA6CQ,OAAO,IAAIlU,KAAU4T,KAAKO,uBAAuBD,SAAS,KA7ClE,0CAkDQ,OAAON,KAAKF,uBAAuBjF,QAC/B,SAAC2F,EAAgBC,GAAjB,OAA2DD,EAAIN,KAAKO,EAAM,MAC1E,IAAIrU,KAAU,MApD1B,4CA0DQ,OAAO4T,KAAKH,qBAAqBhF,QAC7B,SAAC2F,EAAgBC,GAAjB,OAA2DD,EAAIN,KAAKO,EAAM,MAC1E,IAAIrU,KAAU,QA5D1B,K,yCCwBMsU,GADoB,IAAItU,KAAU,6BACeuU,MAAM,IAAIvU,KAAU,MAAME,IAAI,IAAIF,KAAU,QAQ5F,SAAewU,GAAtB,qC,gDAAO,WAAyBtI,EAAYuI,GAArC,4BAAA1I,EAAA,6DAEC2I,EAAM,6DAEND,IACAC,EAAMD,GAEJE,EAAOzI,EAAK0I,IAAIC,SAASC,YAAYJ,GAPxC,SAQqBxI,EAAK0I,IAAIG,cAR9B,cAQGC,EARH,gBAUuB9I,EAAK0I,IAAIK,SAASC,KAAKR,EAAKM,EAAU,GAAI,kBAVjE,0BAUoFG,MAAM,GAAvFC,EAAM,KAVT,KAWG1G,EAAM2G,sBAAWD,GACjBxF,EAAY0F,uBAAYC,qBAAUC,oBAASb,GAAOjG,EAAI+G,EAAG/G,EAAIgH,EAAGhH,EAAIiH,IACpEC,EAAmB,KAAOC,KAAUjG,UAAUkG,SAASlG,EAAU4B,QAAQ,KAAM,KAblF,kBAeIoE,GAfJ,6C,sBAwBA,SAAeG,GAAtB,qC,gDAAO,WAAgC7J,EAAY8J,GAA5C,kBAAAjK,EAAA,6DAEuB,EAFvB,kBAIkBiK,EAASC,cAAc,SAAU,CAC9CC,UAHkB,IAFvB,cAIOC,EAJP,gBAQ2B3V,QAAQ4V,IAC9BD,EAAGhW,IAAH,yCAAO,WAAMQ,GAAN,UAAAoL,EAAA,+EACIvL,QAAQ4V,IAAI,CAAC5V,QAAQC,QAAQE,EAAE0V,cAAenK,EAAK0I,IAAI0B,eAAe3V,EAAEgP,oBAD5E,2CAAP,wDATL,cAQO4G,EARP,yBAcQ/V,QAAQ4V,IACXG,EAAYpW,IAAZ,yCAAgB,WAAMQ,GAAN,sBAAAoL,EAAA,6DAENyK,EAAY7V,EAAE,GACd8V,EAAY9V,EAAE,GAHR,SAKoBH,QAAQC,QAAQyL,EAAK0I,IAAI8B,SAASF,EAAUG,cALhE,cAKNC,EALM,OAMNC,EAAOD,EAAkBE,UAAUzN,WAN7B,kBAOL,CACHuL,IAAK6B,EAAU7B,IACflJ,SAAU+K,EAAU/K,SACpBqL,KAAMN,EAAUM,KAChBvJ,WAAYiJ,EAAUjJ,WACtBwJ,QAASR,EAAUG,YACnBG,UAAWD,EACXI,UAAWT,EAAUU,KACrBV,UAAWA,EAAUA,UACrB7G,gBAAiB6G,EAAU7B,OAhBnB,2CAAhB,yDAfL,yCAoCCtI,QAAQC,IAAR,MApCD,kBAsCQ,IAtCR,2D,sBA+CA,SAAS6K,GAAmBC,GAE/B,OAAIA,GAKOhK,GAIf,SAASiK,GAAkBC,EAAqBC,GAE5C,IFpC+B7L,EEoCzB8L,EAAY,IAAIxX,MFpCS0L,EEoCoB4L,EAAS5L,SFnCxDA,EAAW,GACJ,EACAA,EAAW,IACX,GACAA,EAAW,IACX,IACAA,EAAW,IACX,IAEA,OE0B4D6I,MAAMgD,GAM7E,OAHgC,IAAIvX,KAAUyX,KAAUC,QAAQJ,EAAS1C,IAAIvL,WAAY,UAAUkL,MAC/F,IAAIvU,KAAUwX,IAKtB,SAASG,GAAwBC,EAAuBL,GACpD,OAAOK,EAASnJ,QACZ,SAAC2F,EAAgBtM,GAAjB,OAAiDsM,EAAIN,KAAKuD,GAAkBvP,EAAOyP,MACnF,IAAIvX,KAAU,IAItB,SAAS6X,GAAyBd,EAAiBe,EAA0BP,GACzE,IAAMQ,EAAeV,GAAkBN,EAAMQ,GAC7C,OAAOjD,GAA6BC,MAAMwD,GAAc7X,IAAI4X,GAsCzD,SAASE,GAAkBvQ,EAAiB6P,GAC/C,IAAMW,EAAe,IAAI3E,GAAQ7L,EAAS,IAAIzH,KAAU,GAAI,GAAI,GAAI,IAE9DkY,EAAsBZ,EAASjM,QAAO,SAAAC,GAAC,OAAIA,EAAE2L,UAAUvJ,gBAAkBjG,EAAQiG,iBAEvFuK,EAAatE,MAAQuE,EAOrB,IALA,IAAMX,EAAkB,IAAIvX,KA/JF,QAkKpBmY,EAAeR,GAAwBL,EAAUC,GAE9CjM,EAAI,EAAGA,EAAI4M,EAAoBhH,OAAQ5F,IAAK,CAEjD,IAAM8M,EAAaP,GAAyBK,EAAoB5M,GAAI6M,EAAcZ,GAGlFU,EAAazE,QAAUyE,EAAazE,QAAQM,KAAKsE,GAK7C7K,GAAyB2K,EAAoB5M,GAAGkC,aAChD0K,EAAoB5M,GAAGkC,aAAeJ,IAEtC6K,EAAaxE,qBAAqBtC,KAAK,CACnC+G,EAAoB5M,GAAGkC,WACvB4K,EAAW7D,MAAM,IAAIvU,KHvMN,QG8M3B,GAAIuN,GAAyB9F,GAGzB,IAFA,IAAM4Q,EAjEd,SAA6B5Q,EAAiB6P,GAK1C,IAHA,IAAMgB,EAAuB,GACvBC,EAAYjB,EAASjM,QAAO,SAAA1K,GAAC,OAAIA,EAAE6M,WAAWE,gBAAkBjG,EAAQiG,iBAErEpC,EAAI,EAAGA,EAAIiN,EAAUrH,OAAQ5F,IAClCgN,EAAQnH,KAAKoH,EAAUjN,IAG3B,OAAOgN,EAwDaE,CAAoB/Q,EAAS6P,GAEpChM,EAAI,EAAGA,EAAI+M,EAAQnH,OAAQ5F,IAEhC2M,EAAavE,uBAAuBvC,KAAK,CACrCkH,EAAQ/M,GAAGyL,KACXc,GAAyBQ,EAAQ/M,GAAI6M,EAAcZ,GAAiBhD,MAChE,IAAIvU,KHtNO,QG2N3B,OAAOiY,EAOJ,SAASQ,GAAgB9E,GAC5B,IAAI+E,EAAW,IAAI1Y,KAAU,GAC7B,GAAI2T,EAAMzC,OAAS,EACf,IAAK,IAAI5F,EAAI,EAAGA,EAAIqI,EAAMzC,OAAQ5F,IAAK,CACnC,IAAMqN,EAAa,IAAI3Y,KAAU2T,EAAMrI,GAAGsJ,IAAIvL,YAC9CqP,EAAWA,EAAS5E,KAAK6E,GAGjC,OAAOlB,KAAUC,QAAQgB,EAASvG,UAAW,SAQ1C,SAAeyG,GAAtB,mC,gDAAO,WAA2BC,GAA3B,0BAAA9M,EAAA,+EAGoBe,KAHpB,aAGOZ,EAHP,kBAMqBC,MANrB,iCAQ4BD,EAAK0I,IAAIG,cARrC,cAQWF,EARX,OASWiE,EAAcvR,EAASwR,IATlC,UAgB+B7M,EAAK0I,IAAIoE,IAAIC,iBAhB5C,eAgBWC,EAhBX,OAiBWC,EAAmBC,GAA2BP,GAAoBK,GAGlElD,EAAW,IAAI9J,EAAK0I,IAAIyE,SAASP,EAAiC,OAApBK,GAA4BA,GApBrF,kBAsBY,CACHjN,KAAMA,EACN2I,SAAUA,EACVyE,SAAUtD,IAzBnB,0DA8BCuD,MAAM,0EACNlN,QAAQQ,MAAR,MA/BD,iCAkCI,CACHX,KAAM,GACN2I,SAAU,CAAC,IACXyE,SAAU,KArCX,2D,sBAgDA,SAAeE,GAAtB,uC,gDAAO,WAA4BC,EAAoBhS,EAAiB6R,GAAjE,oBAAAvN,EAAA,2DAEC0N,EAAQ9N,QAAU,IAAIvB,KAAG,IAAMqP,EAAQ/N,UAAY,GAFpD,sBAGO,IAAI9K,MAAM,6BAHjB,WAOG4M,EAAa2J,GAAmBsC,EAAQ7N,aAAa8B,iBAExCjG,EAThB,sBAUO,IAAI7G,MAAM,iCAVjB,WAYC4M,GAAerB,KAAKuN,MAAMC,UAAUnM,GAZrC,sBAaO,IAAI5M,MAAM,yCAbjB,cAoBGgZ,EAAezN,KAAKuN,MAAMG,MAAMJ,EAAQ9N,OAAQ,SAClDgJ,EAAO,GArBR,UAuBG2E,EAASQ,QACV/C,KAAK0C,EAAQ/N,SAAU8B,GACvBmD,KAAK,CACFuG,KAAMzP,EACNK,MAAO8R,IAEVG,GAAG,mBAAmB,SAACrL,GACpBiG,EAAOjG,KA9BZ,iCAgCIiG,GAhCJ,6C,8NC1QDzT,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACT2Y,SAAU,CACNvX,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1CyE,SAAU,WACViP,SAAU,OACVtY,UAAW,KAEfuY,YAAa,CACT3Y,gBAAiB,WAErB4Y,GAAI,CACA5Y,gBAAiB,UACjBsD,QAAS,GAEbuV,aAAc,CACVC,UAAW,UAEfC,QAAS,CACL/Y,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1ChE,MAAO,QAEXgY,YAAa,CACT1Y,cAAe,SACfwY,UAAW,SACXG,aAAc,eA2EpBC,GAAwC,SAAC,GAAiC,IAA/BvB,EAA8B,EAA9BA,SAAUlN,EAAoB,EAApBA,KAAMzE,EAAc,EAAdA,QACvDxE,EAAU/B,KAIV0Z,EAAgBC,uBAAY,WAM9B,OAJ+C,IAA7BxI,OAAO+G,EAAStC,WAJlB,MAMesC,EAAS1N,WAGzC,CAAC0N,IAEE0B,EAAoBD,uBAAY,WAElC,IAAME,EAAUH,KAAmBxW,KAAK4W,MACxC,MAAO,CACHC,KAAMxS,KAAKC,MAAMqS,EAAO,OACxBG,MAAOzS,KAAKC,MAAOqS,EAAO,KAAuB,IACjDI,QAAS1S,KAAKC,MAAOqS,EAAU,IAAO,GAAM,IAC5CK,QAAS3S,KAAKC,MAAOqS,EAAU,IAAQ,OAE5C,CAACH,IAvBuE,EAyBzCzQ,oBAAS,GAzBgC,oBAyBpEkR,EAzBoE,KAyBzDC,EAzByD,OA0BvCnR,mBAAqB2Q,KA1BkB,oBA0BpES,EA1BoE,KA0BxDC,EA1BwD,OA2BxCrR,oBAAS,GA3B+B,oBA2BpEsR,EA3BoE,KA2B1DC,EA3B0D,OA4B3CvR,oBAAS,GA5BkC,oBA4BpEwR,EA5BoE,KA4BzDC,EA5ByD,KA8BrEC,EAAchB,sBAAW,wBAAC,mCAAA9O,EAAA,6DAEtB+P,EAAQ1X,KAAK4W,MAGbe,EAAyC,IAA7B1J,OAAO+G,EAAStC,WAE5BkF,EAAaD,EAlCH,MAkCe3C,EAAS1N,SAPZ,SAUFQ,EAAK0I,IAAIqH,WAAW7C,EAASrC,MAV3B,cAUtBmF,EAVsB,OAc5BR,EAFuC,MAAhBQ,GAIvBN,GAAW,GAhBiB,kBAiBrBE,EAAQE,GAjBa,4CAkB7B,CAAC5C,EAAUlN,IAGdiQ,qBAAU,WAGN,IAAMC,EAAWC,YAAW,wBAAC,uBAAAtQ,EAAA,6DACzByP,EAAcV,KADW,KAEzBQ,EAFyB,SAENO,IAFM,6EAG1B,KAEH,OAAO,WACHS,cAAcF,MAEnB,CAACtB,EAAmBe,IAGvBM,qBAAU,WACNX,EAAcV,KACde,IAAcnb,KAAK4a,KACpB,CAACR,EAAmBe,IAqBvB,OACI,oCACI,kBAAC9V,EAAA,EAAD,CAAUD,IAAKsT,EAASrC,MACpB,kBAAC1R,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,EAAG2a,WAAW,UACnC,kBAAClX,EAAA,EAAD,CAAMG,MAAI,EAACgX,GAAI,GACX,kBAACvW,EAAA,EAAD,KACI,6CAAmBmT,EAASrC,MAC5B,qCACYU,KAAUC,QAAQ0B,EAASxE,IAAK,SAD5C,YAC+DwE,EAAS1N,SADxE,SAGC0N,EAAS5L,aAAeJ,GACrB,0CAAgBgM,EAAS5L,YAEzB,4CAEHmO,EACG,oCACI,kBAACc,GAAA,EAAD,OAGJ,oCACMpB,EAkBEI,EACA,qDAEA,0DApBA,kBAACpW,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,GACrB,kBAACyD,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAI+V,EAAWN,KAAf,WAEJ,kBAAC5V,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAI+V,EAAWL,MAAf,YAEJ,kBAAC7V,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAI+V,EAAWJ,QAAf,cAEJ,kBAAC9V,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAI+V,EAAWH,QAAf,cAEJ,kBAAC/V,EAAA,EAAD,CAAMG,MAAI,GACN,wCAY5B,kBAACH,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACkX,GAAA,EAAD,CAAyBxZ,UAAWD,EAAQwX,aACvCgB,EACG,kBAAC,KAAD,CAAcxZ,MAAM,aACpBoZ,EACA,kBAACsB,GAAA,EAAD,CAAS3a,MAAM,kBAAkB4a,aAAW,UACxC,kBAACC,GAAA,EAAD,CACIC,KAAK,MACLF,aAAW,SACXpR,QAAS,kBA3EzCoQ,GAAW,QACX1P,EAAK0I,IACAmI,gBAAgB,CACb7F,KAAMzP,EACNuV,GAAI5D,EAASrC,KACbjP,MAAO,MAEVpH,MACG,WACIkb,GAAW,MAEf,SAAA/O,GACIR,QAAQC,IAAIO,GACZ+O,GAAW,OA+DS3Z,MAAM,WAEN,kBAAC,KAAD,QAIR,kBAAC,KAAD,CAAUA,MAAM,kBAUjCgb,GA7NkC,SAAC,GAAkC,IAAhC/Q,EAA+B,EAA/BA,KAAM2I,EAAyB,EAAzBA,SAAUyC,EAAe,EAAfA,SAC1DrU,EAAU/B,KAD+D,EAE/CiJ,mBAAsB,IAFyB,oBAExE+S,EAFwE,KAE5DC,EAF4D,OAGzChT,oBAAS,GAHgC,oBAGxEiT,EAHwE,KAGzDC,EAHyD,KAKzEC,EAAe,WACjB,OAAOhG,EAASjM,QAAO,SAAAC,GAAC,OAAIA,EAAE2L,YAAcpC,EAAS,OAczD,OAXAsH,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBc,EAAUG,GACVD,GAAa,KACd,KAEH,OAAO,WACHf,cAAcF,OAKlB,yBAAKlZ,UAAWD,EAAQqX,cACnB8C,EACG,kBAACG,GAAA,EAAD,MAEA,oCACKL,EAAWhM,OAAS,EACjB,oCACI,0CACA,4BAAKuH,GAAgByE,GAArB,eACA,kBAACtX,EAAA,EAAD,CAAM1C,UAAWD,EAAQ+W,SAAUwD,UAAW,8BAC1C,wBAAIta,UAAWD,EAAQmX,aACnB,wBAAIlX,UAAWD,EAAQoX,IACnB,kBAACoD,GAAA,EAAD,iBAAyBP,EAAWhM,OAApC,UACA,kBAACvL,EAAA,EAAD,MACCuX,EAAW/c,KAAI,SAAAud,GAAS,OACrB,oCACI,kBAAC,GAAD,CAAYtE,SAAUsE,EAAWxR,KAAMA,EAAMzE,QAASoN,EAAS,KAC/D,kBAAClP,EAAA,EAAD,cAQxB,oCACI,wCACA,yDCnGtBzE,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACT2Y,SAAU,CACNvX,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1CyE,SAAU,WACViP,SAAU,OACVtY,UAAW,KAEfuY,YAAa,CACT3Y,gBAAiB,WAErB4Y,GAAI,CACA5Y,gBAAiB,UACjBsD,QAAS3D,EAAMQ,QAAQ,EAAG,IAE9B0Y,aAAc,CACVC,UAAW,UAEfC,QAAS,CACL/Y,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1ChE,MAAO,aA4EJkb,GAvEiC,SAAC,GAAkB,IAAhBrG,EAAe,EAAfA,SACzCrU,EAAU/B,KAD8C,EAE9BiJ,mBAAsB,IAFQ,oBAEvD+S,EAFuD,KAE3CC,EAF2C,OAGxBhT,oBAAS,GAHe,oBAGvDiT,EAHuD,KAGxCC,EAHwC,KAoB9D,OAfAlB,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBc,EAAU7F,KACX,KAEH,OAAO,WACHgF,cAAcF,MAEnB,CAAC9E,IAEJ6E,qBAAU,WACNgB,EAAU7F,GACV+F,GAAa,KACd,CAAC/F,IAGA,yBAAKpU,UAAWD,EAAQqX,cACnB8C,EACG,kBAACG,GAAA,EAAD,MAEA,oCACKL,EAAWhM,OAAS,EACjB,oCACI,4CACA,4BAAKuH,GAAgByE,GAArB,eACA,kBAACtX,EAAA,EAAD,CAAM1C,UAAWD,EAAQ+W,SAAUwD,UAAW,8BAC1C,wBAAIta,UAAWD,EAAQmX,aACnB,wBAAIlX,UAAWD,EAAQoX,IACnB,kBAACoD,GAAA,EAAD,kBAA0BP,EAAWhM,OAArC,UACA,kBAACvL,EAAA,EAAD,MACCuX,EAAW/c,KAAI,SAAAud,GAAS,OACrB,oCACI,kBAAC3X,EAAA,EAAD,CAAUD,IAAK4X,EAAU3G,MACrB,kBAAC9Q,EAAA,EAAD,KACI,6CAAmByX,EAAU3G,MAC7B,mDAAyB2G,EAAU1G,SACnC,qCACYS,KAAUC,QAAQgG,EAAU9I,IAAK,SAD7C,WAC+D,IAC1D8I,EAAUhS,SAFf,SAICgS,EAAUlQ,aAAeJ,GACtB,0CAAgBsQ,EAAUlQ,YAE1B,8CAIZ,kBAAC7H,EAAA,EAAD,cAQxB,oCACI,wCACA,yDC/E5B,SAASiY,GAASrU,GAAuB,IAC7B/C,EAAqC+C,EAArC/C,SAAUsB,EAA2ByB,EAA3BzB,MAAO+V,EAAoBtU,EAApBsU,MAAUC,EADC,aACSvU,EADT,8BAGpC,OACI,kBAACrF,EAAA,EAAD,eACIuB,UAAU,MACVsY,KAAK,WACLC,OAAQlW,IAAU+V,EAClB9c,GAAE,8BAAyB8c,GAC3BI,kBAAA,yBAAmCJ,IAC/BC,GAEHhW,IAAU+V,GAAS,kBAACK,GAAA,EAAD,CAAKC,EAAG,GAAI3X,IAK5C,SAAS4X,GAAUP,GACf,MAAO,CACH9c,GAAG,kBAAD,OAAoB8c,GACtB,gBAAgB,uBAAhB,OAAwCA,IAIhD,ICtCKQ,GDsCCnd,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTmZ,QAAS,CACL/Y,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1ChE,MAAO,aAsDJ6b,GAhDmC,SAAC,GAAkC,IAAhCpS,EAA+B,EAA/BA,KAAM2I,EAAyB,EAAzBA,SAAUyC,EAAe,EAAfA,SAC3DrU,EAAU/B,KACVE,EAAQmd,eAFkE,EAGtDC,IAAMrU,SAAS,GAHuC,oBAGzErC,EAHyE,KAGlE2W,EAHkE,KAahF,OACI,oCACI,kBAAC,EAAD,CAAarZ,SAAS,MAClB,yBAAKlC,UAAWD,EAAQuX,SACpB,kBAACkE,GAAA,EAAD,CAAQxT,SAAS,SAASjJ,MAAM,WAC5B,kBAAC0c,GAAA,EAAD,CACI7W,MAAOA,EACP8W,SAfH,SAACC,EAA+BC,GACjDL,EAASK,IAeWC,eAAe,UACfC,UAAU,UACV7a,QAAQ,YACRyY,aAAW,mBAEX,kBAACqC,GAAA,EAAD,eAAKpX,MAAM,iBAAoBuW,GAAU,KACzC,kBAACa,GAAA,EAAD,eAAKpX,MAAM,iBAAoBuW,GAAU,OAGjD,kBAAC,KAAD,CACIc,KAA0B,QAApB9d,EAAM+d,UAAsB,YAAc,IAChDtB,MAAO/V,EACPsX,cAxBM,SAACvB,GACvBY,EAASZ,KAyBO,kBAACD,GAAD,CAAU9V,MAAOA,EAAO+V,MAAO,EAAGwB,IAAKje,EAAM+d,WACzC,kBAAC,GAAD,CAAa7H,SAAUA,KAE3B,kBAACsG,GAAD,CAAU9V,MAAOA,EAAO+V,MAAO,EAAGwB,IAAKje,EAAM+d,WACzC,kBAAC,GAAD,CAAcjT,KAAMA,EAAM2I,SAAUA,EAAUyC,SAAUA,U,4BCvF/E+G,O,uBAAAA,I,iBAAAA,I,cAAAA,Q,KAML,IA4HeiB,GA5HiC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,QAASlI,EAAe,EAAfA,SAC7D0D,EAAMnU,MAASC,MAEfgU,EAAoB,WACtB,IAAM2E,EAAY5Y,IAAO0Y,GAAWG,UAAY1E,EAAI0E,UAGhDC,EAAajU,mBAAS6T,EAAUK,KAAK5E,IAGrCyE,EAAY,IACZE,EAAajU,mBAAS8T,EAAQI,KAAK5E,KAGvC,IAAI6E,EAAuB,CACvB5E,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GAab,OAVgBvU,IAAO2Y,GAASE,UAAY1E,EAAI0E,UAElC,IACVG,EAAW,CACP5E,KAAM0E,EAAW1E,OACjBC,MAAOyE,EAAWzE,QAClBC,QAASwE,EAAWxE,UACpBC,QAASuE,EAAWvE,YAGrByE,GAGLC,EAAe,WACjB,IAAML,EAAY5Y,IAAO0Y,GAAWG,UAAY1E,EAAI0E,UACpD,OAAID,EAAY,EACLpB,GAAU0B,SACVN,GAAa,KAAO5Y,IAAO2Y,GAASE,UAAY1E,EAAI0E,UAAY,GAChErB,GAAU2B,MAEV3B,GAAU4B,KAzCyD,EA6ClD9V,mBAAqB2Q,KA7C6B,oBA6C3E+E,EA7C2E,KA6CjEK,EA7CiE,OA8ChD/V,mBAAS2V,KA9CuC,oBA8C3EK,EA9C2E,KA8ChE7E,EA9CgE,OA+C1CnR,mBAAS,KA/CiC,oBA+C3EiW,EA/C2E,KA+C7DC,EA/C6D,KAiD5EC,EAAY,yCAAG,6BAAAvU,EAAA,sDACjB,IACUwU,EAAgB9H,GAAgBnB,GACtC+I,EAAgBE,GAClB,MAAOC,GACLnU,QAAQQ,MAAM2T,GALD,2CAAH,qDAqBlB,OAZArE,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,uBAAAtQ,EAAA,6DACzBmU,EAAYpF,KACZQ,EAAawE,KAFY,SAGnBQ,IAHmB,2CAI1B,KAEH,OAAO,WACHhE,cAAcF,OAIlB+D,IAAc9B,GAAU4B,IAEpB,oCACI,kBAAC,GAAD,KACI,yBAAK/c,UAAU,QACX,kBAACmC,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,EAAG2D,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACL2a,IAAc9B,GAAU0B,SACrB,kBAAC7b,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,MAAnC,yBAIA,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,MAAnC,wBAKR,kBAACJ,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKqa,EAAS5E,MACd,oCAEJ,kBAAC5V,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKqa,EAAS3E,OACd,qCAEJ,kBAAC7V,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKqa,EAAS1E,SACd,uCAEJ,kBAAC9V,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKqa,EAASzE,SACd,2CASpB,oCACI,kBAAC,GAAD,KACI,kBAAClX,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,sBAGA,kBAACxB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,uBACyB0a,EADzB,WAWdK,GAAyB,SAAC,GAAkB,IAAhBja,EAAe,EAAfA,SAQxBvD,EAPY9B,aAAW,SAAAC,GAAK,MAAK,CACnCkE,UAAW,CACPP,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,GAC7BD,OAAQP,EAAMQ,QAAQ,OAIdV,GAEhB,OACI,oCACI,kBAACiE,EAAA,EAAD,CAAWC,SAAS,KAAKlC,UAAWD,EAAQqC,WACvCkB,K,8GC3BFka,GAjG+B,SAAC,GAAwB,IAAtBpJ,EAAqB,EAArBA,SAAUpL,EAAW,EAAXA,KAgBjDjJ,EAfY9B,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTsf,YAAa,CACTpG,UAAW,SACXxV,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,IAEjCgf,OAAQ,CACJ3e,MAAO+B,GAEX6c,YAAa,CACT9b,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,QAKzBV,GAhBkD,EAiBlCiJ,mBAAkB,IAAImJ,GAAQ,GAAI,IAAItT,KAAU,GAAI,GAAI,GAAI,KAjB1B,oBAiB3D8gB,EAjB2D,KAiBjDC,EAjBiD,OAkBtC5W,mBAAS,GAlB6B,oBAkB3D6W,EAlB2D,KAkBnDC,EAlBmD,OAmBhC9W,oBAAS,GAnBuB,oBAmB3DwR,EAnB2D,KAmBhD0B,EAnBgD,OAoBblT,oBAAS,GApBI,oBAoB3D+W,EApB2D,KAoBvCC,EApBuC,OAqBnBhX,oBAAS,GArBU,oBAqB3DiX,EArB2D,KAqB1CC,EArB0C,KAuBlElF,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,+BAAAtQ,EAAA,6DACzBkV,ELvCkB,QKsCO,SAEF/U,EAAK0I,IAAIG,cAFP,OAEnBF,EAFmB,OAGnByM,EAAatJ,GAAkBnD,EAAS,GAAIyC,GAClDyJ,EAAYO,GAEZjE,GAAa,GANY,2CAO1B,KAEH,OAAO,WACHf,cAAcF,OAItB,IAAMmF,EACF,kBAAC,KAAD,CACIvB,MAAO,EACPC,IAAK,IAAIjgB,KAAU8gB,EAASU,eAAeC,WAC3CC,SAAU,EACVhW,SAAU,EACViW,UAAU,MAIlB,OACI,yBAAKze,UAAWD,EAAQ0d,aACpB,+CACChF,EACG,oCACI,kBAAC4B,GAAA,EAAD,OAEJuD,EAASnN,MAAMzC,OAAS,GAAK4P,EAASpN,uBAAuBxC,OAAS,EACtE,oCACI,wBAAIhO,UAAWD,EAAQ2d,QAASW,EAAhC,iBACA,8CAAoBT,EAASnN,MAAMzC,OAAnC,YACA,4EACmD8P,EADnD,QAEI,uBAAGzc,KAAK,8FAAR,OAFJ,KAOA,uDAA6Buc,EAAStN,QAAQU,SAAS,GAAvD,qBACA,kBAACvO,EAAA,EAAD,MACA,mDACA,kBAAC,IAAD,CAAS1D,MAAM,UAAUuJ,QAAS,kBAAM2V,GAAuB,KAC3D,kBAAC,IAAD,KAAWL,EAASpN,uBAAuBxC,OAA3C,WAEJ,kBAAC,IAAD,iDAAoD4P,EAASc,cAA7D,QAEA,kBAAC,IAAD,CAAYC,OAAQX,EAAoBY,aAAc,kBAAMX,GAAuB,KAC/E,kBAAC,GAAD,CAAcnP,KAAM8O,KAExB,6BACA,kBAAC,IAAD,6BACA,kBAAC,IAAD,CAAS7e,MAAM,UAAUuJ,QAAS,kBAAM6V,GAAoB,KACxD,kBAAC,IAAD,KAAWP,EAASrN,qBAAqBvC,OAAzC,iBAEJ,kBAAC,IAAD,UAAa4P,EAASiB,gBAAtB,QAEA,kBAAC,IAAD,CAAYF,OAAQT,EAAiBU,aAAc,kBAAMT,GAAoB,KACzE,kBAAC,GAAD,CAAcrP,KAAM8O,KAExB,6BACA,kBAAC,GAAD,CAAU5U,KAAMA,KAGpB,wBAAIhJ,UAAWD,EAAQ2d,QAAvB,sCAWVoB,GAAwC,SAAC,GAAc,IAAZhQ,EAAW,EAAXA,KAC7C,OACI,oCACI,kBAAC,IAAD,KACKA,EAAK0B,uBAAuBxC,OAAS,EAClC,oCACI,kBAAC,IAAD,mBACCc,EAAK0B,uBAAuBvT,KAAI,SAACmL,GAAD,OAC7B,kBAAC,IAAD,CAASxF,IAAKwF,EAAE,GAAI/G,KArHxB,gCAqHgD+G,EAAE,GAAI9G,IAAI,sBAAsBC,OAAO,UAC9E6G,EAAE,QAKf,kBAAC,IAAD,yBAOd2W,GAAwC,SAAC,GAAc,IAAZjQ,EAAW,EAAXA,KAC7C,OACI,oCACI,kBAAC,IAAD,KACKA,EAAKyB,qBAAqBvC,OAAS,EAChC,oCACI,kBAAC,IAAD,oBACCc,EAAKyB,qBAAqBtT,KAAI,SAACmL,GAAD,OAC3B,kBAAC,IAAD,CAASxF,IAAKwF,EAAE,GAAI/G,KA1IxB,gCA0IgD+G,EAAE,GAAI9G,IAAI,sBAAsBC,OAAO,UAC9E6G,EAAE,QAKf,kBAAC,IAAD,0BAUd4W,GAAiC,SAAC,GAAc,IAAZhW,EAAW,EAAXA,KAChChL,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTuf,OAAQ,CACJ3e,MAAO+B,GAEX6c,YAAa,CACTsB,WAAY/gB,EAAMQ,QAAQ,GAC1BmH,WAAY,OACZC,YAAa,OACb5D,SAAU,QAEdgd,aAAc,CACVrd,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,IAEjC8C,KAAM,CACFjC,MAAO,OACPiY,aAAc,SACdjZ,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,OAE9C4b,OAAQ,CACJxd,YAAazD,EAAMQ,QAAQ,SArBU,EA0BfuI,oBAAS,GA1BM,oBA0B1CwR,EA1B0C,KA0B/B0B,EA1B+B,OA2BblT,mBAAS,IA3BI,oBA2B1CmY,EA3B0C,KA2B9BC,EA3B8B,OA4BfpY,mBAAS,IA5BM,oBA4B1CqY,EA5B0C,KA4B/BC,EA5B+B,OA6BzBtY,oBAAS,GA7BgB,oBA6B1CuY,EA7B0C,KA6BpCC,EA7BoC,KA+B3CC,EAAe,yCAAG,iCAAA7W,EAAA,sEACCyI,GAAUtI,GADX,cACd2W,EADc,OAEhB5R,EAAS,GACS,kBAAX4R,IACPJ,EAAaI,GAEPP,EAAazR,GAAmBgS,EAAOrR,QAAQ,KAAM,KAC3DP,EAASqR,GAEbjF,GAAa,GATO,kBAUbpM,GAVa,2CAAH,qDAgBfhO,EAAU/B,IAEhB,OACI,oCACI,kBAAC,IAAD,CAAY2gB,OAAQlG,EAAWlH,QAAS,sBACxC,kBAAC,IAAD,CACIxS,MAAM,UACN6gB,KAAK,QACL5f,UAAWD,EAAQ4d,YACnBrV,QAAO,wBAAE,uBAAAO,EAAA,6DACLsR,GAAa,GADR,KAELkF,EAFK,SAEeK,IAFf,8EAJb,qBAWCN,EACG,oCACI,kBAAC,EAAD,CAAald,SAAS,MAClB,yBAAKlC,UAAWD,EAAQmf,cACpB,oFACA,kBAAC9d,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM,oCAAsC+d,EAC5C9d,IAAI,sBACJC,OAAO,UAEP,wBAAIvB,UAAWD,EAAQ2d,QAAS0B,IAEpC,kBAAC1c,EAAA,EAAD,CAAMH,UAAU,MAAMvC,UAAWD,EAAQyB,MACrC,kBAACqB,EAAA,EAAD,CAAUC,QAAM,EAACwF,QAlC1B,WACfmX,GAASD,KAkCmB,kBAACK,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC9c,EAAA,EAAD,CAAcC,QAAQ,wBACrBwc,EAAO,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAE7B,kBAACM,GAAA,EAAD,CAAUC,GAAIP,EAAMQ,QAAQ,OAAOC,eAAa,GAC5C,kBAACjf,EAAA,EAAD,CAAYhB,UAAWD,EAAQ2d,QAAS4B,QAM5D,OC5PVthB,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACT2Y,SAAU,CACNvX,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1CyE,SAAU,WACViP,SAAU,OACVtY,UAAW,KAEfuY,YAAa,CACT3Y,gBAAiB,WAErB4Y,GAAI,CACA5Y,gBAAiB,UACjBsD,QAAS,GAEb/C,MAAO,CACHuY,UAAW,SACXxV,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,SA0DnCwhB,GAA0D,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC/D,OACI,oCACI,kBAACtd,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,4BAAKod,EAAW9P,UAChB,2BAAI8P,EAAW3P,uBAAuBxC,OAAtC,oCACA,2BAAImS,EAAWzB,cAAf,4BAGR,kBAACjc,EAAA,EAAD,QAKG2d,GApE0B,SAAC,GAAkB,IAAhBhM,EAAe,EAAfA,SAClCrU,EAAU/B,KADuC,EAEXiJ,mBAAoB,IAFT,oBAEhDoZ,EAFgD,KAEhCC,EAFgC,KA2BvD,OAJArH,qBAAU,WACNqH,EApBJ,SAA+BlM,GAU3B,OARuBjK,GAAoBhC,QAAO,SAAA5D,GAAO,OAAIA,IAAY2F,MAGtCjN,KAAI,SAAAmL,GACnC,OAAO0M,GAAkB1M,EAAGgM,MAIbmM,MAAK,SAAC1X,EAAG2X,GAAJ,OACpB3X,EAAE2H,uBAAuBxC,OAASwS,EAAEhQ,uBAAuBxC,QACpD,EACDnF,EAAE2H,uBAAuBxC,OAASwS,EAAEhQ,uBAAuBxC,OAC3D,EACA,KAKQyS,CAAsBrM,MACzC,CAACA,IAGA,oCACI,kBAAC,EAAD,CAAalS,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYhB,UAAWD,EAAQjB,MAAOmC,QAAQ,MAA9C,2BAGA,kBAACyB,EAAA,EAAD,CAAMH,UAAU,MAAMvC,UAAWD,EAAQ+W,SAAUwD,UAAW,8BAC1D,wBAAIta,UAAWD,EAAQmX,aACnB,wBAAIlX,UAAWD,EAAQoX,IACnB,kBAACoD,GAAA,EAAD,kBAA0BpQ,GAAoB6D,OAAS,EAAvD,gBACA,kBAACvL,EAAA,EAAD,MACC4d,EAAepjB,KAAI,SAAAmL,GAAC,OACjB,kBAAC,GAAD,CAAwBxF,IAAKwF,EAAEiI,SAAU8P,WAAY/X,aCnCrFsY,KAAMC,UAAU,CACZ3Y,SAAU,YACV4Y,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IC1CYC,GA+BAC,GAUAC,GDUNC,GAAwB,WAC1B,IAAMtJ,EAAMnU,MACPC,MACA4Y,UAEL,OADY3Y,GAAiB2Y,WACf1E,GAiJHuJ,G,oDA7IX,WAAYhb,GAAmB,IAAD,+BAC1B,cAAMA,IAeVib,mBAhB8B,IAmB9BC,kBAnB8B,wBAmBV,6BAAA1Y,EAAA,sEACQ6M,GAAY,aADpB,cACV8L,EADU,OAEhB,EAAKC,SAASD,GAGT1Y,OAAeC,SAAS8N,IACxB/N,OAAeC,SAAS8N,GAAG,kBAAmB,EAAK6K,qBANxC,gBASmB,EAAKC,MAAM3Y,KAAK0I,IAAIoE,IAAIC,iBAT3C,yBASAC,YATA,WASXyL,SATW,gBAahB,EAAKH,cAAgBnI,aAAY,WAC7B,EAAKyI,cAAcpkB,MAAK,WACpB,EAAKikB,SAAS,CAAEhJ,WAAW,SAEhC,KAjBa,4CAnBU,EAuC9BoJ,qBAAuB,WACnBzI,cAAc,EAAKkI,eACnB9X,MAzC0B,EA4C9BsY,UAAY,WACR,MAAkC,SAA3B,EAAKH,MAAM3L,aA7CQ,EAiD9B0L,oBAAsB,WAElB5Y,OAAOiB,SAASC,QAAO,IAnDG,EAsD9B4X,YAtD8B,wBAsDhB,6BAAA/Y,EAAA,+EAGiBgK,GAAiB,EAAK8O,MAAM3Y,KAAM,EAAK2Y,MAAMvL,UAH9D,OAGA1B,EAHA,OAKN,EAAK+M,SAAS,CAAEM,cAAerN,IALzB,gDAON,EAAK+M,SAAS,CAAE9X,MAAK,OACrBR,QAAQC,IAAR,MARM,yDAtDgB,EAkE9BT,aAlE8B,yCAkEf,WAAOqZ,GAAP,UAAAnZ,EAAA,6DACX,EAAK4Y,SAAS,CAAEQ,cAAc,IADnB,kBAGD3L,GAAa0L,EAAc,EAAKL,MAAMhQ,SAAS,GAAI,EAAKgQ,MAAMvL,UAH7D,OAIPsK,KAAMwB,QAAN,8BAAqCF,EAAavZ,OAAlD,oBAAoEuZ,EAAaxZ,SAAjF,WAJO,gDAMPkY,KAAM/W,MAAM,KAAExD,YACdgD,QAAQC,IAAR,MAPO,QAUX,EAAKqY,SAAS,CAAEQ,cAAc,IAVnB,yDAlEe,sDAG1B,EAAKN,MAAQ,CACT3Y,KAAM,GACN2I,SAAU,CAAC,IACXyE,SAAU,GACVqC,WAAW,EACXzC,YAAa,GACbiM,cAAc,EACdF,cAAe,GACfpY,MAAO,KACPwY,kBAAkB,GAZI,E,sDAgF1B,OACI,kBAAC,IAAD,KACI,kBAACriB,EAAD,MACA,kBAAC,IAAD,KArGgB,WAC5B,IAAMgY,EAAMnU,MACPC,MACA4Y,UAGL,OAFc9Y,GAAmB8Y,WAEjB1E,EAgGCsK,GACG1R,KAAKiR,MAAMlJ,UACP,kBAAC,IAAD,CAAYkG,QAAQ,EAAMpN,QAAS,oDAEnC,oCACKb,KAAKiR,MAAMM,aACR,kBAAC,IAAD,CACItD,OAAQjO,KAAKiR,MAAMM,aACnB1Q,QAAS,8BAEb,KAEJ,kBAAC,EAAD,CAAarP,SAAS,MAClB,kBAAC,GAAD,CACIoa,QAASzY,GACTwY,UAAW3Y,GACX0Q,SAAU1D,KAAKiR,MAAMI,gBAExBX,MAA2B1Q,KAAKoR,YAC7B,oCACI,kBAACrf,EAAA,EAAD,MACA,kBAAC,GAAD,CACI2R,SAAU1D,KAAKiR,MAAMI,cACrB/Y,KAAM0H,KAAKiR,MAAM3Y,QAGzB,MAER,kBAAC,GAAD,CAAiBoL,SAAU1D,KAAKiR,MAAMI,gBACrCX,KAA0B,KACvB,kBAAC,GAAD,CAActa,MAAM,MAAMC,SAAU2J,KAAK/H,aAAcpI,YAzK7E,2sBA4KkB,kBAAC,GAAD,CACIyI,KAAM0H,KAAKiR,MAAM3Y,KACjB2I,SAAUjB,KAAKiR,MAAMhQ,SACrByC,SAAU1D,KAAKiR,MAAMI,iBAKjC,oCACI,kBAAC,EAAD,CAAa7f,SAAS,MAClB,kBAAC,GAAD,CACIoa,QAASzY,GACTwY,UAAW3Y,GACX0Q,SAAU1D,KAAKiR,MAAMI,kBAKrC,kBAAC,EAAD,Y,GAxIUzG,IAAM+G,Y,SC3DxBpB,O,mBAAAA,I,mBAAAA,I,aAAAA,I,gBAAAA,Q,cA+BAC,O,iBAAAA,I,mBAAAA,I,iBAAAA,I,kBAAAA,Q,cAUAC,O,qBAAAA,I,wBAAAA,Q,oOCdZT,KAAMC,UAAU,CACZ3Y,SAAU,YACV4Y,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IAAMhjB,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACT2Y,SAAU,CACNvX,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1CyE,SAAU,WACViP,SAAU,OACVrY,OAAQ,KAGZsY,YAAa,CACT3Y,gBAAiB,WAErB4Y,GAAI,CACA5Y,gBAAiB,UACjBsD,QAAS,GAEbuV,aAAc,CACVC,UAAW,UAEfC,QAAS,CACL/Y,gBAAiBL,EAAM6Y,QAAQC,WAAWzT,MAC1ChE,MAAO,QAEX+iB,OAAQ,CACJpjB,QAAS,UAEbqjB,aAAc,CACVxjB,MAAOyjB,KAAM,KACbxa,SAAU,WACVya,IAAK,GACLC,KAAM,GACNC,OAAQ,GAEZC,WAAY,CACRvL,UAAW,SACXgC,WAAY,SACZwJ,eAAgB,SAChBpkB,OAAQ,QAEZqkB,cAAe,CACXrkB,OAAQP,EAAMQ,QAAQ,SAwGnBqkB,GApFsB,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,YAAaC,EAA+D,EAA/DA,SAA+D,IAArDC,oBAAqD,MAAtC,QAAsC,EAA7BlN,EAA6B,EAA7BA,YAAatJ,EAAgB,EAAhBA,UAC1F3M,EAAU/B,KADgG,EAEtEiJ,mBAAS,GAF6D,oBAEzGqI,EAFyG,KAE1F6T,EAF0F,OAGtElc,mBAAS,GAH6D,oBAGzGmI,EAHyG,KAG1FgU,EAH0F,OAIhFnc,oBAAS,GAJuE,oBAIzGwR,EAJyG,KAI9FC,EAJ8F,OAK9EzR,mBAAS,IALqE,oBAKzGoc,EALyG,KAK9FC,EAL8F,OAMlFrc,mBAAS,IANyE,oBAMzG4H,EANyG,KAMhG0U,EANgG,KA4BhH,OApBAtK,qBAAU,WACNqK,EAAaE,GAA8B9W,MAC5C,CAACA,IAEJuM,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,+BAAAtQ,EAAA,sEACN2a,GAA6BP,EAAUI,GAAW,GAD5C,cACnBtU,EADmB,gBAEFyU,GAAuCP,GAFrC,OAEnBQ,EAFmB,OAGzBF,EAAWxU,GACXoU,EAAiBM,EAASnU,eAC1B8T,EAAiBK,EAASrU,eAC1BqJ,GAAaC,GAAW,GANC,4CAO1B,KAGH,OAAO,WACHU,cAAcF,OAKlB,6BACI,kBAAClY,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,cACgB6gB,GAGfA,GAAaxU,GACV,kBAAC7N,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,IAAIC,MAAM,UAAhD,kBACoBqM,EAAU,IACR,UAAjBqU,EAA2B,MAAQ,OAI5C,kBAACxgB,EAAA,EAAD,CAAM1C,UAAWD,EAAQ+W,SAAUwD,UAAW,8BAC1C,wBAAIta,UAAWD,EAAQmX,aACnB,wBAAIlX,UAAWD,EAAQoX,IAClBsB,EACG,yBAAKzY,UAAWD,EAAQ6iB,YACpB,kBAACvI,GAAA,EAAD,OAEJ2I,EAAYhV,OAAS,EACrB,oCACI,kBAACuM,GAAA,EAAD,sBAA8ByI,EAAYhV,OAA1C,UACA,kBAACvL,EAAA,EAAD,MAECugB,EAAY/lB,KAAI,SAAAQ,GAAC,OACd,oCACI,kBAAC,GAAD,CACImF,IAAKnF,EAAEgP,gBAAgByD,QACvBhD,UAAWzP,EACXwlB,SAAUA,EACVC,aAAcA,EACdlN,YAAaA,EACb1G,cAAeA,EACfF,cAAeA,SAM/B,oCACI,kBAACmL,GAAA,EAAD,kCACA,kBAAC9X,EAAA,EAAD,MACA,yBAAKzC,UAAWD,EAAQ6iB,YACpB,kBAAC5hB,EAAA,EAAD,gEACA,kBAACA,EAAA,EAAD,kCAsB9B0iB,GAAiC,SAAC,GAOjC,IANHxW,EAME,EANFA,UACA+V,EAKE,EALFA,SACAC,EAIE,EAJFA,aACAlN,EAGE,EAHFA,YACA1G,EAEE,EAFFA,cACAF,EACE,EADFA,cAEMrP,EAAU/B,KADd,EAEgCiJ,qBAFhC,oBAEK0c,EAFL,KAEgBC,EAFhB,OAG4B3c,mBAC1Buc,GACItW,EAAUN,KACVM,EAAUT,gBAAgByD,QAC1BhD,EAAUR,UAAUwD,QACpBhD,EAAU1E,SAASrC,WACnB+G,EAAUtI,MAAMuB,YAClBsL,MAVJ,oBAGKjC,EAHL,KAGcqU,EAHd,OAc0C5c,oBAAS,GAdnD,oBAcK6c,EAdL,KAcqBC,EAdrB,OAgBsC9c,oBAAS,GAhB/C,oBAgBK+c,EAhBL,KAgBmBC,EAhBnB,OAkBoChd,mBAAmB,IAlBvD,oBAkBKid,EAlBL,KAkBkBC,EAlBlB,OAmBoCld,mBAAmB,IAnBvD,oBAmBKmd,EAnBL,KAmBkBC,EAnBlB,OAsBsCpd,oBAAS,GAtB/C,oBAsBKqd,EAtBL,KAsBmBC,EAtBnB,OAuBsCtd,oBAAS,GAvB/C,oBAuBKud,EAvBL,KAuBmBC,EAvBnB,KAyBIC,EAAc,SAACC,GACjB,IAAMC,EAAWD,EAAO7U,QAAQ+U,SAChCV,EAAeS,GACf,IAAM7U,EAAU4U,EAAO5U,QAAQ8U,SAC/BR,EAAetU,IAGb+U,EAAiB,SAACC,GACpBhB,GAAkB,GAClB,IAAMiB,EAAQxB,GACVuB,EAAMnY,KACNmY,EAAMtY,gBAAgByD,QACtB6U,EAAMrY,UAAUwD,QAChB6U,EAAMvc,SAASrC,WACf4e,EAAMngB,MAAMuB,YAEV8e,EXoCP,SAAuBzV,GAE1B,IADA,IAAIrC,EAAQU,mBACC,CAGT,KAFaA,eAAyBqX,qBAAU1V,EAASrC,IAEhD,GAAK,GAIV,OAAOA,EAHPA,EAAQU,kBW1CG2V,CAAyBwB,EAAMvT,OX9G/C,SAAP,wCWgHQ+R,CAC0BP,EAAU+B,EAAcC,GAC7CznB,MAAK,SAAAgO,GACFrC,QAAQC,IAAI,aAAe4b,EAAMvT,MACjCtI,QAAQC,IAAI,8BAAgCoC,EAAI0E,aAItDiV,EAAc,kBAAMjB,EAAYlW,OAASoW,EAAYpW,QAAUoB,GAC/DgW,EAAc,kBAAMlB,EAAYlW,OAASoW,EAAYpW,QAAUsB,GAE/D+V,EAAmB,SAACxnB,GAClBsnB,KAAiBC,MACjBnB,GAAgB,GXxDrB,SAAP,qCWyDYT,CACuBP,EAAUplB,GAC5BL,MAAK,SAAAgO,GACFrC,QAAQC,IAAI,kCAAoCoC,EAAI0E,YAEvDoV,OAAM,SAAA7nB,GACH0L,QAAQC,IAAI3L,QAK5Bwb,qBAAU,WACNuK,GAA0BP,EAAUzT,GAAShS,MAAK,SAAA4K,GAC9Cwb,EAAaxb,GAETA,IACAsc,EAAYtc,GACR0b,GAAgBC,GAAkB,GAClC3b,EAAE4H,SAASwM,WAAawH,GAAcC,GAAgB,OAGlEJ,EACIL,GACItW,EAAUN,KACVM,EAAUT,gBAAgByD,QAC1BhD,EAAUR,UAAUwD,QACpBhD,EAAU1E,SAASrC,WACnB+G,EAAUtI,MAAMuB,YAClBsL,QAGP,IAEHwH,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,6BAAAtQ,EAAA,sEACJ2a,GAA0BP,EAAUzT,GADhC,QACnBmV,EADmB,UAGrBf,EAAae,GACbD,EAAYC,GAERb,GAAgBC,GAAkB,GAClCY,EAAO3U,SAASwM,WAAawH,GAAcC,GAAgB,IAP1C,2CAS1B,KAGH,OAAO,WACH7K,cAAcF,OAItB,IAvNiBqM,EARGC,EAAaC,GA+N3BC,GAAa,WACf,OAAI/B,IAAcwB,IACP,kBAAC,KAAD,WACchV,IAAdwT,EACA,kBAAC,KAAD,MACAA,IAAcyB,IACd,kBAAC,KAAD,MAEJ,kBAAC,KAAD,OAGX,OACI,oCACI,kBAAC,IAAD,CAAYzG,OAAQ2F,EAAc1F,aAAc,kBAAM2F,GAAgB,KAClE,kBAAC,IAAD,KACI,kBAAC,IAAD,wBACCL,EAAYlW,OAAS,EAClBkW,EAAYjnB,KAAI,SAAA0oB,GAAS,OACrB,kBAAC,IAAD,CAAS/iB,IAAK+iB,GACV,kBAAC,IAAD,KAAWA,OAInB,kBAAC,IAAD,KACI,kBAAC,IAAD,wBAKhB,kBAAC,IAAD,CAAYhH,OAAQ6F,EAAc5F,aAAc,kBAAM6F,GAAgB,KAClE,kBAAC,IAAD,KACI,kBAAC,IAAD,uBACCL,EAAYpW,OAAS,EAClBoW,EAAYnnB,KAAI,SAAA0oB,GAAS,OACrB,kBAAC,IAAD,CAAS/iB,IAAK+iB,GACV,kBAAC,IAAD,KAAWA,OAInB,kBAAC,IAAD,KACI,kBAAC,IAAD,uBAKhB,kBAAC9iB,EAAA,EAAD,KACI,kBAACgd,GAAA,EAAD,KACI,kBAAC+F,GAAA,EAAD,KACsB,UAAjB1C,EAA2B,yBAAKhjB,IAAK2lB,KAAWzlB,IAAI,KAAQ,yBAAKF,IAAK4lB,KAAW1lB,IAAI,OAG9F,kBAAC2C,EAAA,EAAD,KACI,kBAAC/B,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,KAAKlC,MAAM,eAA9C,sBAnRIymB,EAoRkCtY,EAAUT,gBAAgByD,QApR/CuV,GAoRwD,EAnRrFD,EAAIxX,QAAUyX,GACPD,EAGJA,EAAIvT,MAAM,EAAGwT,IAAO,QAiRX,kBAACzkB,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,KAAKjB,UAAWD,EAAQuiB,OAAQvjB,MAAM,eAAzE,SACW,IACU,QAAhBiX,EAAA,UACQzB,KAAUC,QAAQtH,EAAUtI,MAAMuB,WAAY,SADtD,mBAEQ4f,KAA6B7Y,EAAUtI,MAAMuB,YAFrD,SAFL,QA9QCof,EAmRoBrY,EAAU1E,SAAS+V,WAjRjDgH,EADW,OAkRkDpf,WALpD,SAQCwd,GACG,oCACI,6BACA,kBAAC3iB,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,KAAKjB,UAAWD,EAAQuiB,OAAQvjB,MAAM,eAAzE,aACeykB,GAAsB,IAAI1mB,KAAU6mB,EAAUlb,OAAOtC,aAAa8I,UAAW,IACtE,UAAjBiU,EAA2B,MAAQ,QAKhD,6BACA,kBAACliB,EAAA,EAAD,CAAYuB,UAAU,IAAItB,QAAQ,QAAQjB,UAAWD,EAAQuiB,OAAQvjB,MAAM,eAA3E,aACeyQ,EAAQU,SAEvB,6BACA,kBAAClP,EAAA,EAAD,CACIuB,UAAU,IACVtB,QAAQ,QACRjB,UAAWD,EAAQuiB,OACnBvjB,MAAO4kB,EAAY,UAAY,SAE9BA,EACKA,EAAU3T,SAASwM,UACf,mBACA,gCACJ,uBAETmH,GACG,oCACI,kBAAChK,GAAA,EAAD,CAAY5a,MAAM,UAAUwD,UAAU,OAAO+F,QAAS,kBAAMic,GAAgB,KACxE,kBAACyB,GAAA,EAAD,CACIjnB,MAAM,YACNknB,aAAc/B,EAAYlW,OAC1BkY,UAAQ,EACRC,IAAK,IACLnmB,UAAWD,EAAQ+iB,cACnBsD,aAAc,CACVC,SAAU,MACVC,WAAY,SAGhB,kBAAC,KAAD,QAIR,kBAAC3M,GAAA,EAAD,CAAY5a,MAAM,UAAUwD,UAAU,OAAO+F,QAAS,kBAAMmc,GAAgB,KACxE,kBAACuB,GAAA,EAAD,CACIjnB,MAAM,YACNknB,aAAc7B,EAAYpW,OAC1BkY,UAAQ,EACRC,IAAK,IACLnmB,UAAWD,EAAQ+iB,cACnBsD,aAAc,CACVC,SAAU,MACVC,WAAY,SAGhB,kBAAC,KAAD,UAOpB,kBAAC9M,GAAA,EAAD,KACI,6BACI,kBAACG,GAAA,EAAD,CACIC,KAAK,MACLF,aAAW,UACXpR,QAAS,gBACS6H,IAAdwT,GAA4ByB,IAEtBC,EAAiB7V,GADjBsV,EAAe5X,IAGzBnO,MAAM,UACNoG,SACI2e,IAAc,OACdH,QADc,IACdA,OADc,EACdA,EAAW3T,SAASwM,YACpBwH,GACCL,IAAcwB,KAGnB,kBAACO,GAAD,OAEH5B,GAAkBE,EACf,kBAAC3J,GAAA,EAAD,CAAkBuF,KAAM,GAAI5f,UAAWD,EAAQwiB,eAC/C,QAIhB,kBAAC9f,EAAA,EAAD,QC7aZie,KAAMC,UAAU,CACZ3Y,SAAU,YACV4Y,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,I,IA8NAuF,G,oDA1NX,WAAYlgB,GAAY,IAAD,+BACnB,cAAMA,IAmBVib,mBApBuB,IAuBvBC,kBAvBuB,wBAuBH,+BAAA1Y,EAAA,+EAEY6M,GAAY,cAFxB,cAEN8L,EAFM,OAGZ,EAAKC,SAASD,GAHF,SAIYgC,GAA+BA,GAAwB9X,OAJnE,cAIN8a,EAJM,OAKZ,EAAK/E,SAAS,CAAEwB,SAAUuD,IAGrB1d,OAAeC,SAAS8N,IACxB/N,OAAeC,SAAS8N,GAAG,kBAAmB,EAAK6K,qBAT5C,iBAYuB,EAAKC,MAAM3Y,KAAK0I,IAAIoE,IAAIC,iBAZ/C,0BAYIC,YAZJ,WAYPyL,SAZO,kEAcZ,EAAKA,SAAS,CAAE9X,MAAM,EAAD,KACrBR,QAAQC,IAAR,MAfY,QAkBhB,EAAKkY,cAAgBnI,aAAY,WAC7B,EAAKyI,cAAcpkB,MAAK,WACpB,EAAKikB,SAAS,CAAEhJ,WAAW,SAEhC,KAtBa,0DAvBG,EAgDvBqJ,UAAY,WACR,MAAkC,SAA3B,EAAKH,MAAM3L,aAjDC,EAoDvB6L,qBAAuB,WACnBzI,cAAc,EAAKkI,eACnB9X,MAtDmB,EA0DvBkY,oBAAsB,WAElB5Y,OAAOiB,SAASC,QAAO,IA5DJ,EA+DvB4X,YA/DuB,wBA+DT,+BAAA/Y,EAAA,+EAGkBgK,GAAiB,EAAK8O,MAAM3Y,KAAM,EAAK2Y,MAAMvL,UAH/D,OAGAqQ,EAHA,OAKF,EAAK9E,MAAMjV,YACLga,EAAa,EAAKC,iBACxB,EAAKlF,SAAS,CAAEmF,WAAYF,KAGhC,EAAKjF,SAAS,CAAEM,cAAe0E,IAVzB,gDAYN,EAAKhF,SAAS,CAAE9X,MAAK,OACrBR,QAAQC,IAAR,MAbM,yDA/DS,EAgFvByd,aAAe,WACN,EAAKlF,MAAMjV,WACZ4E,GACI,EAAKqQ,MAAM3Y,KADN,kJAIH6E,eAAyB,KAE1BrQ,MAAK,SAAAspB,GACF3d,QAAQC,IAAI,WAAa0d,GACzB,EAAKrF,SAAS,CAAE/U,UAAWoa,OAE9BxB,OAAM,SAAA7nB,GACHijB,KAAM/W,MAAMlM,EAAE8T,QAAQpL,YACtBgD,QAAQC,IAAI3L,OA9FL,EAsGvBkpB,eAAiB,WAab,OAZkB,EAAKhF,MAAMI,cAAc5Z,QAAO,SAAAC,GAAC,OAAIA,EAAE2L,YAAc,EAAK4N,MAAMhQ,SAAS,MAChE1U,KAAI,SAAA4W,GAQ3B,OZuGL,SAA0BkT,GAE7B,IAAMtX,EAAQsX,EASd,MARwB,CACpBna,KAAM6C,EAAMI,IAAI,QAChBpD,gBAAiBgD,EAAMI,IAAI,mBAC3BnD,UAAW+C,EAAMI,IAAI,aACrBrH,SAAUiH,EAAMI,IAAI,YACpBjL,MAAO6K,EAAMI,IAAI,UY/GN2T,CAPQA,GACXrC,GAAa6F,SACbnT,EAAKpH,gBACL,EAAKkV,MAAMjV,UACX,EAAKua,gBAAgBpT,EAAKrL,UAAUrC,WACpC0N,EAAKnC,IAAIvL,iBA9GE,EAsHvB8gB,gBAAkB,SAACze,GAEf,OADkB,MACXA,GAxHY,EA2HvBG,aA3HuB,yCA2HR,WAAOqZ,GAAP,gBAAAnZ,EAAA,yDACX,EAAK4Y,SAAS,CAAEQ,cAAc,IADnB,SAGF,EAAKN,MAAMjV,UAHT,gCAIsB4E,GACrB,EAAKqQ,MAAM3Y,KADmB,kJAIhC6E,eAAyB,KARxB,OAIGqZ,EAJH,OAWH,EAAKzF,SAAS,CAAE/U,UAAWwa,IAXxB,uBAcD5Q,GAAa0L,EAAc,EAAKL,MAAMhQ,SAAS,GAAI,EAAKgQ,MAAMvL,UAd7D,OAePsK,KAAMwB,QAAN,8BAAqCF,EAAavZ,OAAlD,oBAAoEuZ,EAAaxZ,SAAjF,WAfO,kDAiBPkY,KAAM/W,MAAM,KAAE4H,QAAQpL,YACtBgD,QAAQC,IAAR,MAlBO,QAqBX,EAAKqY,SAAS,CAAEQ,cAAc,IArBnB,0DA3HQ,sDAGnB,EAAKN,MAAQ,CACT3Y,KAAM,GACNia,SAAU,GACVtR,SAAU,CAAC,IACXyE,SAAU,GACVqC,WAAW,EACXzC,YAAa,GACbiM,cAAc,EACdF,cAAe,GACf6E,WAAY,GACZjd,MAAO,KACPwY,kBAAkB,EAClBzV,UAAW,IAfI,E,sDAmJb,IAAD,OACL,OACI,kBAAC,IAAD,KACI,kBAAC5M,EAAD,MACA,kBAAC,IAAD,KACI,oCACK4Q,KAAKiR,MAAMlJ,UACR,kBAAC,IAAD,CAAYkG,QAAQ,EAAMpN,QAAS,oDAEnC,oCACKb,KAAKiR,MAAMM,cACR,kBAAC,IAAD,CACItD,OAAQjO,KAAKiR,MAAMM,aACnB1Q,QAAS,8BAIhBb,KAAKoR,YACF,kBAAC,EAAD,CAAa5f,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,qEAKJ,oCACI,kBAAC,GAAD,CACIsE,MAAM,MACNC,SAAU2J,KAAK/H,aACfpI,YApN9B,ysBAqN8ByG,OAAK,IAGT,kBAAC,EAAD,CAAa9E,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,6BAGCkO,KAAKiR,MAAMjV,UACR,kBAAC,GAAD,CACIsW,YAAatS,KAAKiR,MAAMiF,WACxB3D,SAAUvS,KAAKiR,MAAMsB,SACrBjN,YAAY,MACZkN,aAAa,QACbxW,UAAWgE,KAAKiR,MAAMjV,YAG1B,oCACI,kBAACzK,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWoG,OAAO,QAAQC,QAAS,kBAAM,EAAKue,iBAA9C,gCAQhB,kBAAC,GAAD,CACI7d,KAAM0H,KAAKiR,MAAM3Y,KACjB2I,SAAUjB,KAAKiR,MAAMhQ,SACrByC,SAAU1D,KAAKiR,MAAMI,mBAO7C,kBAAC,EAAD,Y,GArNWzG,IAAM+G,W,wMC3C/B8E,GAA+B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAChD,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAgBD,GACfC,EAAUpqB,KAAI,SAACmL,EAAGuS,GAAJ,OACX,kBAAC,IAAD,CAAe1U,WAAYmC,EAAErD,IAAKnC,IAAK+X,GACnC,kBAAC,IAAD,CAAS7X,QAAM,EAACwkB,QAAM,EAACniB,SAAUiD,EAAEjD,UAC/B,kBAAC,IAAD,CAASjF,IAAKkI,EAAE3H,KAAMR,KAAK,UAC3B,kBAAC,IAAD,KAAWmI,EAAEtJ,cA4DtByoB,GApDY,WACvB,OACI,oCACI,kBAAC,IAAD,CAASC,UAAU,QACf,kBAAC,IAAD,gBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAevhB,WAAW,cACtB,kBAAC,IAAD,CAASnD,QAAM,EAACwkB,QAAM,GAClB,kBAAC,IAAD,CAASpnB,IAAKunB,KAAUxnB,KAAK,UAC7B,kBAAC,IAAD,gBAKZ,kBAAC,GAAD,CAAamnB,WAAW,iBAAiBC,UAAWpjB,KACpD,kBAAC,GAAD,CAAamjB,WAAW,kBAAkBC,UAAW7iB,KACrD,kBAAC,GAAD,CAAa4iB,WAAW,iBAAiBC,UAAWhiB,KAEpD,kBAAC,IAAD,KACI,kBAAC,IAAD,uBACA,uBAAGhE,KAAMhB,EAAeiB,IAAI,sBAAsBC,OAAO,UACrD,kBAAC,IAAD,CAASuB,QAAM,EAACwkB,QAAM,GAClB,kBAAC,IAAD,CAASpnB,IAAKwnB,KAASznB,KAAK,UAC5B,kBAAC,IAAD,kBAGR,uBAAGoB,KAAMhB,EAAgBiB,IAAI,sBAAsBC,OAAO,UACtD,kBAAC,IAAD,CAASuB,QAAM,EAACwkB,QAAM,GAClB,kBAAC,IAAD,CAASpnB,IAAKynB,KAAU1nB,KAAK,UAC7B,kBAAC,IAAD,mBAGR,uBAAGoB,KAAMhB,EAAeiB,IAAI,sBAAsBC,OAAO,UACrD,kBAAC,IAAD,CAASuB,QAAM,EAACwkB,QAAM,GAClB,kBAAC,IAAD,CAASpnB,IAAK0nB,KAAS3nB,KAAK,UAC5B,kBAAC,IAAD,kBAGR,uBAAGoB,KAAMhB,EAAciB,IAAI,sBAAsBC,OAAO,UACpD,kBAAC,IAAD,CAASuB,QAAM,EAACwkB,QAAM,GAClB,kBAAC,IAAD,CAASpnB,IAAK2nB,KAAQ5nB,KAAK,UAC3B,kBAAC,IAAD,sBCzBjB6nB,GApBO,WAClB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcN,UAAU,OAAOO,KAAK,MAChC,kBAAC,GAAD,MAEA,kBAAC,IAAD,CAAiBlqB,GAAG,OAAOmqB,UAAQ,GAC/B,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAa3lB,UAAWwD,KAC1C,kBAAC,IAAD,CAAOmiB,KAAK,mBAAmB3lB,UAAW8e,KAC1C,kBAAC,IAAD,CAAO6G,KAAK,uBAAuB3lB,UAAWgkB,KAE9C,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUrO,GAAG,uBC3BrDsO,QACa,cAA7Btf,OAAOiB,SAASse,UAEiB,UAA7Bvf,OAAOiB,SAASse,UAEhBvf,OAAOiB,SAASse,SAASC,MAAM,2D,0BCFvCxf,OAAOsN,SAAWtN,OAAOsN,UAAY,GACrCtN,OAAOE,KAAOF,OAAOE,MAAQ,GAE7B,IAAM9K,GAAQqqB,aAAe,CACzB7oB,WAAY,CACR8oB,WAAY,CACR,YACA,gBACA,qBACA,WACA,SACA,SACA,SACA,YACA,YACA,aACA,kBACFC,KAAK,MAEX1R,QAAS,CACL/T,QAAS,CACLkB,KAAM,UACNwkB,MAAO,UACPC,KAAM,cAKlBC,IAAST,OACL,kBAAC,KAAD,CAAkBjqB,MAAOA,IACrB,kBAAC,GAAD,OAEJ2L,SAASgf,eAAe,SDkFpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMxrB,MAAK,SAAAyrB,GAC/BA,EAAaC,iB,oBErIzBzsB,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.9fe2a0c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plasm-logo.e814f1e5.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_a.c31d8b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_b.5a855f2c.png\";","module.exports = __webpack_public_path__ + \"static/media/quantstamp-logo.a01ad5b8.png\";","import { Message } from 'bitcore-lib';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport bip68 from 'bip68';\nimport { UnspentTx } from '../../types/LockdropModels';\nimport { Transaction, Signer, Network } from 'bitcoinjs-lib';\nimport { BlockCypherApi } from '../../types/BlockCypherTypes';\nimport BigNumber from 'bignumber.js';\n\n//const BTC_TX_API_TESTNET = 'https://api.blockcypher.com/v1/btc/test3/txs/';\n//const BTC_ADDR_API_TESTNET = 'https://api.blockcypher.com/v1/btc/test3/addrs/';\n\n//const BTC_TX_API_MAINNET = 'https://api.blockcypher.com/v1/btc/main/txs/';\n//const BTC_ADDR_API_MAINNET = 'https://api.blockcypher.com/v1/btc/main/addrs/';\n\n/**\n * the message that will be hashed and signed by the client\n */\nexport const MESSAGE = 'plasm network btc lock'; //todo: add nonce for security\n\n/**\n * returns a blob url for the qr encoded bitcoin address\n * @param btcAddress bitcoin address\n */\nexport async function qrEncodeUri(btcAddress: string, size = 300) {\n    const qrCode = URL.createObjectURL(\n        await fetch(`https://chart.googleapis.com/chart?chs=${size}x${size}&cht=qr&chl=${btcAddress}`).then(res =>\n            res.blob(),\n        ),\n    );\n\n    return qrCode;\n}\n\n/**\n * returns the detailed information of the given address via blockcypher API calls.\n * such information includes transaction references, account balances, and more\n * @param address bitcoin address\n * @param network network type\n * @param limit filters the number of transaction references\n */\nexport async function getAddressEndpoint(address: string, network: 'main' | 'test3', limit = 20) {\n    const api = `https://api.blockcypher.com/v1/btc/${network}/addrs/${address}?limit=${limit}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('error')) {\n        throw new Error(res);\n    }\n\n    const addressEndpoint: BlockCypherApi.BtcAddress = JSON.parse(res);\n    return addressEndpoint;\n}\n\n/**\n * returns the detailed information of the given transaction hash via blockcypher API calls.\n * such information includes transaction input, output, addresses, and more\n * @param txHash bitcoin transaction hash\n * @param network network type\n * @param limit filters the number of TX inputs and outputs\n */\nexport async function getTransactionEndpoint(txHash: string, network: 'main' | 'test3', limit = 20) {\n    const api = `https://api.blockcypher.com/v1/btc/${network}/txs/${txHash}?limit=${limit}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('error')) {\n        throw new Error(res);\n    }\n\n    const hashEndpoint: BlockCypherApi.BtcTxHash = JSON.parse(res);\n    return hashEndpoint;\n}\n\n/**\n * Validates the given BTC address by checking if it's in the correct format.\n * The default network is set to mainnet, byt anything else will require you to explicitly\n * pass it as the parameter.\n * @param address Bitcoin public address\n * @param network bitcoin network type (bitcoinjs-lib)\n */\nexport function validateBtcAddress(address: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.address.toOutputScript(address, network);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * Validates the given public key hex by importing it through bitcoinjs ECPair.\n * @param publicKey Bitcoin public key hex string\n * @param network bitcoin network to check from. Defaults to mainnet\n */\nexport function validatePublicKey(publicKey: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), { network: network });\n\n        const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network: network });\n        if (typeof address === 'string' && !validateBtcAddress(address, network)) {\n            throw new Error('Invalid public key');\n        }\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * returns the network type that the given address belongs to.\n * this will also validate the address before returning a value.\n * @param address bitcoin address\n */\nexport function getNetworkFromAddress(address: string) {\n    // sources: https://en.bitcoin.it/wiki/List_of_address_prefixes\n    // main net public key hash prefixes\n    const mainNetPref = ['1', '3', 'bc1'];\n    // test net public key hash prefixes\n    const testNetPref = ['m', 'n', 'tb1', '2'];\n    let addressNetwork: bitcoinjs.networks.Network;\n\n    if (new RegExp(`^(${mainNetPref.join('|')})`).test(address)) {\n        // check for regex match from the given address and array\n        addressNetwork = bitcoinjs.networks.bitcoin;\n        //return bitcoinjs.networks.bitcoin;\n    } else if (new RegExp(`^(${testNetPref.join('|')})`).test(address)) {\n        addressNetwork = bitcoinjs.networks.testnet;\n        //return bitcoinjs.networks.testnet;\n    } else {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    if (!validateBtcAddress(address, addressNetwork)) {\n        throw new Error('Invalid Bitcoin address');\n    }\n    return addressNetwork;\n}\n\n/**\n * converts satoshi to bitcoin\n * @param satoshi number of satoshi\n */\nexport function satoshiToBitcoin(satoshi: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshi\n\n    const denominator = new BigNumber(10).pow(new BigNumber(8));\n\n    // if the parameter is a number, convert it to BN\n    if (typeof satoshi === 'number' || typeof satoshi == 'string') {\n        return new BigNumber(satoshi).div(denominator);\n    }\n    return satoshi.div(denominator);\n}\n\n/**\n * converts bitcoin into satoshi\n * @param bitcoin number of bitcoin\n */\nexport function bitcoinToSatoshi(bitcoin: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshis\n    const denominator = new BigNumber('100000000');\n\n    if (typeof bitcoin === 'number' || typeof bitcoin == 'string') {\n        return new BigNumber(bitcoin).multipliedBy(denominator);\n    }\n    return bitcoin.multipliedBy(denominator);\n}\n\n/**\n * converts an compressed public key to a uncompressed public key\n * @param publicKey compressed BTC public key\n */\nexport function decompressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: false,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * compresses the given BTC public key\n * @param publicKey uncompressed BTC public key\n * @param network bitcoin network the public key will encode for\n */\nexport function compressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: true,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * returns a public key from the given address and signature\n * by default this will return an uncompressed public key.\n * this function will only work with BIP44 encoded address. BIP49 or BIP84 will return\n * an error.\n * @param address bitcoin address\n * @param signature base 64 signature for signing the plasm network message\n * @param compression should the public key be compressed or not\n */\nexport function getPublicKey(address: string, signature: string, compression?: 'compressed' | 'uncompressed') {\n    const compressedPubKey = new Message(MESSAGE).recoverPublicKey(address, signature.replace(/(\\r\\n|\\n|\\r)/gm, ''));\n    const addressNetwork = getNetworkFromAddress(address);\n    return compression === 'compressed' ? compressedPubKey : decompressPubKey(compressedPubKey, addressNetwork);\n}\n\n/**\n * used for CHECKSEQUENCEVERIFY relative time lock.\n * this converts days to bip68 encoded block number.\n * @param days number of days to be converted to sequence number\n */\nexport function daysToBlockSequence(days: number) {\n    // verify lock days value\n    if (!Number.isInteger(days) || !Number.isFinite(days)) {\n        throw new Error('Lock days must be a valid integer, but received: ' + days);\n    }\n    const blocksPerDay = 144; //10 min per block. day = 6 * 24\n    const blockSequence = bip68.encode({ blocks: days * blocksPerDay });\n    if (blockSequence > 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    return blockSequence;\n}\n\n/**\n * create a bitcoin lock script buffer with the given public key.\n * this will lock the token for the given number of block sequence.\n * if the given public key is not compressed, this function will compress it.\n * @param publicKeyHex compressed BTC public key in hex string\n * @param blockSequence bip68 encoded block sequence\n * @param network bitcoin network the public key belongs to\n */\nexport function btcLockScript(publicKeyHex: string, blockSequence: number, network: bitcoinjs.Network): Buffer {\n    // verify block sequence value\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be a negative number');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (blockSequence > 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    // verify public key by converting to an address\n    if (!validatePublicKey(publicKeyHex, network)) {\n        throw new Error('Invalid public key');\n    }\n\n    const pubKeyBuffer = Buffer.from(compressPubKey(publicKeyHex, network), 'hex');\n\n    return bitcoinjs.script.fromASM(\n        `\n        ${bitcoinjs.script.number.encode(blockSequence).toString('hex')}\n        OP_CHECKSEQUENCEVERIFY\n        OP_DROP\n        ${pubKeyBuffer.toString('hex')}\n        OP_CHECKSIG\n        `\n            .trim()\n            .replace(/\\s+/g, ' '),\n    );\n}\n\n/**\n * creates a P2SH instance that locks the sent token for the given duration.\n * the locked tokens can only be claimed by the provided public key\n * @param lockDays the lock duration in days\n * @param publicKey public key of the locker. This can be both compressed or uncompressed\n * @param network bitcoin network the script will generate for\n */\nexport function getLockP2SH(lockDays: number, publicKey: string, network: bitcoinjs.Network) {\n    if (lockDays > 300 || lockDays < 30) {\n        throw new Error('Lock duration must be between 30 days to 300 days');\n    }\n\n    return bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDays), network),\n        },\n    });\n}\n\n/**\n * creates a P2SH instance that locks the sent token for the given duration for Dusty network.\n * the locked tokens can only be claimed by the provided public key.\n * Unlike the mainnet lockdrop, Dusty will have a shorter lock period\n * @param lockDays the lock duration in days\n * @param publicKey public key of the locker. This can be both compressed or uncompressed\n * @param network bitcoin network the script will generate for\n */\nexport function getDustyLockP2SH(lockDays: number, publicKey: string, network: bitcoinjs.Network) {\n    return bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDays), network),\n        },\n    });\n}\n\n/**\n * creates a lock redeem UTXO\n * @param signer the signer for signing the transaction hash\n * @param network network type (bitcoinjs-lib)\n * @param lockTx the transaction that locks the value to P2SH address\n * @param lockScript the lock script (P2SH)\n * @param blockSequence block sequence to lock the funds, should be the same value used in the lock script\n * @param recipient recipient for the transaction output\n * @param fee transaction fee for the lock transaction\n */\nexport function btcUnlockTx(\n    signer: Signer,\n    network: Network,\n    lockTx: UnspentTx,\n    lockScript: Buffer,\n    blockSequence: number,\n    recipientAddress: string,\n    fee: number, // satoshis\n): Transaction {\n    function idToHash(txid: string): Buffer {\n        return Buffer.from(txid, 'hex').reverse();\n    }\n    function toOutputScript(address: string): Buffer {\n        return bitcoinjs.address.toOutputScript(address, network);\n    }\n\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be less than zeo');\n    }\n    if (fee < 0) {\n        throw new Error('Transaction fee cannot be less than zero');\n    }\n\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (!Number.isInteger(fee) || !Number.isFinite(fee)) {\n        throw new Error('Fee must be a valid integer, but received: ' + fee);\n    }\n\n    //const sequence = bip68.encode({ blocks: lockBlocks });\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(idToHash(lockTx.txId), lockTx.vout, blockSequence);\n    tx.addOutput(toOutputScript(recipientAddress), lockTx.value - fee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType);\n    const signature = bitcoinjs.script.signature.encode(signer.sign(signatureHash), hashType);\n\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network,\n        redeem: {\n            network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n    if (redeemScriptSig instanceof Buffer) {\n        tx.setInputScript(0, redeemScriptSig);\n    } else {\n        throw new Error('Transaction is invalid');\n    }\n\n    return tx;\n}\n","module.exports = __webpack_public_path__ + \"static/media/plasm-icon.cee6d05f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dusty-icon.acfa536a.svg\";","module.exports = __webpack_public_path__ + \"static/media/home-outline.5d4dea4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-twitter.27ff8f62.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-discord.fee2b0c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-telegram.ed1ca736.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-github.01fb3515.svg\";","var map = {\n\t\"./ion-action-sheet-controller_8.entry.js\": [\n\t\t2783,\n\t\t43\n\t],\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t2784,\n\t\t44\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t2785,\n\t\t45\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t2786,\n\t\t24\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t2787,\n\t\t25\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t2788,\n\t\t11\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t2789,\n\t\t12\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t2790,\n\t\t46\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t2791,\n\t\t47\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t2792,\n\t\t48\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t2793,\n\t\t49\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t2794,\n\t\t81\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t2795,\n\t\t82\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t2796,\n\t\t50\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t2797,\n\t\t51\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t2798,\n\t\t52\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t2799,\n\t\t53\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t2800,\n\t\t54\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t2801,\n\t\t55\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t2802,\n\t\t56\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t2803,\n\t\t57\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t2804,\n\t\t83\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t2805,\n\t\t20\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t2806,\n\t\t21\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t2807,\n\t\t58\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t2808,\n\t\t59\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t2809,\n\t\t84\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t2810,\n\t\t39\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t2811,\n\t\t40\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t2812,\n\t\t60\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t2813,\n\t\t61\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t2814,\n\t\t62\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t2815,\n\t\t63\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t2816,\n\t\t64\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t2817,\n\t\t65\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t2818,\n\t\t26\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t2819,\n\t\t27\n\t],\n\t\"./ion-menu_4-ios.entry.js\": [\n\t\t2820,\n\t\t18\n\t],\n\t\"./ion-menu_4-md.entry.js\": [\n\t\t2821,\n\t\t19\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t2822,\n\t\t14\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t2823,\n\t\t15\n\t],\n\t\"./ion-nav_5.entry.js\": [\n\t\t2824,\n\t\t13\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t2825,\n\t\t16\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t2826,\n\t\t17\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t2827,\n\t\t66\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t2828,\n\t\t67\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t2829,\n\t\t32\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t2830,\n\t\t33\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t2831,\n\t\t68\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t2832,\n\t\t69\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t2833,\n\t\t41\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t2834,\n\t\t42\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t2835,\n\t\t37\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t2836,\n\t\t38\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t2837,\n\t\t85\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t2838,\n\t\t70\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t2839,\n\t\t28\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t2840,\n\t\t29\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t2841,\n\t\t71\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t2842,\n\t\t72\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t2843,\n\t\t34\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t2844,\n\t\t35\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t2845,\n\t\t86\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t2846,\n\t\t87\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t2847,\n\t\t73\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t2848,\n\t\t88\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t2849,\n\t\t89\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t2850,\n\t\t74\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t2851,\n\t\t75\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t2852,\n\t\t36\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t2853,\n\t\t76\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t2854,\n\t\t77\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t2855,\n\t\t78\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t2856,\n\t\t30\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t2857,\n\t\t31\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t2858,\n\t\t22\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t2859,\n\t\t23\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t2860,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1234;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t2864,\n\t\t98\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1236;\nmodule.exports = webpackAsyncContext;","module.exports = __webpack_public_path__ + \"static/media/ethereum_logo.802c6eac.svg\";","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { IonHeader, IonButtons, IonMenuButton, IonToolbar, IonTitle } from '@ionic/react';\nimport plasmLogo from '../resources/plasm-logo.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        grow: {\n            flexGrow: 1,\n        },\n        navbar: {\n            backgroundColor: 'black',\n        },\n        logoIcon: {\n            margin: theme.spacing(1),\n            maxHeight: 45,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        title: {\n            color: 'white',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        sectionDesktop: {\n            display: 'none',\n            [theme.breakpoints.up('md')]: {\n                display: 'flex',\n            },\n        },\n        sectionMobile: {\n            display: 'flex',\n            [theme.breakpoints.up('md')]: {\n                display: 'none',\n            },\n        },\n        listItem: {\n            width: '100%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            fontWeight: theme.typography.fontWeightRegular,\n        },\n    }),\n);\n\nexport default function Navbar() {\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonHeader className={classes.navbar}>\n                <IonToolbar color=\"black\">\n                    <IonButtons slot=\"start\">\n                        <IonMenuButton className={classes.title} />\n                        <img className={classes.logoIcon} src={plasmLogo} alt=\"\" />\n                    </IonButtons>\n                    <IonTitle className={classes.title}>Plasm Network</IonTitle>\n                </IonToolbar>\n            </IonHeader>\n        </>\n    );\n}\n","export const Links = {\n    docs: 'https://docs.plasmnet.io',\n    blog: 'https://medium.com/stake-technologies',\n    twitter: 'https://twitter.com/Plasm_Network',\n    github: 'https://github.com/staketechnologies/Plasm',\n    telegram: 'https://t.me/PlasmOfficial',\n    discord: 'https://discordapp.com/invite/Dnfn5eT',\n    email: 'info@stake.co.jp',\n    home: 'https://stake.co.jp/',\n    plasmHome: 'https://plasmnet.io/',\n};\n\nexport const SponsorLinks = {\n    cryptoEconomicsLab: 'https://www.cryptoeconomicslab.com/',\n    parityTechnologies: 'https://www.parity.io/',\n    web3Foundation: 'https://web3.foundation/',\n    longhash: 'https://longhash.co.jp/en/',\n    universityOfTokyo: 'https://www.u-tokyo.ac.jp/en/index.html',\n    connect: 'https://www.blockchain.t.u-tokyo.ac.jp/',\n    parityBuilders: 'https://builders.parity.io/',\n    acala: 'https://acala.network/',\n};\n\nexport const BlogLinks = {\n    lockdropIntroduction: 'https://medium.com/stake-technologies/plasm-lockdrop-introduction-54614592a13',\n};\n\nexport const AppLinks = {\n    plasmnetIo: 'https://apps.plasmnet.io/',\n    polkadotNetwork: 'https://telemetry.polkadot.io/#list/Plasm%20Testnet%20v3',\n    joinLockdrop: 'https://lockdrop.plasmnet.io',\n    inkPlayground: 'https://ink-playground.com/',\n};\n\nexport const Whitepaper = [\n    {\n        description: 'English',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/en.pdf',\n        icon: `sticky note outline`,\n    },\n    {\n        description: 'Japanese',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/jp.pdf',\n        icon: `sticky note outline`,\n    },\n];\n\nexport const Community = [\n    {\n        description: 'Discord',\n        link: Links.discord,\n        icon: 'discord',\n    },\n    {\n        description: 'Telegram',\n        link: Links.telegram,\n        icon: 'telegram',\n    },\n];\n\nexport const Company = [\n    {\n        description: 'Home',\n        link: Links.home,\n    },\n    {\n        description: 'Contact us',\n        link: `mailto:${Links.email}`,\n    },\n];\n\nexport const Products = [\n    {\n        description: 'Plasm',\n        link: 'https://github.com/staketechnologies/Plasm',\n    },\n    {\n        description: 'Plasm Portal Sites',\n        link: 'https://github.com/staketechnologies/apps',\n    },\n    {\n        description: 'Plasm Lockdrop',\n        link: 'https://github.com/staketechnologies/lockdrop-ui',\n    },\n    {\n        description: 'Plasm documentations',\n        link: 'https://github.com/staketechnologies/plasmdocs',\n    },\n    {\n        description: 'Plasm homepage',\n        link: 'https://github.com/staketechnologies/plasmnet.io',\n    },\n];\n\nexport const Collaboration = [\n    {\n        description: 'Substrate Builders Program',\n        link: 'https://builders.parity.io/',\n    },\n    {\n        description: 'Web3 foundation grants program',\n        link: 'https://web3.foundation/',\n    },\n];\n\nexport const Blogs = [\n    {\n        description: 'Medium',\n        link: Links.blog,\n    },\n];\n\nexport const Discussions = [\n    {\n        link: Links.discord,\n        className: 'discord',\n    },\n    {\n        link: Links.telegram,\n        className: 'telegram',\n    },\n    {\n        link: Links.twitter,\n        className: 'twitter',\n    },\n    {\n        link: Links.github,\n        className: 'github',\n    },\n];\n","export const ThemeColors = {\n    darkGrey: '#383838',\n    lightGrey: '#999999',\n    white: '#ffffff',\n    black: '#000000',\n    darkBlue: '#2C3E50',\n    orange: '#FF5838',\n    darkRed: '#5c0f0f',\n    blue: '#4C8DFF',\n    lightBlue: '#56ccf2',\n};\n\nexport const ThemeFontFamily = {\n    logo: 'sans',\n    paragraph: 'not sans',\n};\n\nconst colors = {\n    transparent: 'rgba(0, 0, 0, 0)',\n    footerTransparent: 'rgba(0, 0, 0, 0.12)',\n    navy: '#1d417f',\n    ceruleanBlue: '#102e83',\n    blue: '#2179ee',\n    lightBlue: '#56ccf2',\n    periwinkle: '#D4D3E9',\n    teal: '#00FFD1',\n    green: '#28D24E',\n    crimson: '#DC143C',\n    red: '#D22828',\n    lightRed: '#ED0257',\n    coral: '#ff6759',\n    pink: '#FF17E8',\n    gold: '#f0b95b',\n    yellow: '#FFC700',\n    purple: '#7537ef',\n    lightPurple: '#56408B',\n    darkPurple: 'rgba(10, 7, 82, 0.75)',\n    softPurple: '#9795C5',\n    white: '#ffffff',\n    creamWhite: '#f4f5f7',\n    black: '#000000',\n    grey: '#333333',\n    lightGrey: 'grey',\n    softGrey: '#1D1B4D',\n    slaty: '#797992',\n    lavender: '#e5e5f8',\n    rat: '#cecddc',\n};\n\nconst secondaryColors = {\n    grey10: '#f3f4f8',\n    grey20: '#e1e5eb',\n    grey30: '#c2c6cc',\n    grey40: '#9ea2a8',\n    grey50: '#686c73',\n    grey60: '#30363d',\n    blue10: '#ade7ff',\n    blue20: '#61bcff',\n    blue30: '#2179ee',\n    blue40: '#1f4ab4',\n    blue50: '#1d2064',\n    green10: '#b5ffcb',\n    green20: '#5dffa3',\n    green30: '#00cc9a',\n    green40: '#219a8a',\n    green50: '#183f51',\n    purple10: '#dec7ff',\n    purple20: '#a673ff',\n    purple30: '#7537ef',\n    purple40: '#4e23b6',\n    purple50: '#2d1b64',\n    coral10: '#ffc6b3',\n    coral20: '#ff8e75',\n    coral30: '#ff6759',\n    coral40: '#eb312a',\n    coral50: '#7b1e30',\n    gold10: '#ffedc2',\n    gold20: '#ffda8b',\n    gold30: '#f0b95b',\n    gold40: '#e5a229',\n    gold50: '#6a4a24',\n};\n\nconst breakpoints = ['31.25em', '43.75em', '46.875em'];\nconst fontSizes = ['1.2rem', '1.4rem', '1.6rem', '1.8rem', '2.4rem', '2.8rem', '3.2rem', '4.0rem', '4.8rem', '6.4rem'];\nconst space = ['0', '.4rem', '.8rem', '1.2rem', '1.6rem', '2.0rem', '3.2rem', '4.8rem', '6.4rem', '9.6rem'];\n\nconst font =\n    'Work Sans, sans-serif, -apple-system, BlinkMacSystemFont,\"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\"Droid Sans\", \"Helvetica Neue\";-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n\nexport interface StyleClosetTheme {\n    breakpoints: string[];\n    fontSizes: string[];\n    space: string[];\n    colors: { [key in keyof typeof colors]: string };\n    secondaryColors: { [key in keyof typeof secondaryColors]: string };\n    font: string;\n}\n\nexport const theme: StyleClosetTheme = {\n    breakpoints,\n    fontSizes,\n    space,\n    colors,\n    secondaryColors,\n    font,\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport { Company, Products, Collaboration, Blogs, Community } from '../data/links';\nimport Divider from '@material-ui/core/Divider';\nimport { ThemeColors } from '../theme/themes';\n\nfunction Copyright() {\n    return (\n        <>\n            <Typography variant=\"body2\">\n                {'© 2019-' + new Date().getFullYear() + ' '}\n                <Link color=\"inherit\" href=\"https://stake.co.jp/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                    Stake Technologies, Inc.\n                </Link>{' '}\n                {'All Rights Reserved.'}\n            </Typography>\n        </>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(10),\n    },\n    socialIcon: {\n        color: 'white',\n        fontSize: 60,\n        paddingLeft: theme.spacing(1),\n    },\n    footer: {\n        padding: theme.spacing(2),\n        backgroundColor: 'white',\n        color: 'black',\n    },\n    footerHeader: {\n        color: ThemeColors.darkBlue,\n    },\n    siteMap: {},\n}));\n\nexport default function StickyFooter() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <footer className={classes.footer}>\n                <Container maxWidth=\"lg\">\n                    <Grid container spacing={4} justify=\"center\" className={classes.siteMap}>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Company\n                            </Typography>\n                            <Divider />\n\n                            <List component=\"nav\">\n                                {Company.map(company => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={company.link}\n                                        key={company.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={company.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Repositories\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Products.map(product => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={product.link}\n                                        key={product.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={product.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Collaboration\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Collaboration.map(collaboration => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={collaboration.link}\n                                        key={collaboration.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={collaboration.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Blog\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Blogs.map(blog => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={blog.link}\n                                        key={blog.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={blog.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Community\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Community.map(community => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={community.link}\n                                        key={community.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={community.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Container>\n\n                <Container maxWidth=\"sm\">\n                    <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                        <Copyright />\n                    </Typography>\n                </Container>\n            </footer>\n        </div>\n    );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { ThemeColors } from '../theme/themes';\n\ninterface Props {\n    maxWidth: false | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | undefined;\n}\n\nconst SectionCard: React.FC<Props> = ({ maxWidth, children }) => {\n    const useStyles = makeStyles(theme => ({\n        paper: {\n            backgroundColor: ThemeColors.white,\n            padding: theme.spacing(4, 0, 4),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth={maxWidth}>\n                <Paper elevation={5} className={classes.paper}>\n                    {children}\n                </Paper>\n            </Container>\n        </>\n    );\n};\n\nexport default SectionCard;\n","import { OptionItem, LockMenu } from '../types/LockdropModels';\nimport moment from 'moment';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport Lockdrop from '../contracts/Lockdrop.json';\n\n/**\n * the time zone is set to UTC as default\n * lockdrop starts from 1584230400 epoch time\n */\nexport const firstLockdropStart = moment.utc('2020-03-15 00:00:00');\n\n/**\n * the 1st lockdrop will last for 30 days\n * lockdrop ends in 1586822400\n */\nexport const firstLockdropEnd = moment.utc('2020-04-14 00:00:00');\n\n// todo: the second lockdrop dates are just a temporary value\nexport const secondLockdropStart = moment.utc('2020-08-10 00:00:00');\n\nexport const secondLockdropEnd = moment.utc('2020-09-10 00:00:00');\n\n//todo: add other contract addresses when ready\nexport const lockdropContracts = {\n    firstLock: {\n        main: '0x458DaBf1Eff8fCdfbF0896A6Bd1F457c01E2FfD6',\n        ropsten: '0xEEd84A89675342fB04faFE06F7BB176fE35Cb168',\n        private: Lockdrop.networks[5777].address,\n    },\n    secondLock: {\n        main: '0x',\n        ropsten: '0x69e7eb3ab94a10e4f408d842b287c70aa0d11649',\n        private: Lockdrop.networks[5777].address,\n    },\n    thirdLock: { main: '0x', ropsten: '0x', private: Lockdrop.networks[5777].address },\n};\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n    { label: '1000 Days', value: 1000, rate: 1600 },\n];\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n    { label: '100 Days', value: 100, rate: 1600 },\n];\n\n/**\n * BTC lockdrop does not support 1000 days lock due to CSV lock scheme\n */\nexport const btcDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n];\n\n/**\n * BTC lockdrop for Dusty network. The lock days are much shorter\n */\nexport const btcDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n];\n\n// /**\n//  * the token increase rate for lock durations\n//  */\n// export const rates = [\n//     { key: 30, value: 24 },\n//     { key: 100, value: 100 },\n//     { key: 300, value: 360 },\n//     { key: 1000, value: 1600 },\n// ];\n\n// /**\n//  * the token increase rate for Dusty lock durations\n//  */\n// export const dustyRates = [\n//     { key: 3, value: 24 },\n//     { key: 10, value: 100 },\n//     { key: 30, value: 360 },\n//     { key: 100, value: 1600 },\n// ];\n\nexport const firstLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n\nexport const secondLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        //uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: secondLockdropStart,\n        endDate: secondLockdropEnd,\n        disabled: true,\n    },\n    {\n        title: 'BTC Lock',\n        //uri: '/lock-form/first',\n        icon: btcLogo,\n        startDate: secondLockdropStart,\n        endDate: secondLockdropEnd,\n        disabled: true,\n    },\n];\n\nexport const dustyLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/dusty-eth',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n    {\n        title: 'BTC Lock',\n        // uri: '/lock-form/dusty-btc',\n        icon: btcLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n        disabled: true,\n    },\n];\n","import React from 'react';\nimport {\n    IonContent,\n    IonPage,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonItem,\n    IonIcon,\n    IonLabel,\n    IonButton,\n    IonRouterLink,\n} from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport lockdropLogoA from '../resources/ld_logo_a.png';\nimport lockdropLogoB from '../resources/ld_logo_b.png';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport { makeStyles } from '@material-ui/core';\nimport { firstLockdropStart, firstLockdropEnd } from '../data/lockInfo';\n\n// randomize the lockdrop logo\n// this is for AB testing the logo\nconst lockdropLogo = Math.floor(Math.random() * 10) > 5 ? lockdropLogoA : lockdropLogoB;\n\nconst useStyles = makeStyles(() => ({\n    logoImg: {\n        display: 'block',\n        maxWidth: '100%',\n        width: '20rem',\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        //maxHeight: '500',\n    },\n}));\n\nexport const LandingPage: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <IonPage>\n            <Navbar />\n            <IonContent>\n                <SectionCard maxWidth=\"lg\">\n                    <img src={lockdropLogo} alt=\"\" className={classes.logoImg} />\n                    <IonCardHeader>\n                        <IonCardSubtitle>Plasm Network Lockdrop Web Application</IonCardSubtitle>\n                        <IonCardTitle>Plasm Network Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        Lockdrop is a new token distribution mechanism that emphasizes on low risk and fairness to its\n                        users. For more details, checkout{' '}\n                        <a\n                            color=\"inherit\"\n                            href=\"https://medium.com/stake-technologies/what-is-and-how-to-join-the-plasm-network-lockdrop-the-ultimate-guide-e3f4bdec83de\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            this\n                        </a>{' '}\n                        article,\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>First Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/first\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n\n                    <IonCardContent>\n                        Lock Start: {firstLockdropStart.format('YYYY-MM-DD hh:mm').toString()} UTC\n                        <br />\n                        Lock End: {firstLockdropEnd.format('YYYY-MM-DD hh:mm').toString()} UTC\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Second Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Plasm BTC Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem>\n                    <IonCardContent>\n                        Lock Start: TBA\n                        <br />\n                        Lock End: TBA\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Dusty Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Dusty ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-eth\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                    <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Dusty BTC Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\" disabled>\n                            <IonRouterLink routerLink=\"/lock-form/dusty-btc\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                </SectionCard>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\n\nexport default LandingPage;\n","import { IonSelect, IonSelectOption } from '@ionic/react';\nimport React from 'react';\nimport { OptionData } from '../types/LockdropModels';\n\n// react function component for making dropdown with the given items\nexport const DropdownOption = (props: OptionData) => {\n    const items = props.dataSets.map(x => {\n        return (\n            <IonSelectOption className=\"dropdown-item\" key={props.dataSets.indexOf(x)} value={x.value}>\n                {x.label}\n            </IonSelectOption>\n        );\n    });\n\n    return (\n        <IonSelect interface=\"popover\" onIonChange={e => props.onChoose(e)}>\n            {items}\n        </IonSelect>\n    );\n};\n","import { IonLabel, IonButton, IonItem, IonInput, IonCard, IonCardContent, IonChip } from '@ionic/react';\nimport React, { useState } from 'react';\nimport { LockInput, OptionItem } from '../../types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport { DropdownOption } from '../DropdownOption';\nimport Container from '@material-ui/core/Container';\nimport BN from 'bn.js';\nimport { Typography } from '@material-ui/core';\nimport quantstampLogo from '../../resources/quantstamp-logo.png';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport parse from 'html-react-parser';\nimport { ethDurations, ethDustyDurations } from '../../data/lockInfo';\n\ntype InputProps = {\n    token: string;\n    onSubmit: Function;\n    description?: string;\n    dusty?: boolean;\n};\n// the main component function\nconst LockdropForm = ({ token, onSubmit, description, dusty }: InputProps) => {\n    // states used in this component\n    const [lockAmount, setAmount] = useState<BN>(new BN(0));\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [affAccount, setAff] = useState('');\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            formRoot: {\n                padding: theme.spacing(4, 3, 0),\n            },\n            txButton: {\n                margin: theme.spacing(3),\n            },\n            formLabel: {\n                margin: theme.spacing(2),\n            },\n            quantLogo: {\n                marginRight: theme.spacing(2),\n                maxHeight: 20,\n                height: '100%',\n                verticalAlign: 'middle',\n            },\n            textBox: {\n                marginLeft: 'auto',\n                marginRight: 'auto',\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    // the submit button function\n    function handleSubmit() {\n        const inputs: LockInput = {\n            duration: lockDuration.value,\n            amount: lockAmount,\n            affiliation: affAccount,\n            rate: lockDuration.rate,\n        };\n        onSubmit(inputs);\n    }\n\n    // main render JSX\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.formRoot}>\n                    <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                        {dusty ? 'Dusty Plasm' : 'Plasm Main'} Network Ethereum Lockdrop\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                        Audited by{' '}\n                        <Link\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <img src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                        </Link>\n                    </Typography>\n                    {/* <IonLabel className={classes.formLabel}>About</IonLabel> */}\n                    {description ? (\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>{parse(description)}</IonCardContent>\n                        </IonCard>\n                    ) : null}\n\n                    <IonItem>\n                        <IonLabel position=\"floating\">Number of {token}</IonLabel>\n                        <IonInput\n                            placeholder={'ex: 0.64646 ' + token}\n                            onIonInput={e => setAmount(((e.target as HTMLInputElement).value as unknown) as BN)}\n                        ></IonInput>\n                    </IonItem>\n                    <IonLabel className={classes.formLabel}>Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={dusty ? ethDustyDurations : ethDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                const durationSet = dusty ? ethDustyDurations : ethDurations;\n                                setDuration(\n                                    durationSet.filter(i => i.value === ((e.target.value as unknown) as number))[0],\n                                );\n                            }}\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>\n                                If you have a friend who is also participating in the lockdrop and is part of our\n                                affiliation program, please input the address. Both parties will be able to receive a\n                                bonus rate of 1% of what the friend is receiving. Checkout this{' '}\n                                <a href=\"https://medium.com/stake-technologies/lockdrop-with-friends-the-plasm-network-affiliation-program-b385c1cd800d\">\n                                    article\n                                </a>{' '}\n                                for details.\n                            </IonCardContent>\n                        </IonCard>\n                        <IonLabel position=\"floating\">Affiliation (optional)</IonLabel>\n\n                        <IonInput\n                            placeholder={'ex: 0x324632...'}\n                            onIonInput={e => setAff((e.target as HTMLInputElement).value)}\n                        ></IonInput>\n                    </IonItem>\n                    <Container>\n                        <IonButton expand=\"block\" onClick={() => handleSubmit()} className={classes.txButton}>\n                            Submit Transaction\n                        </IonButton>\n                    </Container>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockdropForm;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Web3 from 'web3';\n\nasync function web3Listener() {\n    // Modern dapp browsers...\n    if ((window as any).ethereum) {\n        const web3 = new Web3((window as any).ethereum);\n        try {\n            // Request account access if needed\n            await (window as any).ethereum.enable();\n            console.log('Dapp browser detected');\n            // Accounts now exposed\n            return web3;\n        } catch (error) {\n            return error;\n        }\n    }\n    // Legacy dapp browsers...\n    else if ((window as any).web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = (window as any).web3;\n        console.log('Injected web3 detected.');\n        return web3;\n    }\n    // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        return web3;\n    }\n}\n\n// const getWeb3 = () =>\n//     new Promise((resolve, reject) => {\n//         // Wait for loading completion to avoid race conditions with web3 injection timing.\n//         window.addEventListener('load', async () => {\n//             // Modern dapp browsers...\n//             if ((window as any).ethereum) {\n//                 const web3 = new Web3((window as any).ethereum);\n//                 try {\n//                     // Request account access if needed\n//                     await (window as any).ethereum.enable();\n//                     console.log('Dapp browser detected');\n//                     // Accounts now exposed\n//                     resolve(web3);\n//                 } catch (error) {\n//                     reject(error);\n//                 }\n//             }\n//             // Legacy dapp browsers...\n//             else if ((window as any).web3) {\n//                 // Use Mist/MetaMask's provider.\n//                 const web3 = (window as any).web3;\n//                 console.log('Injected web3 detected.');\n//                 resolve(web3);\n//             }\n//             // Fallback to localhost; use dev console port by default...\n//             else {\n//                 const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n//                 const web3 = new Web3(provider);\n//                 console.log('No web3 instance injected, using Local web3.');\n//                 resolve(web3);\n//             }\n//         });\n//     });\n\nexport const removeWeb3Event = () => {\n    new Promise((resolve, reject) => {\n        try {\n            window.removeEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // check if the event was already fired\n        if (document.readyState === 'complete') {\n            // reload page to reset the event\n            window.location.reload();\n        }\n\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        try {\n            window.addEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n\nexport default getWeb3;\n","// the default introducer address when none is provided by the user\nexport const defaultAddress = '0x0000000000000000000000000000000000000000';\n\nexport const affiliationRate = 0.01;\n\nconst firstEthIntroducer = [\n    '0xd8de1f6764e442b8763d313722e9eaee3779707e',\n    '0x1d32750e8a03443f008236f7c344fc84821cf690',\n    '0xa5a6d551ab33c3920848844b3fe3b27591df8f10',\n    '0xd8068f813c45c88cebb02cbc0f91f95626ec9a34',\n    '0x45ee0a0db0e775aecbebb300ccfc6486690b3287',\n    '0xd419d53817e1daa7b2f72e51707774f3ff0a54a3',\n    '0x1080355c93a1b4c0dd3c340eed4f7e514c583077',\n    '0x0013aa2fb5ec916660b38f1d53d4fc9bf8ef8a84',\n    '0x78ce6849d00c2f22aec93d29144fc68366cf0c62',\n    '0x60dc4b3d8e8d2c5449186270f385a56a21bb82c3',\n    '0x380566185c87ab93ca4edd474cf6998b5fc4153e',\n    '0x6a61dc52015945dfc6cd0c42f94a722d5022e3d1',\n    '0x520e74218a9fd5563855f11d204810281a833e0f',\n    '0x27c72e4bd23c910218d8f06c4a1742e06657c874',\n    '0xd307ff28710b7a4587200c5ba4c67648c1f24045',\n    '0x9498db340a3ecab7bb0973ee36e95e58c8e58a41',\n    '0xe552821ee85284249c71d4abfc4437992ed2fb93',\n    '0xc78a748dccbd806ae782eb3b8590ae7d162e5a90',\n    '0x20edd77ea8582f4a2400d3c0d53154a74a1ca887',\n    '0xeef2e4a5f6a01d5fb89f38211fb4e6a8702d33b6',\n    '0x531c2607862de00604f600cff6be9cb312467570',\n    '0xf22b286fda7369255376742f360ffcee4e1fbd42',\n    '0xb35e0bfec9facd8f2dcc0e43e68350d5e7baa82f',\n    '0x7b4d4ba1070c4562c568fed6280c800a68fa5427',\n    '0x81042f7f99a86d3981308e72feb36bd791c31920',\n    '0xb98df9f7cdc3a983081cefa1cd94aed4e936f1a9',\n    '0x5b6c1f8838b9abf16c0383b7e4f3c5a750707af2',\n    '0x711b3ca2cc9d5a827f83d5ceafcb0925f2fb82b3',\n    '0x8e7fcc7a17f00f0f5f85f2d5964a581d0813c8a6',\n    '0x6b5e2758bdb9ed798acbfd64104c1deaf09cd24b',\n    '0x55763d6db54736084c1b8d010aa1d99f0dc6d07c',\n    '0xfadf736b86f09f2d07d2b655cfc848fe215140d4',\n    '0x9f4f9e15a4a963a9a3885979cc64b326dcaa18a8',\n    '0x0def9b4811e4c4e9da5acf82d421c97b5e9c152f',\n];\n\nconst secondEthIntroducer = ['add Ethereum addresses'];\n\nconst secondBtcIntroducer = ['add Bitcoin addresses'];\n\nexport const validEthAddressList = [...firstEthIntroducer, ...secondEthIntroducer, defaultAddress];\n\nexport const validBtcAddressList = [...secondBtcIntroducer];\n\n/**\n * Checks if the given introducer address is listed as a valid introducer for the lockdrop\n * @param introducer a bitcoin or ethereum address\n */\nexport function isValidIntroducerAddress(introducer: string) {\n    return (\n        validEthAddressList.includes(introducer.toLowerCase()) || validBtcAddressList.includes(introducer.toLowerCase())\n    );\n}\n","/* eslint-disable @typescript-eslint/camelcase */\nimport BigNumber from 'bignumber.js';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { Hash, H256 } from '@polkadot/types/interfaces';\nimport * as polkadotUtil from '@polkadot/util-crypto';\nimport { u8aConcat } from '@polkadot/util';\nimport { Struct, TypeRegistry, u64, u128, U8aFixed, u8 } from '@polkadot/types';\nimport * as plasmDefinitions from 'plasm-types/interfaces/definitions';\nimport { LockdropType, Claim, Lockdrop } from 'src/types/LockdropModels';\n\n/**\n * Plasm network enum\n */\nexport enum PlasmNetwork {\n    Local,\n    Dusty,\n    Main,\n}\n\n/**\n * converts the plasm network minimum denominator to PLM\n * @param femto minimum token value\n */\nexport function femtoToPlm(femto: BigNumber) {\n    if (femto.isLessThanOrEqualTo(new BigNumber(0))) {\n        return new BigNumber(0);\n    }\n    const plmDenominator = new BigNumber(10).pow(new BigNumber(15));\n    return femto.dividedBy(plmDenominator);\n}\n\n/**\n * used for adding new polkadot-js api types for communicating with plasm node\n */\nexport const plasmTypeReg = new TypeRegistry();\n\n/**\n * establishes a connection between the client and the plasm node with the given endpoint.\n * this will default to the main net node\n * @param network end point for the client to connect to\n */\nexport async function createPlasmInstance(network?: PlasmNetwork) {\n    let endpoint = '';\n    const types = Object.values(plasmDefinitions).reduce((res, { types }): object => ({ ...res, ...types }), {});\n\n    switch (network) {\n        case PlasmNetwork.Local:\n            endpoint = 'ws://127.0.0.1:9944';\n            break;\n        case PlasmNetwork.Dusty:\n            endpoint = 'wss://rpc.dusty.plasmnet.io/';\n            break;\n        case PlasmNetwork.Main: // main net endpoint will be the default value\n        default:\n            endpoint = 'wss://rpc.plasmnet.io';\n            break;\n    }\n\n    const wsProvider = new WsProvider(endpoint);\n\n    return await ApiPromise.create({\n        provider: wsProvider,\n        types: {\n            ...types,\n            // aliases that don't do well as part of interfaces\n            'voting::VoteType': 'VoteType',\n            'voting::TallyType': 'TallyType',\n            // chain-specific overrides\n            Address: 'GenericAddress',\n            Keys: 'SessionKeys4',\n            StakingLedger: 'StakingLedgerTo223',\n            Votes: 'VotesTo230',\n            ReferendumInfo: 'ReferendumInfoTo239',\n        },\n        // override duplicate type name\n        typesAlias: { voting: { Tally: 'VotingTally' } },\n    });\n}\n\n/**\n * convert the given lock duration in to PLM issue bonus rate\n * @param duration token lock duration\n */\nexport function lockDurationToRate(duration: number) {\n    if (duration < 30) {\n        return 0;\n    } else if (duration < 100) {\n        return 24;\n    } else if (duration < 300) {\n        return 100;\n    } else if (duration < 1000) {\n        return 360;\n    } else {\n        return 1600;\n    }\n}\n\n/**\n * Create a lock parameter object with the given lock information.\n * This is used for the real-time lockdrop module in Plasm for both ETH and BTC locks\n * @param network the lockdrop network type\n * @param transactionHash the lock transaction hash in hex string\n * @param publicKey locker's public key in hex string\n * @param duration lock duration in Unix epoch (seconds)\n * @param value lock value in the minimum denominator (Wei or Satoshi)\n */\nexport function createLockParam(\n    network: LockdropType,\n    transactionHash: string,\n    publicKey: string,\n    duration: string,\n    value: string,\n) {\n    const lockParam = new Struct(\n        plasmTypeReg,\n        {\n            type: u8,\n            transactionHash: 'H256',\n            publicKey: U8aFixed, // [u8; 33]\n            duration: u64,\n            value: u128,\n        },\n        {\n            type: network, // enum is converted to number\n            transactionHash: transactionHash,\n            publicKey: new U8aFixed(plasmTypeReg, publicKey, 264),\n            duration: new u64(plasmTypeReg, duration),\n            value: new u128(plasmTypeReg, value),\n        },\n    );\n\n    return lockParam;\n}\n\n/**\n * Returns the claim ID that is used to look up lockdrop claim requests\n * @param lockdropParam Lockdrop claim request parameter\n */\nexport function getClaimId(lockdropParam: Struct) {\n    return lockdropParam.hash;\n}\n\n/**\n * submits a real-time lockdrop claim request to plasm node and returns the transaction hash.\n * this is a unsigned transaction that is only authenticated by a simple PoW to prevent spamming\n * @param api plasm node api instance (polkadot-js api)\n * @param lockParam lockdrop parameter that contains the lock data\n * @param nonce nonce for PoW authentication with the node\n */\nexport async function sendLockClaimRequest(api: ApiPromise, lockParam: Struct, nonce: Uint8Array): Promise<Hash> {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.request(lockParam.toU8a(), nonce);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * generates a Plasm public address with the given ethereum public key\n * @param ethPubKey an compressed ECDSA public key. With or without the 0x prefix\n */\nexport function generatePlmAddress(publicKey: string) {\n    // converts a given hex string into Uint8Array\n    const toByteArray = (hexString: string) => {\n        const result = [];\n        for (let i = 0; i < hexString.length; i += 2) {\n            result.push(parseInt(hexString.substr(i, 2), 16));\n        }\n        return new Uint8Array(result);\n    };\n\n    // hash to blake2\n    const plasmPubKey = polkadotUtil.blake2AsU8a(toByteArray(publicKey.replace('0x', '')), 256);\n    // encode address\n    const plasmAddress = polkadotUtil.encodeAddress(plasmPubKey, 5);\n    return plasmAddress;\n}\n\n/**\n * Fetches the number of free balance for the given address in femto.\n * @param api polkadot-js api instance\n * @param plasmAddress Plasm network address\n * @param asPlm if the output value should be in PLM. Default denominator is in femto\n */\nexport async function getAddressBalance(api: ApiPromise, plasmAddress: string, asPlm?: boolean) {\n    const { data: balance } = await api.query.system.account(plasmAddress);\n    let _bal = balance.free.toString();\n    if (asPlm) {\n        _bal = femtoToPlm(new BigNumber(balance.free.toString())).toFixed();\n    }\n    return _bal;\n}\n\n/**\n * Fetches Plasm real-time lockdrop vote threshold and positive vote values.\n * @param api polkadot-js api instance\n */\nexport async function getLockdropVoteRequirements(api: ApiPromise) {\n    // number of minium votes required for a claim request to be accepted\n    const _voteThreshold = Number.parseInt((await api.query.plasmLockdrop.voteThreshold()).toString());\n    // number of outstanding votes (approve votes - decline votes) required for a claim request to be accepted\n    const _positiveVotes = Number.parseInt((await api.query.plasmLockdrop.positiveVotes()).toString());\n\n    return {\n        voteThreshold: _voteThreshold,\n        positiveVotes: _positiveVotes,\n    };\n}\n\n/**\n * sends a lockdrop claim request to Plasm net node. This will fund the ECDSA address.\n * @param api polkadot API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function sendLockdropClaim(api: ApiPromise, claimId: Uint8Array | H256) {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.claim(claimId);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * Plasm network real-time lockdrop claim data query wrapper.\n * This will query the node with the given claim ID and wrap the data to a readable interface.\n * This function will return undefined if the claim data does not exists on the chain.\n * @param api Polkadot-js API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function getClaimStatus(api: ApiPromise, claimId: Uint8Array | H256) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = (await api.query.plasmLockdrop.claims(claimId)) as any;\n\n    // wrap block query data to TypeScript interface\n    const data: Claim = {\n        params: {\n            // we use snake case here because this data is directly parsed from the node\n            type: claim.get('params').get('type'),\n            transactionHash: claim.get('params').get('transaction_hash'),\n            publicKey: claim.get('params').get('public_key'),\n            duration: claim.get('params').get('duration'),\n            value: claim.get('params').get('value'),\n        },\n        approve: claim.get('approve'),\n        decline: claim.get('decline'),\n        amount: claim.get('amount'),\n        complete: claim.get('complete'),\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_key, value] of Object.entries(data.params)) {\n        // check if data exists on chain\n        if (\n            typeof value === 'undefined' ||\n            value.toHex() === '0x000000000000000000000000000000000000000000000000000000000000000000' || // pub key\n            value.toHex() === '0x0000000000000000000000000000000000000000000000000000000000000000' // tx hash\n        ) {\n            return undefined;\n        }\n    }\n\n    return data;\n}\n\n/**\n * converts lockdrop parameter into a Lockdrop type\n * @param lockdropParam lockdrop parameter type in polakdot-js structure\n */\nexport function structToLockdrop(lockdropParam: Struct) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = lockdropParam as any;\n    const param: Lockdrop = {\n        type: claim.get('type'),\n        transactionHash: claim.get('transactionHash'),\n        publicKey: claim.get('publicKey'),\n        duration: claim.get('duration'),\n        value: claim.get('value'),\n    };\n\n    return param;\n}\n\n/**\n * a Proof-of-Work function that hashes the lockdrop claim ID and the nonce\n * together to verify the unsigned transaction.\n * this will return the correct nonce in hex string\n * @param claimId the real-time lockdrop claim ID (blake2 hashed lock parameter)\n */\nexport function claimPowNonce(claimId: Uint8Array | H256): Uint8Array {\n    let nonce = polkadotUtil.randomAsU8a();\n    while (true) {\n        const hash = polkadotUtil.blake2AsU8a(u8aConcat(claimId, nonce));\n        //console.log('PoW hash: ' + u8aToHex(hash));\n        if (hash[0] > 0) {\n            nonce = polkadotUtil.randomAsU8a();\n            //console.log('Next nonce: ' + u8aToHex(nonce));\n        } else {\n            return nonce;\n        }\n    }\n}\n","import BigNumber from 'bignumber.js';\nimport { LockEvent } from './LockdropModels';\n\nexport class PlmDrop {\n    receiver: string;\n    basePlm: BigNumber;\n    introducerAndBonuses: [string, BigNumber][];\n    affiliationRefsBonuses: [string, BigNumber][];\n    locks: LockEvent[];\n\n    constructor(\n        receiver: string,\n        basePlm: BigNumber,\n        introducerAndBonuses: [string, BigNumber][],\n        affiliationRefsBonuses: [string, BigNumber][],\n        locks: LockEvent[],\n    ) {\n        this.receiver = receiver;\n        this.basePlm = basePlm;\n        this.introducerAndBonuses = introducerAndBonuses;\n        this.affiliationRefsBonuses = affiliationRefsBonuses;\n        this.locks = locks;\n    }\n\n    getTotal() {\n        let totalIntroBonuses = new BigNumber(0);\n\n        for (let i = 0; i < this.introducerAndBonuses.length; i++) {\n            totalIntroBonuses = totalIntroBonuses.plus(this.introducerAndBonuses[i][1]);\n        }\n\n        const affBonus = this.calculateAffBonus();\n\n        return this.basePlm\n            .plus(totalIntroBonuses)\n            .plus(affBonus)\n            .toFixed();\n    }\n\n    getTotalPlm() {\n        return new BigNumber(this.getTotal()).toFixed();\n    }\n\n    getAffBonus() {\n        return new BigNumber(this.calculateAffBonus()).toFormat(2);\n    }\n\n    getIntroBonus() {\n        return new BigNumber(this.calculateIntroBonus()).toFormat(2);\n    }\n\n    // calculate the number of PLM you get for being affiliated\n    calculateAffBonus() {\n        return this.affiliationRefsBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n\n    // the number of PLM you get for referencing an affiliate\n    calculateIntroBonus() {\n        return this.introducerAndBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// This module is used for communicating with the Ethereum smart contract\nimport Lockdrop from '../../contracts/Lockdrop.json';\nimport getWeb3 from '../getWeb3';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport { LockEvent, LockInput } from '../../types/LockdropModels';\nimport BN from 'bn.js';\nimport BigNumber from 'bignumber.js';\nimport { isValidIntroducerAddress, defaultAddress, affiliationRate } from '../../data/affiliationProgram';\nimport { lockDurationToRate } from '../plasmUtils';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport Web3Utils from 'web3-utils';\nimport { ecrecover, fromRpcSig, toBuffer, bufferToHex } from 'ethereumjs-util';\nimport * as lockInfo from '../../data/lockInfo';\nimport EthCrypto from 'eth-crypto';\n\n// todo: reduce client-side operations and replace it with data from the plasm node\n\n/**\n * exchange rate at the start of April 14 UTC (at the end of the first lockdrop)\n * this is only used for the first lockdrop\n */\nexport const ethFinalExRate = 205.56;\n\n// the total amount of issueing PLMs at 1st Lockdrop.\nconst totalAmountOfPLMs = new BigNumber('500000000.000000000000000');\nconst totalAmountOfPLMsForLockdrop = totalAmountOfPLMs.times(new BigNumber('17').div(new BigNumber('20')));\n\n/**\n * asks the user to sign a hashed message from their dApp browser to recover the user's public key.\n * This will return a compressed public key.\n * @param web3 a web3.js instance to access the user's wallet information\n * @param message an optional message that the user should sign\n */\nexport async function getPubKey(web3: Web3, message?: string) {\n    // default message\n    let msg = 'Please Sign this message to generate Plasm Network address';\n    // change message if the function provides one\n    if (message) {\n        msg = message;\n    }\n    const hash = web3.eth.accounts.hashMessage(msg);\n    const addresses = await web3.eth.getAccounts();\n    // the password parameter is only used for specific wallets (most wallets will prompt the user to provide it)\n    const sig = '0x' + (await web3.eth.personal.sign(msg, addresses[0], 'SecureP4ssW0rd')).slice(2);\n    const res = fromRpcSig(sig);\n    const publicKey = bufferToHex(ecrecover(toBuffer(hash), res.v, res.r, res.s));\n    const compressedPubKey = '0x' + EthCrypto.publicKey.compress(publicKey.replace('0x', ''));\n\n    return compressedPubKey;\n}\n\n/**\n * returns an array of locked events for the lock contract\n * this function searches from the genesis block\n * @param web3 a web3.js instance to interact with the blockchain\n * @param instance a contract instance to parse the contract events\n */\nexport async function getAllLockEvents(web3: Web3, instance: Contract): Promise<LockEvent[]> {\n    // todo: set this value as the block number of where the contract was deployed for each network\n    const mainnetStartBlock = 0;\n    try {\n        const ev = await instance.getPastEvents('Locked', {\n            fromBlock: mainnetStartBlock,\n        });\n\n        const eventHashes = await Promise.all(\n            ev.map(async e => {\n                return Promise.all([Promise.resolve(e.returnValues), web3.eth.getTransaction(e.transactionHash)]);\n            }),\n        );\n\n        return Promise.all(\n            eventHashes.map(async e => {\n                // e[0] is lock event and e[1] is block hash\n                const blockHash = e[1];\n                const lockEvent = e[0];\n\n                const transactionString = await Promise.resolve(web3.eth.getBlock(blockHash.blockNumber as number));\n                const time = transactionString.timestamp.toString();\n                return {\n                    eth: lockEvent.eth as BN,\n                    duration: lockEvent.duration as number,\n                    lock: lockEvent.lock as string,\n                    introducer: lockEvent.introducer as string,\n                    blockNo: blockHash.blockNumber,\n                    timestamp: time,\n                    lockOwner: blockHash.from,\n                    blockHash: blockHash.blockHash,\n                    transactionHash: blockHash.hash,\n                } as LockEvent;\n            }),\n        );\n    } catch (error) {\n        console.log(error);\n        // return an empty array when failed\n        return [] as LockEvent[];\n    }\n}\n\n/**\n * returns a 0 ethereum address if an empty string was provided.\n * this function is used for lockers with no introducers\n * @param aff a valid introducer ETH address\n */\nexport function defaultAffiliation(aff: string) {\n    // check if affiliation address is not empty and is not themselves\n    if (aff) {\n        // return itself when it is a valid address\n        return aff;\n    } else {\n        // if it is an invalid address, return the default affiliation address\n        return defaultAddress;\n    }\n}\n\nfunction plmBaseIssueRatio(lockData: LockEvent, ethExchangeRate: BigNumber): BigNumber {\n    // get lockTimeBonus * ethExRate\n    const bonusRate = new BigNumber(lockDurationToRate(lockData.duration)).times(ethExchangeRate);\n\n    // calculate issuingPLMRate = lockedEth([ETH]) * lockBonusRate * ethExRate\n    const issuingRatio: BigNumber = new BigNumber(Web3Utils.fromWei(lockData.eth.toString(), 'ether')).times(\n        new BigNumber(bonusRate),\n    );\n    return issuingRatio;\n}\n\nfunction totalPlmBaseIssuingRate(allLocks: LockEvent[], ethExchangeRate: BigNumber): BigNumber {\n    return allLocks.reduce(\n        (sum: BigNumber, value: LockEvent): BigNumber => sum.plus(plmBaseIssueRatio(value, ethExchangeRate)),\n        new BigNumber(0),\n    );\n}\n\nfunction plmBaseIssueAmountInLock(lock: LockEvent, totalPlmsRate: BigNumber, ethExchangeRate: BigNumber): BigNumber {\n    const currentIssue = plmBaseIssueRatio(lock, ethExchangeRate);\n    return totalAmountOfPLMsForLockdrop.times(currentIssue).div(totalPlmsRate);\n}\n\n/**\n * returns an array of addresses that referenced the given address for the affiliation program\n * @param address ETH address\n * @param lockData list of contract lock event\n */\nfunction getAllAffReferences(address: string, lockData: LockEvent[]) {\n    // check if there is\n    const results: LockEvent[] = [];\n    const refEvents = lockData.filter(e => e.introducer.toLowerCase() === address.toLowerCase());\n\n    for (let i = 0; i < refEvents.length; i++) {\n        results.push(refEvents[i]);\n    }\n\n    return results;\n}\n\nexport function calculateNetworkAlpha(allLocks: LockEvent[]): BigNumber {\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    const totalPlmRate = totalPlmBaseIssuingRate(allLocks, ethExchangeRate);\n\n    // alpha_1 = totalAmountOfPLMsForLockdrop /totalPlmRate\n    const alpha1 = totalAmountOfPLMsForLockdrop.div(totalPlmRate);\n\n    return alpha1;\n}\n\n/**\n * calculate the total receiving PLMs from the lockdrop including the affiliation program bonus\n * in this function, affiliation means the current address being referenced by others\n * and introducer means this address referencing other affiliated addresses\n * @param address the lockdrop participant's ETH address\n * @param lockData a list of lockdrop contract events\n */\nexport function calculateTotalPlm(address: string, lockData: LockEvent[]): PlmDrop {\n    const receivingPlm = new PlmDrop(address, new BigNumber(0), [], [], []);\n\n    const currentAddressLocks = lockData.filter(i => i.lockOwner.toLowerCase() === address.toLowerCase());\n\n    receivingPlm.locks = currentAddressLocks;\n\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    // get total plm rate for calculating actual issuing PLMs.\n    const totalPlmRate = totalPlmBaseIssuingRate(lockData, ethExchangeRate);\n\n    for (let i = 0; i < currentAddressLocks.length; i++) {\n        // calculate total base issuing PLM tokens\n        const issuingPlm = plmBaseIssueAmountInLock(currentAddressLocks[i], totalPlmRate, ethExchangeRate);\n\n        // add value to the total amount\n        receivingPlm.basePlm = receivingPlm.basePlm.plus(issuingPlm);\n\n        // self -> introducer : bonus getting PLMs.\n        // check if this address has an introducer\n        if (\n            isValidIntroducerAddress(currentAddressLocks[i].introducer) &&\n            currentAddressLocks[i].introducer !== defaultAddress\n        ) {\n            receivingPlm.introducerAndBonuses.push([\n                currentAddressLocks[i].introducer,\n                issuingPlm.times(new BigNumber(affiliationRate)),\n            ]);\n        }\n    }\n\n    // someone -> self(introducer) : bonus getting PLMs.\n    // calculate affiliation bonus for this address\n    if (isValidIntroducerAddress(address)) {\n        const allRefs = getAllAffReferences(address, lockData);\n\n        for (let i = 0; i < allRefs.length; i++) {\n            // reference amount * 0.01\n            receivingPlm.affiliationRefsBonuses.push([\n                allRefs[i].lock,\n                plmBaseIssueAmountInLock(allRefs[i], totalPlmRate, ethExchangeRate).times(\n                    new BigNumber(affiliationRate),\n                ),\n            ]);\n        }\n    }\n    return receivingPlm;\n}\n\n/**\n * parses through the given lock events to calculate the total amount of locked ETH\n * @param locks a list of lockdrop contract events\n */\nexport function getTotalLockVal(locks: LockEvent[]): string {\n    let totalVal = new BigNumber(0);\n    if (locks.length > 0) {\n        for (let i = 0; i < locks.length; i++) {\n            const currentEth = new BigNumber(locks[i].eth.toString());\n            totalVal = totalVal.plus(currentEth);\n        }\n    }\n    return Web3Utils.fromWei(totalVal.toFixed(), 'ether');\n}\n\n/**\n * authenticate if the client has web3 enabled wallet installed and can communicate with the blockchain\n * returns the web3.js instance, list of active accounts and the contract instance\n * @param lockSeason lockdrop season to indicate which lockdrop contract it should look for\n */\nexport async function connectWeb3(lockSeason: 'firstLock' | 'secondLock' | 'thirdLock') {\n    try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        //const web3 = getEthInst();\n\n        if (web3 instanceof Web3) {\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n            const lockdropAbi = Lockdrop.abi as Web3Utils.AbiItem[];\n\n            // Get the contract instance.\n            //const networkId = await web3.eth.net.getId();\n\n            //const deployedNetwork = (Lockdrop.networks as any)[networkId];\n\n            const networkType = await web3.eth.net.getNetworkType();\n            const contractAddress = (lockInfo.lockdropContracts[lockSeason] as any)[networkType];\n\n            // create an empty contract instance first\n            const instance = new web3.eth.Contract(lockdropAbi, contractAddress !== '0x' && contractAddress);\n\n            return {\n                web3: web3,\n                accounts: accounts,\n                contract: instance,\n            };\n        }\n    } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert('Failed to load web3, accounts, or contract. Check console for details.');\n        console.error(error);\n    }\n    // return an empty value\n    return {\n        web3: {} as Web3,\n        accounts: [''],\n        contract: {} as Contract,\n    };\n}\n\n/**\n * validate and create a transaction to the lock contract with the given parameter.\n * This will return the transaction hash\n * @param txInput the lock parameter for the contract\n * @param address the address of the locker\n * @param contract smart contract instance used to invoke the contract method\n */\nexport async function submitLockTx(txInput: LockInput, address: string, contract: Contract) {\n    // checks user input\n    if (txInput.amount <= new BN(0) || txInput.duration <= 0) {\n        throw new Error('You are missing an input!');\n    }\n    //console.log(formInputVal);\n    // return a default address if user input is empty\n    const introducer = defaultAffiliation(txInput.affiliation).toLowerCase();\n    // check user input\n    if (introducer === address) {\n        throw new Error('You cannot affiliate yourself');\n    }\n    if (introducer && !Web3.utils.isAddress(introducer)) {\n        throw new Error('Please input a valid Ethereum address');\n    }\n    // if (!isValidIntroducerAddress(introducer)) {\n    //     throw new Error('The given introducer is not registered in the affiliation program!');\n    // }\n\n    // convert user input to Wei\n    const amountToSend = Web3.utils.toWei(txInput.amount, 'ether');\n    let hash = '';\n    // communicate with the smart contract\n    await contract.methods\n        .lock(txInput.duration, introducer)\n        .send({\n            from: address,\n            value: amountToSend,\n        })\n        .on('transactionHash', (res: any) => {\n            hash = res;\n        });\n    return hash;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport { LockEvent, TimeFormat } from '../../types/LockdropModels';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport {\n    Divider,\n    Grid,\n    ListItemSecondaryAction,\n    IconButton,\n    LinearProgress,\n    createStyles,\n    makeStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        itemButtons: {\n            verticalAlign: 'middle',\n            textAlign: 'center',\n            alignContent: 'center',\n        },\n    }),\n);\n\ninterface CurrentLockProps {\n    web3: Web3;\n    accounts: string[]; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n}\n\ninterface UnlockInfoProps {\n    lockInfo: LockEvent;\n    web3: Web3;\n    address: string;\n}\n// displays a list of locks tha the current user has locked\nconst CurrentLocks: React.FC<CurrentLockProps> = ({ web3, accounts, lockData }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>([]);\n    const [isLoadingComp, setLoadState] = useState(true);\n\n    const getUserLocks = () => {\n        return lockData.filter(i => i.lockOwner === accounts[0]);\n    };\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setEvents(getUserLocks);\n            setLoadState(false);\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div className={classes.lockListPage}>\n            {isLoadingComp ? (\n                <CircularProgress />\n            ) : (\n                <>\n                    {lockEvents.length > 0 ? (\n                        <>\n                            <h1>Your Locks</h1>\n                            <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                            <List className={classes.listRoot} subheader={<li />}>\n                                <li className={classes.listSection}>\n                                    <ul className={classes.ul}>\n                                        <ListSubheader>You have {lockEvents.length} locks</ListSubheader>\n                                        <Divider />\n                                        {lockEvents.map(eventItem => (\n                                            <>\n                                                <UnlockInfo lockInfo={eventItem} web3={web3} address={accounts[0]} />\n                                                <Divider />\n                                            </>\n                                        ))}\n                                    </ul>\n                                </li>\n                            </List>\n                        </>\n                    ) : (\n                        <>\n                            <h1>No Locks</h1>\n                            <h4>Please lock some ETH!</h4>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\n// the individual lock item\nconst UnlockInfo: React.FC<UnlockInfoProps> = ({ lockInfo, web3, address }) => {\n    const classes = useStyles();\n    // 24 hours in epoch\n    const epochDayMil = 86400000;\n\n    const getUnlockDate = useCallback(() => {\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n        // locked date + lock duration(epoch)\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        return unlockDate;\n    }, [lockInfo]);\n\n    const calculateTimeLeft = useCallback(() => {\n        // milliseconds left till unlock\n        const tillEnd = getUnlockDate() - +Date.now();\n        return {\n            days: Math.floor(tillEnd / (1000 * 60 * 60 * 24)),\n            hours: Math.floor((tillEnd / (1000 * 60 * 60)) % 24),\n            minutes: Math.floor((tillEnd / 1000 / 60) % 60),\n            seconds: Math.floor((tillEnd / 1000) % 60),\n        };\n    }, [getUnlockDate]);\n\n    const [canUnlock, setLockState] = useState(false);\n    const [tillUnlock, setUnlockDate] = useState<TimeFormat>(calculateTimeLeft());\n    const [unlocked, setUnlockState] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n\n    const checkUnlock = useCallback(async () => {\n        // get today in UTC epoch seconds (js default is ms)\n        const today = Date.now();\n\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        // get contract balance\n        const lockBalance = await web3.eth.getBalance(lockInfo.lock);\n        // check if the balance is 0 or not\n        const lockClaimState = lockBalance === '0';\n        // console.log(lockBalance);\n        setUnlockState(lockClaimState);\n        // manually change the loading state\n        setLoading(false);\n        return today > unlockDate;\n    }, [lockInfo, web3]);\n\n    // update time value every second\n    useEffect(() => {\n        //const abortController = new AbortController();\n\n        const interval = setInterval(async () => {\n            setUnlockDate(calculateTimeLeft());\n            setLockState(await checkUnlock());\n        }, 1000);\n        // cleanup async hook\n        return () => {\n            clearInterval(interval);\n        };\n    }, [calculateTimeLeft, checkUnlock]);\n\n    // initial update\n    useEffect(() => {\n        setUnlockDate(calculateTimeLeft());\n        checkUnlock().then(setLockState);\n    }, [calculateTimeLeft, checkUnlock]);\n\n    const handleClick = () => {\n        setLoading(true);\n        web3.eth\n            .sendTransaction({\n                from: address,\n                to: lockInfo.lock,\n                value: '0',\n            })\n            .then(\n                () => {\n                    setLoading(false);\n                },\n                error => {\n                    console.log(error);\n                    setLoading(false);\n                },\n            );\n    };\n\n    return (\n        <>\n            <ListItem key={lockInfo.lock}>\n                <Grid container spacing={4} alignItems=\"center\">\n                    <Grid item xs={9}>\n                        <ListItemText>\n                            <h5>Lock address: {lockInfo.lock}</h5>\n                            <p>\n                                Locked {Web3Utils.fromWei(lockInfo.eth, 'ether')} ETH for {lockInfo.duration} days\n                            </p>\n                            {lockInfo.introducer !== defaultAddress ? (\n                                <p>Introducer: {lockInfo.introducer}</p>\n                            ) : (\n                                <p>No introducer</p>\n                            )}\n                            {isLoading ? (\n                                <>\n                                    <LinearProgress />\n                                </>\n                            ) : (\n                                <>\n                                    {!canUnlock ? (\n                                        <Grid container spacing={1}>\n                                            <Grid item>\n                                                <p>{tillUnlock.days} Days </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.hours} Hours </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.minutes} Minutes </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.seconds} Seconds </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>Left</p>\n                                            </Grid>\n                                        </Grid>\n                                    ) : unlocked ? (\n                                        <p>Lock already unlocked!</p>\n                                    ) : (\n                                        <p>You can unlocked your lock!</p>\n                                    )}\n                                </>\n                            )}\n                        </ListItemText>\n                    </Grid>\n                    <Grid item>\n                        <ListItemSecondaryAction className={classes.itemButtons}>\n                            {unlocked ? (\n                                <LockOpenIcon color=\"disabled\" />\n                            ) : canUnlock ? (\n                                <Tooltip title=\"Click to unlock\" aria-label=\"unlock\">\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"unlock\"\n                                        onClick={() => handleClick()}\n                                        color=\"primary\"\n                                    >\n                                        <LockOpenIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            ) : (\n                                <LockIcon color=\"inherit\" />\n                            )}\n                        </ListItemSecondaryAction>\n                    </Grid>\n                </Grid>\n            </ListItem>\n        </>\n    );\n};\n\nexport default CurrentLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\n\nimport React, { useState, useEffect } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Divider } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\n\ninterface LockHistoryProps {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: theme.spacing(1, 2),\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\nconst GlobalLocks: React.FC<LockHistoryProps> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>([]);\n    const [isLoadingComp, setLoadState] = useState(true);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setEvents(lockData);\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    }, [lockData]);\n\n    useEffect(() => {\n        setEvents(lockData);\n        setLoadState(false);\n    }, [lockData]);\n\n    return (\n        <div className={classes.lockListPage}>\n            {isLoadingComp ? (\n                <CircularProgress />\n            ) : (\n                <>\n                    {lockEvents.length > 0 ? (\n                        <>\n                            <h1>Global Locks</h1>\n                            <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                            <List className={classes.listRoot} subheader={<li />}>\n                                <li className={classes.listSection}>\n                                    <ul className={classes.ul}>\n                                        <ListSubheader>There are {lockEvents.length} locks</ListSubheader>\n                                        <Divider />\n                                        {lockEvents.map(eventItem => (\n                                            <>\n                                                <ListItem key={eventItem.lock}>\n                                                    <ListItemText>\n                                                        <h4>Lock address: {eventItem.lock}</h4>\n                                                        <h5>Locked in block no. {eventItem.blockNo}</h5>\n                                                        <p>\n                                                            Locked {Web3Utils.fromWei(eventItem.eth, 'ether')} ETH for{' '}\n                                                            {eventItem.duration} days\n                                                        </p>\n                                                        {eventItem.introducer !== defaultAddress ? (\n                                                            <p>Introducer: {eventItem.introducer}</p>\n                                                        ) : (\n                                                            <p>No introducer</p>\n                                                        )}\n                                                    </ListItemText>\n                                                </ListItem>\n                                                <Divider />\n                                            </>\n                                        ))}\n                                    </ul>\n                                </li>\n                            </List>\n                        </>\n                    ) : (\n                        <>\n                            <h1>No Locks</h1>\n                            <h4>Please lock some ETH!</h4>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default GlobalLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport CurrentLocks from './CurrentLocks';\nimport GlobalLocks from './EthGlobalLocks';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\ninterface LockHistoryProps {\n    web3: Web3;\n    accounts: string[]; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\n// component that displays the number of tokens and the duration for the lock via Web3\nconst LockedEthList: React.FC<LockHistoryProps> = ({ web3, accounts, lockData }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.tabMenu}>\n                    <AppBar position=\"static\" color=\"inherit\">\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs\"\n                        >\n                            <Tab label=\"Locked Tokens\" {...a11yProps(0)} />\n                            <Tab label=\"Unlock Tokens\" {...a11yProps(1)} />\n                        </Tabs>\n                    </AppBar>\n                    <SwipeableViews\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                        index={value}\n                        onChangeIndex={handleChangeIndex}\n                    >\n                        <TabPanel value={value} index={0} dir={theme.direction}>\n                            <GlobalLocks lockData={lockData} />\n                        </TabPanel>\n                        <TabPanel value={value} index={1} dir={theme.direction}>\n                            <CurrentLocks web3={web3} accounts={accounts} lockData={lockData} />\n                        </TabPanel>\n                    </SwipeableViews>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockedEthList;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { TimeFormat, LockEvent } from '../../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    lockData: LockEvent[];\n}\n\nenum LockState {\n    notStart,\n    start,\n    end,\n}\n\nconst LockdropCountdownPanel: React.FC<Props> = ({ startTime, endTime, lockData }) => {\n    const now = moment().utc();\n\n    const calculateTimeLeft = (): TimeFormat => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = moment(endTime).valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        return timeLeft;\n    };\n\n    const getLockState = (): LockState => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n        if (tillStart > 0) {\n            return LockState.notStart;\n        } else if (tillStart <= 0 && !(moment(endTime).valueOf() - now.valueOf() < 0)) {\n            return LockState.start;\n        } else {\n            return LockState.end;\n        }\n    };\n\n    const [timeLeft, setTimeLeft] = useState<TimeFormat>(calculateTimeLeft());\n    const [lockState, setLockState] = useState(getLockState());\n    const [totalLockVal, setTotalLockVal] = useState('0');\n\n    const getLockValue = async (): Promise<void> => {\n        try {\n            const _totalLockVal = getTotalLockVal(lockData);\n            setTotalLockVal(_totalLockVal);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setTimeLeft(calculateTimeLeft());\n            setLockState(getLockState());\n            await getLockValue();\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    if (lockState !== LockState.end) {\n        return (\n            <>\n                <PanelWrapper>\n                    <div className=\"time\">\n                        <Grid container spacing={2} justify=\"center\">\n                            <Grid item>\n                                {lockState === LockState.notStart ? (\n                                    <Typography variant=\"h4\" component=\"h2\">\n                                        Lockdrop Starting in:\n                                    </Typography>\n                                ) : (\n                                    <Typography variant=\"h4\" component=\"h2\">\n                                        Lockdrop Ending in:\n                                    </Typography>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.days}</h3>\n                                <p>Days</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.hours}</h3>\n                                <p>Hours</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.minutes}</h3>\n                                <p>Minutes</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.seconds}</h3>\n                                <p>Seconds</p>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </PanelWrapper>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <PanelWrapper>\n                    <Typography variant=\"h2\" component=\"h1\" align=\"center\">\n                        Lockdrop has ended\n                    </Typography>\n                    <Typography variant=\"h3\" component=\"h3\" align=\"center\">\n                        Total Locked Value: {totalLockVal} ETH\n                    </Typography>\n                </PanelWrapper>\n            </>\n        );\n    }\n};\n\nexport default LockdropCountdownPanel;\n\nconst PanelWrapper: React.FC = ({ children }) => {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            padding: theme.spacing(5, 2, 0),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                {children}\n            </Container>\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    createStyles,\n    Theme,\n    CircularProgress,\n    Divider,\n    Link,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Collapse,\n    Typography,\n} from '@material-ui/core';\nimport { calculateTotalPlm, ethFinalExRate, getPubKey } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport BigNumber from 'bignumber.js';\nimport CountUp from 'react-countup';\nimport { ThemeColors } from '../../theme/themes';\nimport { IonPopover, IonList, IonListHeader, IonItem, IonLabel, IonChip, IonButton, IonLoading } from '@ionic/react';\nimport { LockEvent } from '../../types/LockdropModels';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport { generatePlmAddress } from 'src/helpers/plasmUtils';\n\nconst etherScanSearch = 'https://etherscan.io/address/';\n\ninterface ResultProps {\n    lockData: LockEvent[];\n    web3: Web3;\n}\n\nconst LockdropResult: React.FC<ResultProps> = ({ lockData, web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            pageContent: {\n                textAlign: 'center',\n                padding: theme.spacing(4, 2, 0),\n            },\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                padding: theme.spacing(4, 2, 0),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n    const [totalPlm, setTotalPlm] = useState<PlmDrop>(new PlmDrop('', new BigNumber(0), [], [], []));\n    const [exRate, setExRate] = useState(0);\n    const [isLoading, setLoadState] = useState(true);\n    const [showIntoRefPopover, setShowIntroRefPopover] = useState(false);\n    const [showIntoPopover, setShowIntroPopover] = useState(false);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setExRate(ethFinalExRate);\n            const accounts = await web3.eth.getAccounts();\n            const totalIssue = calculateTotalPlm(accounts[0], lockData);\n            setTotalPlm(totalIssue);\n\n            setLoadState(false);\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const countupTotalPlmVal: JSX.Element = (\n        <CountUp\n            start={0}\n            end={new BigNumber(totalPlm.getTotalPlm()).toNumber()}\n            decimals={2}\n            duration={1}\n            separator=\",\"\n        />\n    );\n\n    return (\n        <div className={classes.pageContent}>\n            <h1>Lockdrop Result</h1>\n            {isLoading ? (\n                <>\n                    <CircularProgress />\n                </>\n            ) : totalPlm.locks.length > 0 || totalPlm.affiliationRefsBonuses.length > 0 ? (\n                <>\n                    <h2 className={classes.header}>{countupTotalPlmVal} PLM in total</h2>\n                    <p>You have locked {totalPlm.locks.length} time(s)</p>\n                    <p>\n                        ETH exchange rate at the end of the lockdrop: {exRate} USD(\n                        <a href=\"https://api.coingecko.com/api/v3/coins/ethereum/history?date=01-05-2020&localization=false\">\n                            ref\n                        </a>\n                        )\n                    </p>\n                    <p>You have received around {totalPlm.basePlm.toFormat(2)} PLM from locking</p>\n                    <Divider />\n                    <h2>Affiliation Program</h2>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroRefPopover(true)}>\n                        <IonLabel>{totalPlm.affiliationRefsBonuses.length} locks</IonLabel>\n                    </IonChip>\n                    <IonLabel>referenced your address as a introducer: {totalPlm.getAffBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoRefPopover} onDidDismiss={() => setShowIntroRefPopover(false)}>\n                        <IntoRefItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <IonLabel>You have referenced </IonLabel>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroPopover(true)}>\n                        <IonLabel>{totalPlm.introducerAndBonuses.length} introducers</IonLabel>\n                    </IonChip>\n                    <IonLabel>: {totalPlm.getIntroBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoPopover} onDidDismiss={() => setShowIntroPopover(false)}>\n                        <IntoAffItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <ClaimPlm web3={web3} />\n                </>\n            ) : (\n                <h2 className={classes.header}>No Locks found for your address!</h2>\n            )}\n        </div>\n    );\n};\n\nexport default LockdropResult;\n\ninterface IntroRefProps {\n    data: PlmDrop;\n}\nconst IntoRefItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.affiliationRefsBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>References</IonListHeader>\n                        {data.affiliationRefsBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No References</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\nconst IntoAffItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.introducerAndBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>Introducers</IonListHeader>\n                        {data.introducerAndBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No Introducers</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\ninterface ClaimProps {\n    web3: Web3;\n}\nconst ClaimPlm: React.FC<ClaimProps> = ({ web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                paddingTop: theme.spacing(2),\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                maxWidth: '100%',\n            },\n            addressPanel: {\n                padding: theme.spacing(3, 3, 0),\n            },\n            root: {\n                width: '100%',\n                alignContent: 'center',\n                backgroundColor: theme.palette.background.paper,\n            },\n            nested: {\n                paddingLeft: theme.spacing(4),\n            },\n        }),\n    );\n\n    const [isLoading, setLoadState] = useState(false);\n    const [plmAddress, setPlmAddress] = useState('');\n    const [ethPubkey, setEthPubkey] = useState('');\n    const [open, setOpen] = useState(false);\n\n    const getPlasmAddress = async () => {\n        const pubKey = await getPubKey(web3);\n        let result = '';\n        if (typeof pubKey === 'string') {\n            setEthPubkey(pubKey);\n            // remove the 0x prefix before passing the value\n            const plmAddress = generatePlmAddress(pubKey.replace('0x', ''));\n            result = plmAddress;\n        }\n        setLoadState(false);\n        return result;\n    };\n    const ExpandItem = () => {\n        setOpen(!open);\n    };\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonLoading isOpen={isLoading} message={'Verifying user...'} />\n            <IonButton\n                color=\"primary\"\n                size=\"large\"\n                className={classes.claimButton}\n                onClick={async () => {\n                    setLoadState(true);\n                    setPlmAddress(await getPlasmAddress());\n                }}\n            >\n                Get Plasm Address\n            </IonButton>\n            {plmAddress ? (\n                <>\n                    <SectionCard maxWidth=\"md\">\n                        <div className={classes.addressPanel}>\n                            <p>Your Plasm Network address with the lockdrop rewards:</p>\n                            <Link\n                                color=\"inherit\"\n                                href={'https://plasm.subscan.io/account/' + plmAddress}\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <h2 className={classes.header}>{plmAddress}</h2>\n                            </Link>\n                            <List component=\"nav\" className={classes.root}>\n                                <ListItem button onClick={ExpandItem}>\n                                    <ListItemIcon>\n                                        <VpnKeyIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary=\"View Eth Public Key\" />\n                                    {open ? <ExpandLess /> : <ExpandMore />}\n                                </ListItem>\n                                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                    <Typography className={classes.header}>{ethPubkey}</Typography>\n                                </Collapse>\n                            </List>\n                        </div>\n                    </SectionCard>\n                </>\n            ) : null}\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { validEthAddressList, defaultAddress } from '../../data/affiliationProgram';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport { calculateTotalPlm } from '../../helpers/lockdrop/EthereumLockdrop';\nimport {\n    List,\n    ListItemText,\n    ListSubheader,\n    Divider,\n    ListItem,\n    makeStyles,\n    createStyles,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport SectionCard from '../SectionCard';\n\ninterface Props {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        title: {\n            textAlign: 'center',\n            padding: theme.spacing(4, 2, 0),\n        },\n    }),\n);\n\nconst AffiliationList: React.FC<Props> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockdropResult, setLockdropResult] = useState<PlmDrop[]>([]);\n\n    function getAffiliationResults(lockData: LockEvent[]) {\n        // filter out the 0x00 address from the list\n        const validAddresses = validEthAddressList.filter(address => address !== defaultAddress);\n\n        // get the lockdrop result\n        const lockResults = validAddresses.map(i => {\n            return calculateTotalPlm(i, lockData);\n        });\n\n        // sort the array by the number of references\n        return lockResults.sort((a, b) =>\n            a.affiliationRefsBonuses.length > b.affiliationRefsBonuses.length\n                ? -1\n                : a.affiliationRefsBonuses.length < b.affiliationRefsBonuses.length\n                ? 1\n                : 0,\n        );\n    }\n\n    useEffect(() => {\n        setLockdropResult(getAffiliationResults(lockData));\n    }, [lockData]);\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <Typography className={classes.title} variant=\"h3\">\n                    Affiliation Leaderboard\n                </Typography>\n                <List component=\"nav\" className={classes.listRoot} subheader={<li />}>\n                    <li className={classes.listSection}>\n                        <ul className={classes.ul}>\n                            <ListSubheader>There are {validEthAddressList.length - 1} affiliators</ListSubheader>\n                            <Divider />\n                            {lockdropResult.map(i => (\n                                <IntroducerBonusesItems key={i.receiver} lockResult={i} />\n                            ))}\n                        </ul>\n                    </li>\n                </List>\n            </SectionCard>\n        </>\n    );\n};\n\ninterface IntroducerPlanelProps {\n    lockResult: PlmDrop;\n}\n\nconst IntroducerBonusesItems: React.FC<IntroducerPlanelProps> = ({ lockResult }) => {\n    return (\n        <>\n            <ListItem>\n                <ListItemText>\n                    <h2>{lockResult.receiver}</h2>\n                    <p>{lockResult.affiliationRefsBonuses.length} lock(s) referenced this address</p>\n                    <p>{lockResult.getAffBonus()} PLMs gained from this</p>\n                </ListItemText>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n\nexport default AffiliationList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading } from '@ionic/react';\nimport React from 'react';\nimport LockdropForm from '../components/EthLock/LockdropForm';\nimport { connectWeb3, getAllLockEvents, submitLockTx } from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockInput, LockEvent } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SectionCard from '../components/SectionCard';\nimport LockdropCountdownPanel from '../components/EthLock/LockdropCountdownPanel';\nimport { firstLockdropEnd, firstLockdropStart } from '../data/lockInfo';\nimport moment from 'moment';\nimport LockdropResult from '../components/EthLock/LockdropResult';\nimport { Divider } from '@material-ui/core';\nimport AffiliationList from '../components/EthLock/AffiliationList';\nimport { removeWeb3Event } from '../helpers/getWeb3';\n\nconst formInfo = `This is the lockdrop form for Ethereum.\nThis uses Web3 injection so you must have Metamask (or other Web3-enabled wallet) installed in order for this to work properly.\nIf you find any errors or find issues with this form, please contact the Plasm team.\nRegarding the audit by Quantstamp, click <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a> for more details`;\n\ninterface PageStates {\n    web3: Web3;\n    accounts: string[];\n    contract: Contract;\n    isLoading: boolean;\n    networkType: string;\n    isProcessing: boolean;\n    allLockEvents: LockEvent[];\n    error: null;\n    fetchingLockData: boolean;\n}\n\n// need an empty interface to use states (React's generic positioning)\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface PageProps {}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst hasFirstLockdropStarted = () => {\n    const now = moment()\n        .utc()\n        .valueOf();\n    const start = firstLockdropStart.valueOf();\n    //const end = firstLockdropEnd.valueOf();\n    return start <= now;\n};\n\nconst hasFirstLockdropEnded = () => {\n    const now = moment()\n        .utc()\n        .valueOf();\n    const end = firstLockdropEnd.valueOf();\n    return end <= now;\n};\n\nclass EthLockdropPage extends React.Component<PageProps, PageStates> {\n    constructor(props: PageProps) {\n        super(props);\n        // initialize with null values\n        this.state = {\n            web3: {} as Web3,\n            accounts: [''],\n            contract: {} as Contract,\n            isLoading: true,\n            networkType: '',\n            isProcessing: false,\n            allLockEvents: [],\n            error: null,\n            fetchingLockData: true,\n        };\n    }\n    // used for fetching data periodically\n    timerInterval: any;\n\n    // get and set the web3 state when the component is mounted\n    componentDidMount = async () => {\n        const web3State = await connectWeb3('firstLock');\n        this.setState(web3State);\n\n        // checks if account has changed in MetaMask\n        if ((window as any).ethereum.on) {\n            (window as any).ethereum.on('accountsChanged', this.handleAccountChange);\n        }\n\n        this.setState({ networkType: await this.state.web3.eth.net.getNetworkType() });\n\n        //this.state.web3.eth.net.getNetworkType().then(i => this.setState({ networkType: i }));\n\n        this.timerInterval = setInterval(() => {\n            this.getLockData().then(() => {\n                this.setState({ isLoading: false });\n            });\n        }, 5000);\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerInterval);\n        removeWeb3Event();\n    };\n\n    isMainnet = () => {\n        return this.state.networkType === 'main';\n    };\n\n    // called when the user changes MetaMask account\n    handleAccountChange = () => {\n        // refresh the page\n        window.location.reload(false);\n    };\n\n    getLockData = async () => {\n        try {\n            // get all the lock events from the chain\n            const allLocks = await getAllLockEvents(this.state.web3, this.state.contract);\n\n            this.setState({ allLockEvents: allLocks });\n        } catch (error) {\n            this.setState({ error });\n            console.log(error);\n        }\n    };\n\n    handleSubmit = async (formInputVal: LockInput) => {\n        this.setState({ isProcessing: true });\n        try {\n            await submitLockTx(formInputVal, this.state.accounts[0], this.state.contract);\n            toast.success(`Successfully locked ${formInputVal.amount} ETH for ${formInputVal.duration} days!`);\n        } catch (e) {\n            toast.error(e.toString());\n            console.log(e);\n        }\n\n        this.setState({ isProcessing: false });\n    };\n\n    render() {\n        return (\n            <IonPage>\n                <Navbar />\n                <IonContent>\n                    {hasFirstLockdropStarted() ? (\n                        this.state.isLoading ? (\n                            <IonLoading isOpen={true} message={'Connecting to Wallet and fetching chain data...'} />\n                        ) : (\n                            <>\n                                {this.state.isProcessing ? (\n                                    <IonLoading\n                                        isOpen={this.state.isProcessing}\n                                        message={'Processing Transaction...'}\n                                    />\n                                ) : null}\n\n                                <SectionCard maxWidth=\"lg\">\n                                    <LockdropCountdownPanel\n                                        endTime={firstLockdropEnd}\n                                        startTime={firstLockdropStart}\n                                        lockData={this.state.allLockEvents}\n                                    />\n                                    {hasFirstLockdropEnded() && this.isMainnet() ? (\n                                        <>\n                                            <Divider />\n                                            <LockdropResult\n                                                lockData={this.state.allLockEvents}\n                                                web3={this.state.web3}\n                                            />\n                                        </>\n                                    ) : null}\n                                </SectionCard>\n                                <AffiliationList lockData={this.state.allLockEvents} />\n                                {hasFirstLockdropEnded() ? null : (\n                                    <LockdropForm token=\"ETH\" onSubmit={this.handleSubmit} description={formInfo} />\n                                )}\n\n                                <LockedEthList\n                                    web3={this.state.web3}\n                                    accounts={this.state.accounts}\n                                    lockData={this.state.allLockEvents}\n                                />\n                            </>\n                        )\n                    ) : (\n                        <>\n                            <SectionCard maxWidth=\"lg\">\n                                <LockdropCountdownPanel\n                                    endTime={firstLockdropEnd}\n                                    startTime={firstLockdropStart}\n                                    lockData={this.state.allLockEvents}\n                                />\n                            </SectionCard>\n                        </>\n                    )}\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        );\n    }\n}\nexport default EthLockdropPage;\n","import BN from 'bn.js';\nimport { Moment } from 'moment';\nimport { u64, u128, U8aFixed, BTreeSet } from '@polkadot/types';\nimport { H256, AuthorityId } from '@polkadot/types/interfaces';\n\n/**\n * lock contract parameter\n */\nexport interface LockInput {\n    duration: number; // in days\n    amount: BN; // in ETH\n    affiliation: string; // Ethereum address\n    rate: number;\n}\n\n/**\n * defines the method for creating a BTC transaction\n */\nexport enum BtcWalletType {\n    Trezor,\n    Ledger,\n    Raw,\n    None,\n}\n\nexport interface UnspentTx {\n    value: number;\n    txId: string;\n    vout: number;\n    address?: string;\n    height?: number;\n}\n\nexport interface LockMenu {\n    uri?: string;\n    icon?: string;\n    title: string;\n    startDate: Moment;\n    endDate: Moment;\n    disabled?: boolean;\n}\n\nexport interface TimeFormat {\n    days: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n}\n\nexport enum LockSeason {\n    First,\n    Second,\n    Dusty,\n    Third,\n}\n\n/**\n * The lockdrop lock token type. This is used for the real-time lockdrop module\n */\nexport enum LockdropType {\n    Bitcoin,\n    Ethereum,\n}\n\nexport interface LockEvent {\n    eth: BN; // this uses BN.js instead of BigNumber.js because that is what eth helper uses\n    duration: number; // in Unix epoch seconds\n    lock: string; // lock address\n    introducer: string;\n    blockNo: number;\n    timestamp: string; // in Unix epoch seconds\n    lockOwner: string; // locker's address\n    blockHash: string;\n    transactionHash: string;\n}\n\n// option data is the type that is going to be passed to the component\nexport interface OptionData {\n    dataSets: OptionItem[];\n    onChoose: Function;\n}\n\n// option item type is used to provide the data for dropdown items\nexport interface OptionItem {\n    label: string; // the dropdown display label\n    value: number; // dropdown select return value\n    rate: number;\n}\n\n/**\n * used for real-time lockdrop parameter\n * this data is used to communicate with Substrate\n */\nexport interface Lockdrop {\n    type: LockdropType;\n    transactionHash: H256; //H256\n    publicKey: U8aFixed; // [u8; 33]\n    duration: u64; // u64\n    value: u128; // u128\n}\n\nexport interface Claim {\n    params: Lockdrop;\n    approve: BTreeSet<AuthorityId>;\n    decline: BTreeSet<AuthorityId>;\n    amount: u128; // u128\n    complete: boolean;\n}\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport * as btcLockdrop from '../helpers/lockdrop/BitcoinLockdrop';\nimport { Claim, Lockdrop } from 'src/types/LockdropModels';\nimport {\n    List,\n    makeStyles,\n    createStyles,\n    ListSubheader,\n    Divider,\n    ListItem,\n    Typography,\n    ListItemText,\n    ListItemIcon,\n    Icon,\n    ListItemSecondaryAction,\n    IconButton,\n    CircularProgress,\n} from '@material-ui/core';\nimport plasmIcon from '../resources/plasm-icon.svg';\nimport dustyIcon from '../resources/dusty-icon.svg';\nimport Web3Utils from 'web3-utils';\nimport SendIcon from '@material-ui/icons/Send';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { green } from '@material-ui/core/colors';\nimport BigNumber from 'bignumber.js';\nimport { H256 } from '@polkadot/types/interfaces';\nimport Badge from '@material-ui/core/Badge';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { IonPopover, IonList, IonItem, IonListHeader, IonLabel } from '@ionic/react';\nimport { toast } from 'react-toastify';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport ReplayIcon from '@material-ui/icons/Replay';\n\ninterface Props {\n    claimParams: Lockdrop[];\n    plasmApi: ApiPromise;\n    networkType: 'ETH' | 'BTC';\n    plasmNetwork: 'Plasm' | 'Dusty';\n    publicKey: string;\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            height: 360,\n            //minHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        inline: {\n            display: 'inline',\n        },\n        iconProgress: {\n            color: green[500],\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            zIndex: 1,\n        },\n        emptyPanel: {\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: 'auto',\n        },\n        claimVoteIcon: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\n// helper functions\n\nconst truncateString = (str: string, num: number) => {\n    if (str.length <= num) {\n        return str;\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...';\n};\n\nconst epochToDays = (epoch: number) => {\n    const epochDays = 60 * 60 * 24;\n    return epoch / epochDays;\n};\n\nconst ClaimStatus: React.FC<Props> = ({ claimParams, plasmApi, plasmNetwork = 'Plasm', networkType, publicKey }) => {\n    const classes = useStyles();\n    const [positiveVotes, setPositiveVotes] = useState(0);\n    const [voteThreshold, setVoteThreshold] = useState(0);\n    const [isLoading, setLoading] = useState(true);\n    const [plasmAddr, setPlasmAddr] = useState('');\n    const [balance, setBalance] = useState('');\n\n    useEffect(() => {\n        setPlasmAddr(plasmUtils.generatePlmAddress(publicKey));\n    }, [publicKey]);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            const _bal = await plasmUtils.getAddressBalance(plasmApi, plasmAddr, true);\n            const _voteReq = await plasmUtils.getLockdropVoteRequirements(plasmApi);\n            setBalance(_bal);\n            setPositiveVotes(_voteReq.positiveVotes);\n            setVoteThreshold(_voteReq.voteThreshold);\n            isLoading && setLoading(false);\n        }, 3000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                Sending to {plasmAddr}\n            </Typography>\n\n            {plasmAddr && balance && (\n                <Typography variant=\"body1\" component=\"p\" align=\"center\">\n                    Has balance of {balance + ' '}\n                    {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                </Typography>\n            )}\n\n            <List className={classes.listRoot} subheader={<li />}>\n                <li className={classes.listSection}>\n                    <ul className={classes.ul}>\n                        {isLoading ? (\n                            <div className={classes.emptyPanel}>\n                                <CircularProgress />\n                            </div>\n                        ) : claimParams.length > 0 ? (\n                            <>\n                                <ListSubheader>You can claim {claimParams.length} locks</ListSubheader>\n                                <Divider />\n\n                                {claimParams.map(e => (\n                                    <>\n                                        <ClaimItem\n                                            key={e.transactionHash.toHex()}\n                                            lockParam={e}\n                                            plasmApi={plasmApi}\n                                            plasmNetwork={plasmNetwork}\n                                            networkType={networkType}\n                                            positiveVotes={positiveVotes}\n                                            voteThreshold={voteThreshold}\n                                        />\n                                    </>\n                                ))}\n                            </>\n                        ) : (\n                            <>\n                                <ListSubheader>You don&apos;t have any locks!</ListSubheader>\n                                <Divider />\n                                <div className={classes.emptyPanel}>\n                                    <Typography>Why does the feeling of emptiness occupy so much space?</Typography>\n                                    <Typography>-James de la Vega-</Typography>\n                                </div>\n                            </>\n                        )}\n                    </ul>\n                </li>\n            </List>\n        </div>\n    );\n};\n\nexport default ClaimStatus;\n\ninterface ItemProps {\n    lockParam: Lockdrop;\n    plasmApi: ApiPromise;\n    plasmNetwork: 'Plasm' | 'Dusty';\n    networkType: 'BTC' | 'ETH';\n    positiveVotes: number;\n    voteThreshold: number;\n}\n\nconst ClaimItem: React.FC<ItemProps> = ({\n    lockParam,\n    plasmApi,\n    plasmNetwork,\n    networkType,\n    positiveVotes,\n    voteThreshold,\n}) => {\n    const classes = useStyles();\n    const [claimData, setClaimData] = useState<Claim>();\n    const [claimId, setClaimId] = useState<H256>(\n        plasmUtils.createLockParam(\n            lockParam.type,\n            lockParam.transactionHash.toHex(),\n            lockParam.publicKey.toHex(),\n            lockParam.duration.toString(),\n            lockParam.value.toString(),\n        ).hash,\n    );\n\n    // plasmLockdrop.request()\n    const [sendingRequest, setSendingRequest] = useState(false);\n    // plasmLockdrop.claim()\n    const [claimingLock, setClaimingLock] = useState(false);\n\n    const [approveList, setApproveList] = useState<string[]>([]);\n    const [declineList, setDeclineList] = useState<string[]>([]);\n\n    // for popup modals\n    const [showApproves, setShowApproves] = useState(false);\n    const [showDeclines, setShowDeclines] = useState(false);\n\n    const setVoteList = (_claim: Claim) => {\n        const approves = _claim.approve.toJSON() as string[];\n        setApproveList(approves);\n        const decline = _claim.decline.toJSON() as string[];\n        setDeclineList(decline);\n    };\n\n    const submitClaimReq = (param: Lockdrop) => {\n        setSendingRequest(true);\n        const _lock = plasmUtils.createLockParam(\n            param.type,\n            param.transactionHash.toHex(),\n            param.publicKey.toHex(),\n            param.duration.toString(),\n            param.value.toString(),\n        );\n        const _nonce = plasmUtils.claimPowNonce(_lock.hash);\n        // send lockdrop claim request\n        plasmUtils // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .sendLockClaimRequest(plasmApi, _lock as any, _nonce)\n            .then(res => {\n                console.log('Claim ID: ' + _lock.hash);\n                console.log('Request transaction hash:\\n' + res.toHex());\n            });\n    };\n\n    const hasAllVotes = () => approveList.length + declineList.length >= voteThreshold;\n    const reqAccepted = () => approveList.length - declineList.length >= positiveVotes;\n\n    const submitTokenClaim = (id: Uint8Array | H256) => {\n        if (hasAllVotes() && reqAccepted()) {\n            setClaimingLock(true);\n            plasmUtils\n                .sendLockdropClaim(plasmApi, id)\n                .then(res => {\n                    console.log('Token claim transaction hash:\\n' + res.toHex());\n                })\n                .catch(e => {\n                    console.log(e);\n                });\n        }\n    };\n\n    useEffect(() => {\n        plasmUtils.getClaimStatus(plasmApi, claimId).then(i => {\n            setClaimData(i);\n            // turn off loading if it's on\n            if (i) {\n                setVoteList(i);\n                if (sendingRequest) setSendingRequest(false);\n                if (i.complete.valueOf() && claimingLock) setClaimingLock(false);\n            }\n        });\n        setClaimId(\n            plasmUtils.createLockParam(\n                lockParam.type,\n                lockParam.transactionHash.toHex(),\n                lockParam.publicKey.toHex(),\n                lockParam.duration.toString(),\n                lockParam.value.toString(),\n            ).hash,\n        );\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            const _claim = await plasmUtils.getClaimStatus(plasmApi, claimId);\n            if (_claim) {\n                setClaimData(_claim);\n                setVoteList(_claim);\n                // turn off loading if it's on\n                if (sendingRequest) setSendingRequest(false);\n                if (_claim.complete.valueOf() && claimingLock) setClaimingLock(false);\n            }\n        }, 3000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const ActionIcon = () => {\n        if (claimData && !hasAllVotes()) {\n            return <HourglassEmptyIcon />;\n        } else if (claimData === undefined) {\n            return <SendIcon />;\n        } else if (claimData && !reqAccepted()) {\n            return <ReplayIcon />;\n        }\n        return <CheckIcon />;\n    };\n\n    return (\n        <>\n            <IonPopover isOpen={showApproves} onDidDismiss={() => setShowApproves(false)}>\n                <IonList>\n                    <IonListHeader>Claim Approvals</IonListHeader>\n                    {approveList.length > 0 ? (\n                        approveList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Approvals</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <IonPopover isOpen={showDeclines} onDidDismiss={() => setShowDeclines(false)}>\n                <IonList>\n                    <IonListHeader>Claim Declines</IonListHeader>\n                    {declineList.length > 0 ? (\n                        declineList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Declines</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>\n                        {plasmNetwork === 'Plasm' ? <img src={plasmIcon} alt=\"\" /> : <img src={dustyIcon} alt=\"\" />}\n                    </Icon>\n                </ListItemIcon>\n                <ListItemText>\n                    <Typography component=\"h4\" variant=\"h5\" color=\"textPrimary\">\n                        Transaction Hash: {truncateString(lockParam.transactionHash.toHex(), 6)}\n                    </Typography>\n                    <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                        Locked{' '}\n                        {networkType === 'ETH'\n                            ? `${Web3Utils.fromWei(lockParam.value.toString(), 'ether')} ETH `\n                            : `${btcLockdrop.satoshiToBitcoin(lockParam.value.toString())} BTC `}\n                        for {epochToDays(lockParam.duration.toNumber()).toString()} days\n                    </Typography>\n\n                    {claimData && (\n                        <>\n                            <br />\n                            <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                                Receiving {plasmUtils.femtoToPlm(new BigNumber(claimData.amount.toString())).toFixed()}{' '}\n                                {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                            </Typography>\n                        </>\n                    )}\n\n                    <br />\n                    <Typography component=\"p\" variant=\"body2\" className={classes.inline} color=\"textPrimary\">\n                        Claim ID: {claimId.toHex()}\n                    </Typography>\n                    <br />\n                    <Typography\n                        component=\"p\"\n                        variant=\"body2\"\n                        className={classes.inline}\n                        color={claimData ? 'primary' : 'error'}\n                    >\n                        {claimData\n                            ? claimData.complete.valueOf()\n                                ? 'Claimed Lockdrop'\n                                : 'Claim requested (not claimed)'\n                            : 'Claim not requested'}\n                    </Typography>\n                    {claimData && (\n                        <>\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowApproves(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={approveList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbUpIcon />\n                                </Badge>\n                            </IconButton>\n\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowDeclines(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={declineList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbDownIcon />\n                                </Badge>\n                            </IconButton>\n                        </>\n                    )}\n                </ListItemText>\n\n                <ListItemSecondaryAction>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"request\"\n                            onClick={() => {\n                                claimData === undefined || !reqAccepted()\n                                    ? submitClaimReq(lockParam)\n                                    : submitTokenClaim(claimId);\n                            }}\n                            color=\"primary\"\n                            disabled={\n                                sendingRequest ||\n                                claimData?.complete.valueOf() ||\n                                claimingLock ||\n                                (claimData && !hasAllVotes())\n                            }\n                        >\n                            <ActionIcon />\n                        </IconButton>\n                        {sendingRequest || claimingLock ? (\n                            <CircularProgress size={24} className={classes.iconProgress} />\n                        ) : null}\n                    </div>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading, IonButton } from '@ionic/react';\nimport React from 'react';\nimport LockdropForm from '../components/EthLock/LockdropForm';\nimport { connectWeb3, getAllLockEvents, submitLockTx, getPubKey } from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockInput, LockEvent, LockdropType, Lockdrop } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { removeWeb3Event } from '../helpers/getWeb3';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Container } from '@material-ui/core';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport { ApiPromise } from '@polkadot/api';\nimport * as polkadotUtil from '@polkadot/util-crypto';\nimport ClaimStatus from 'src/components/ClaimStatus';\n\nconst formInfo = `This is the lockdrop form for Ethereum.\nThis uses Web3 injection so you must have Metamask (or other Web3-enabled wallet) installed in order for this to work properly.\nIf you find any errors or find issues with this form, please contact the Plasm team.\nRegarding the audit by Quantstamp, click <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a> for more details`;\n\ninterface PageStates {\n    web3: Web3;\n    plasmApi: ApiPromise;\n    accounts: string[];\n    contract: Contract;\n    isLoading: boolean;\n    networkType: string;\n    isProcessing: boolean;\n    allLockEvents: LockEvent[];\n    lockParams: Lockdrop[];\n    error: null;\n    fetchingLockData: boolean;\n    publicKey: string;\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nclass DustyEthLockPage extends React.Component<{}, PageStates> {\n    constructor(props: {}) {\n        super(props);\n        // initialize with null values\n        this.state = {\n            web3: {} as Web3,\n            plasmApi: {} as ApiPromise,\n            accounts: [''],\n            contract: {} as Contract,\n            isLoading: true,\n            networkType: '',\n            isProcessing: false,\n            allLockEvents: [],\n            lockParams: [],\n            error: null,\n            fetchingLockData: true,\n            publicKey: '',\n        };\n    }\n\n    // used for fetching data periodically\n    timerInterval: any;\n\n    // get and set the web3 state when the component is mounted\n    componentDidMount = async () => {\n        try {\n            const web3State = await connectWeb3('secondLock');\n            this.setState(web3State);\n            const plasmNode = await plasmUtils.createPlasmInstance(plasmUtils.PlasmNetwork.Dusty);\n            this.setState({ plasmApi: plasmNode });\n\n            // checks if account has changed in MetaMask\n            if ((window as any).ethereum.on) {\n                (window as any).ethereum.on('accountsChanged', this.handleAccountChange);\n            }\n\n            this.setState({ networkType: await this.state.web3.eth.net.getNetworkType() });\n        } catch (e) {\n            this.setState({ error: e });\n            console.log(e);\n        }\n\n        this.timerInterval = setInterval(() => {\n            this.getLockData().then(() => {\n                this.setState({ isLoading: false });\n            });\n        }, 5000);\n    };\n\n    isMainnet = () => {\n        return this.state.networkType === 'main';\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerInterval);\n        removeWeb3Event();\n    };\n\n    // called when the user changes MetaMask account\n    handleAccountChange = () => {\n        // refresh the page\n        window.location.reload(false);\n    };\n\n    getLockData = async () => {\n        try {\n            // get all the lock events from the chain\n            const _allLocks = await getAllLockEvents(this.state.web3, this.state.contract);\n\n            if (this.state.publicKey) {\n                const _lockParam = this.getClaimParams();\n                this.setState({ lockParams: _lockParam });\n            }\n\n            this.setState({ allLockEvents: _allLocks });\n        } catch (error) {\n            this.setState({ error });\n            console.log(error);\n        }\n    };\n\n    setPublicKey = () => {\n        if (!this.state.publicKey) {\n            getPubKey(\n                this.state.web3,\n                `Sign this message to submit a lock request.\n                This action is required for the real-time lockdrop module\n                ${polkadotUtil.randomAsHex(3)}`,\n            )\n                .then(pub => {\n                    console.log('public: ' + pub);\n                    this.setState({ publicKey: pub });\n                })\n                .catch(e => {\n                    toast.error(e.message.toString());\n                    console.log(e);\n                });\n        }\n    };\n\n    /**\n     * Obtains list of lockdrop claim parameters\n     */\n    getClaimParams = () => {\n        const userLocks = this.state.allLockEvents.filter(i => i.lockOwner === this.state.accounts[0]);\n        const claimIDs = userLocks.map(lock => {\n            const _param = plasmUtils.createLockParam(\n                LockdropType.Ethereum,\n                lock.transactionHash,\n                this.state.publicKey,\n                this.durationToEpoch(lock.duration).toString(),\n                lock.eth.toString(),\n            );\n            return plasmUtils.structToLockdrop(_param as any);\n        });\n\n        return claimIDs;\n    };\n\n    durationToEpoch = (duration: number) => {\n        const epochDays = 60 * 60 * 24;\n        return duration * epochDays;\n    };\n\n    handleSubmit = async (formInputVal: LockInput) => {\n        this.setState({ isProcessing: true });\n        try {\n            if (!this.state.publicKey) {\n                const _publicKey = await getPubKey(\n                    this.state.web3,\n                    `Sign this message to submit a lock request.\n                This action is required for the real-time lockdrop module\n                ${polkadotUtil.randomAsHex(3)}`,\n                );\n\n                this.setState({ publicKey: _publicKey });\n            }\n\n            await submitLockTx(formInputVal, this.state.accounts[0], this.state.contract);\n            toast.success(`Successfully locked ${formInputVal.amount} ETH for ${formInputVal.duration} days!`);\n        } catch (e) {\n            toast.error(e.message.toString());\n            console.log(e);\n        }\n\n        this.setState({ isProcessing: false });\n    };\n\n    render() {\n        return (\n            <IonPage>\n                <Navbar />\n                <IonContent>\n                    <>\n                        {this.state.isLoading ? (\n                            <IonLoading isOpen={true} message={'Connecting to Wallet and fetching chain data...'} />\n                        ) : (\n                            <>\n                                {this.state.isProcessing && (\n                                    <IonLoading\n                                        isOpen={this.state.isProcessing}\n                                        message={'Processing Transaction...'}\n                                    />\n                                )}\n\n                                {this.isMainnet() ? (\n                                    <SectionCard maxWidth=\"lg\">\n                                        <Typography variant=\"h2\" component=\"h4\" align=\"center\">\n                                            Please access this page with a Ethereum testnet wallet (Ropsten)\n                                        </Typography>\n                                    </SectionCard>\n                                ) : (\n                                    <>\n                                        <LockdropForm\n                                            token=\"ETH\"\n                                            onSubmit={this.handleSubmit}\n                                            description={formInfo}\n                                            dusty\n                                        />\n\n                                        <SectionCard maxWidth=\"lg\">\n                                            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                                Real-time Lockdrop Status\n                                            </Typography>\n                                            {this.state.publicKey ? (\n                                                <ClaimStatus\n                                                    claimParams={this.state.lockParams}\n                                                    plasmApi={this.state.plasmApi}\n                                                    networkType=\"ETH\"\n                                                    plasmNetwork=\"Dusty\"\n                                                    publicKey={this.state.publicKey}\n                                                />\n                                            ) : (\n                                                <>\n                                                    <Container>\n                                                        <IonButton expand=\"block\" onClick={() => this.setPublicKey()}>\n                                                            Click to view lock claims\n                                                        </IonButton>\n                                                    </Container>\n                                                </>\n                                            )}\n                                        </SectionCard>\n\n                                        <LockedEthList\n                                            web3={this.state.web3}\n                                            accounts={this.state.accounts}\n                                            lockData={this.state.allLockEvents}\n                                        />\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </>\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        );\n    }\n}\nexport default DustyEthLockPage;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { IonMenu, IonListHeader, IonContent, IonList, IonItem, IonIcon, IonLabel, IonRouterLink } from '@ionic/react';\nimport { Links } from '../data/links';\nimport homeIcon from '../resources/home-outline.svg';\nimport twitter from '../resources/logo-twitter.svg';\nimport discord from '../resources/logo-discord.svg';\nimport telegram from '../resources/logo-telegram.svg';\nimport github from '../resources/logo-github.svg';\nimport { firstLock, secondLock, dustyLock } from '../data/lockInfo';\nimport { LockMenu } from '../types/LockdropModels';\n\ninterface Props {\n    headerText: string;\n    menuItems: LockMenu[];\n}\nconst MenuSection: React.FC<Props> = ({ headerText, menuItems }) => {\n    return (\n        <IonList>\n            <IonListHeader>{headerText}</IonListHeader>\n            {menuItems.map((i, index) => (\n                <IonRouterLink routerLink={i.uri} key={index}>\n                    <IonItem button detail disabled={i.disabled}>\n                        <IonIcon src={i.icon} slot=\"start\" />\n                        <IonLabel>{i.title}</IonLabel>\n                    </IonItem>\n                </IonRouterLink>\n            ))}\n        </IonList>\n    );\n};\n\nconst SideMenu: React.FC = () => {\n    return (\n        <>\n            <IonMenu contentId=\"main\">\n                <IonListHeader>Sitemap</IonListHeader>\n                <IonContent>\n                    <IonList>\n                        <IonRouterLink routerLink=\"/lock-form\">\n                            <IonItem button detail>\n                                <IonIcon src={homeIcon} slot=\"start\" />\n                                <IonLabel>Home</IonLabel>\n                            </IonItem>\n                        </IonRouterLink>\n                    </IonList>\n\n                    <MenuSection headerText=\"First Lockdrop\" menuItems={firstLock} />\n                    <MenuSection headerText=\"Second Lockdrop\" menuItems={secondLock} />\n                    <MenuSection headerText=\"Dusty Lockdrop\" menuItems={dustyLock} />\n\n                    <IonList>\n                        <IonListHeader>External Links</IonListHeader>\n                        <a href={Links.discord} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={discord} slot=\"start\" />\n                                <IonLabel>Discord</IonLabel>\n                            </IonItem>\n                        </a>\n                        <a href={Links.telegram} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={telegram} slot=\"start\" />\n                                <IonLabel>Telegram</IonLabel>\n                            </IonItem>\n                        </a>\n                        <a href={Links.twitter} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={twitter} slot=\"start\" />\n                                <IonLabel>Twitter</IonLabel>\n                            </IonItem>\n                        </a>\n                        <a href={Links.github} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={github} slot=\"start\" />\n                                <IonLabel>Github</IonLabel>\n                            </IonItem>\n                        </a>\n                    </IonList>\n                </IonContent>\n            </IonMenu>\n        </>\n    );\n};\n\nexport default SideMenu;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet, IonSplitPane } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport LandingPage from './pages/LandingPage';\nimport EthLockdropPage from './pages/EthLockdropPage';\nimport DustyEthLockPage from './pages/DustyEthLockPage';\n//import DustyBtcLockPage from './pages/DustyBtcLockPage';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\nimport SideMenu from './components/SideMenu';\n\nconst App: React.FC = () => {\n    return (\n        <IonApp>\n            <IonReactHashRouter>\n                <IonSplitPane contentId=\"main\" when=\"lg\">\n                    <SideMenu />\n\n                    <IonRouterOutlet id=\"main\" animated>\n                        <Route exact path=\"/lock-form\" component={LandingPage} />\n                        <Route path=\"/lock-form/first\" component={EthLockdropPage} />\n                        <Route path=\"/lock-form/dusty-eth\" component={DustyEthLockPage} />\n                        {/* <Route path=\"/lock-form/dusty-btc\" component={DustyBtcLockPage} /> */}\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/lock-form\" />} />\n                    </IonRouterOutlet>\n                </IonSplitPane>\n            </IonReactHashRouter>\n        </IonApp>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable-line  no-use-before-define */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\n\n// define web3 instance as a global variable\ndeclare global {\n    interface Window {\n        web3: Web3;\n        contract: Contract;\n    }\n}\nwindow.contract = window.contract || {};\nwindow.web3 = window.web3 || {};\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n            'Work Sans',\n            '-apple-system',\n            'BlinkMacSystemFont',\n            'Segoe UI',\n            'Roboto',\n            'Oxygen',\n            'Ubuntu',\n            'Cantarell',\n            'Fira Sans',\n            'Droid Sans',\n            'Helvetica Neue',\n        ].join(','),\n    },\n    palette: {\n        primary: {\n            main: '#4791db',\n            light: '#1976d2',\n            dark: '#115293',\n        },\n    },\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bitcoin_logo.c200e932.svg\";"],"sourceRoot":""}