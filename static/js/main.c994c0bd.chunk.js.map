{"version":3,"sources":["resources/plasm-logo.png","resources/ld_logo_a.png","resources/ld_logo_b.png","data/UserAgreement.md","resources/plasm-icon.svg","resources/dusty-icon.svg","resources/home-outline.svg","resources/logo-twitter.svg","resources/logo-discord.svg","resources/logo-telegram.svg","resources/logo-github.svg","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm/legacy lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","resources/ethereum_logo.svg","components/Navbar.tsx","data/links.ts","theme/themes.ts","components/Footer.tsx","components/SectionCard.tsx","data/lockInfo.ts","components/TosAgreementModal.tsx","pages/LandingPage.tsx","helpers/getWeb3.ts","data/affiliationProgram.ts","types/PlasmDrop.ts","helpers/lockdrop/EthereumLockdrop.ts","components/EthLock/CurrentLocks.tsx","components/EthLock/EthGlobalLocks.tsx","components/EthLock/LockedEthList.tsx","components/EthLock/LockdropCountdownPanel.tsx","components/EthLock/LockdropResult.tsx","components/EthLock/AffiliationList.tsx","pages/EthLockdropPage.tsx","components/DropdownOption.tsx","components/EthLock/LockdropForm.tsx","components/ClaimStatus.tsx","pages/DustyEthLockPage.tsx","components/CountdownTimer.tsx","components/BtcLock/LockStatus.tsx","components/CopyMessageBox.tsx","components/BtcLock/QrEncodedAddress.tsx","components/BtcLock/BtcRawSignature.tsx","pages/DustyBtcLockPage.tsx","components/SideMenu.tsx","App.tsx","serviceWorker.ts","index.tsx","types/LockdropModels.ts","resources/bitcoin_logo.svg","resources/quantstamp-logo.png","helpers/plasmUtils.ts","helpers/lockdrop/BitcoinLockdrop.ts"],"names":["module","exports","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","useStyles","makeStyles","theme","createStyles","grow","flexGrow","navbar","backgroundColor","logoIcon","margin","spacing","maxHeight","height","verticalAlign","title","color","inputRoot","sectionDesktop","display","breakpoints","up","sectionMobile","listItem","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Navbar","classes","className","slot","src","plasmLogo","alt","Links","Community","description","link","icon","Company","Products","Collaboration","Blogs","ThemeColors","Copyright","Typography","variant","Date","getFullYear","Link","href","rel","target","root","marginTop","socialIcon","paddingLeft","footer","padding","footerHeader","siteMap","StickyFooter","Container","maxWidth","Grid","container","justify","item","component","align","Divider","List","company","key","ListItem","button","ListItemText","primary","product","collaboration","blog","community","SectionCard","children","paper","Paper","elevation","firstLockdropStart","moment","unix","firstLockdropEnd","clone","add","secondLockdropStart","secondLockdropEnd","lockdropContracts","firstLock","main","ropsten","private","Lockdrop","networks","address","secondLock","thirdLock","ethDurations","label","value","rate","ethDustyDurations","btcDurations","btcDustyDurations","uri","ethLogo","startDate","endDate","disabled","dustyLock","btcLogo","textBox","marginLeft","marginRight","TosAgreementModal","showModal","onAgree","useState","toc","setToc","useEffect","fetch","tosContent","data","text","isOpen","backdropDismiss","source","escapeHtml","expand","onClick","agree","lockdropLogo","Math","floor","random","lockdropLogoA","lockdropLogoB","logoImg","LandingPage","localStorage","getItem","userAgreed","setUserAgreed","setItem","toString","timezone","useMemo","zoneName","momentTimezone","tz","guess","zoneAbbr","includes","ev","fill","routerLink","format","Footer","web3Listener","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","removeWeb3Event","reject","removeEventListener","error","getWeb3","document","readyState","location","reload","addEventListener","defaultAddress","validEthAddressList","validBtcAddressList","isValidIntroducerAddress","introducer","toLowerCase","PlmDrop","receiver","basePlm","introducerAndBonuses","affiliationRefsBonuses","locks","this","totalIntroBonuses","BigNumber","i","length","plus","affBonus","calculateAffBonus","toFixed","getTotal","toFormat","calculateIntroBonus","reduce","sum","bonus","totalAmountOfPLMsForLockdrop","times","div","getPubKey","message","msg","hash","eth","accounts","hashMessage","getAccounts","addresses","personal","sign","slice","sig","res","fromRpcSig","publicKey","bufferToHex","ecrecover","toBuffer","v","r","s","compressedPubKey","EthCrypto","compress","replace","getAllLockEvents","instance","getPastEvents","fromBlock","all","returnValues","getTransaction","transactionHash","eventHashes","blockHash","lockEvent","getBlock","blockNumber","transactionString","time","timestamp","duration","lock","blockNo","lockOwner","from","defaultAffiliation","aff","plmBaseIssueRatio","lockData","ethExchangeRate","bonusRate","lockDurationToRate","Web3Utils","fromWei","totalPlmBaseIssuingRate","allLocks","plmBaseIssueAmountInLock","totalPlmsRate","currentIssue","calculateTotalPlm","receivingPlm","currentAddressLocks","filter","totalPlmRate","issuingPlm","push","allRefs","results","refEvents","getAllAffReferences","getTotalLockVal","totalVal","currentEth","createContractInstance","contractAddress","lockdropAbi","abi","Contract","connectWeb3","contract","getContractEndDate","methods","LOCK_END_TIME","call","_lockdropEndDate","getContractStartDate","LOCK_START_TIME","_lockdropStartDate","submitLockTx","txInput","amount","BN","affiliation","utils","isAddress","amountToSend","toWei","send","on","listRoot","palette","background","position","overflow","listSection","ul","lockListPage","textAlign","tabMenu","itemButtons","alignContent","UnlockInfo","lockInfo","getUnlockDate","useCallback","Number","calculateTimeLeft","tillEnd","now","days","hours","minutes","seconds","canUnlock","setLockState","tillUnlock","setUnlockDate","unlocked","setUnlockState","isLoading","setLoading","checkUnlock","today","lockedDay","unlockDate","getBalance","lockBalance","interval","setInterval","clearInterval","alignItems","xs","LinearProgress","ListItemSecondaryAction","Tooltip","aria-label","IconButton","edge","sendTransaction","to","catch","finally","err","CurrentLocks","lockEvents","setEvents","isLoadingComp","setLoadState","CircularProgress","subheader","ListSubheader","eventItem","GlobalLocks","TabPanel","props","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","LockState","LockedEthList","useTheme","React","setValue","AppBar","Tabs","onChange","_event","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","LockdropCountdownPanel","startTime","endTime","utc","tillStart","valueOf","difference","diff","timeLeft","getLockState","notStart","start","end","setTimeLeft","lockState","totalLockVal","setTotalLockVal","getLockValue","_totalLockVal","PanelWrapper","LockdropResult","pageContent","header","claimButton","totalPlm","setTotalPlm","exRate","setExRate","showIntoRefPopover","setShowIntroRefPopover","showIntoPopover","setShowIntroPopover","totalIssue","countupTotalPlmVal","getTotalPlm","toNumber","decimals","separator","getAffBonus","onDidDismiss","getIntroBonus","IntoRefItems","IntoAffItems","ClaimPlm","paddingTop","addressPanel","nested","plmAddress","setPlmAddress","ethPubkey","setEthPubkey","open","setOpen","getPlasmAddress","pubKey","result","generatePlmAddress","size","ListItemIcon","Collapse","in","timeout","unmountOnExit","IntroducerBonusesItems","lockResult","AffiliationList","lockdropResult","setLockdropResult","sort","b","getAffiliationResults","toast","configure","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","EthLockdropPage","setWeb3","setAccounts","setContract","loading","networkType","setNetworkType","allLockEvents","setLockEvents","lockdropStart","setLockdropStart","lockdropEnd","setLockdropEnd","isMainnet","ethLockdrop","_allLocks","web3State","net","getNetworkType","_end","_start","parseInt","DropdownOption","items","dataSets","x","indexOf","interface","onIonChange","onChoose","LockdropForm","token","onSubmit","dusty","lockAmount","setAmount","lockDuration","setDuration","affAccount","setAff","formRoot","txButton","formLabel","quantLogo","quantstampLogo","parse","placeholder","onIonInput","inputs","handleSubmit","inline","iconProgress","green","top","left","zIndex","emptyPanel","justifyContent","claimVoteIcon","ClaimStatus","claimParams","plasmApi","plasmNetwork","plasmAddr","plasmUtils","positiveVotes","setPositiveVotes","voteThreshold","setVoteThreshold","isLoadingBal","setLoadingBal","isLoadingClaims","setLoadingClaims","balance","setBalance","claims","setClaims","fetchLockData","claimIds","c","type","toHex","lockdropStates","claimRes","_bal","formatBal","parseFloat","toLocaleString","_voteReq","lockParam","claimData","ClaimItem","claimId","sendingRequest","setSendingRequest","claimingLock","setClaimingLock","approveList","setApproveList","declineList","setDeclineList","showApproves","setShowApproves","showDeclines","setShowDeclines","hasAllVotes","reqAccepted","_claim","approves","approve","toJSON","decline","setVoteList","complete","epoch","str","num","ActionIcon","undefined","authority","Icon","plasmIcon","dustyIcon","btcLockdrop","Badge","badgeContent","showZero","max","anchorOrigin","vertical","horizontal","submitTokenClaim","param","_lock","_nonce","submitClaimReq","DustyEthLockPage","setPlasmApi","setContractAddress","ethNetworkType","setEthNetworkType","lockParams","setLockParams","setPublicKey","getClaimParams","ethAccount","isOwnedLock","hasTimePast","_param","LockdropType","Ethereum","_lockParam","Dusty","plasmNode","_contract","handleGetPublicKey","polkadotUtil","_pub","formInputVal","_publicKey","success","options","CountdownTimer","onFinish","handleCountdownFinish","didFinish","_timeLeft","LockStatus","onUnlock","scriptAddress","lockDurationDay","lockedValue","setLockedValue","setShowModal","setCanUnlock","getLockBal","_lockVout","vout","find","locked","scriptpubkey_address","totalBal","forEach","txid","status","confirmed","block_height","block_time","u","name","messageBox","signMessage","wordBreak","copyIcon","CopyMessageBox","componentType","isCode","showCopyToast","setCopyToast","navigator","clipboard","writeText","qrImage","boxSizing","alignSelf","objectFit","imageSkeleton","chipGrid","statusChip","right","QrEncodedAddress","imageUri","setUri","imageLoaded","setImageLoad","qrEncodeUri","img","style","onLoad","animated","sm","BtcRawSignature","networkLockDur","bitcoinjs","bitcoin","sigInput","setSig","addressInput","setAddress","p2shAddress","setP2sh","allLockParams","setAllLockParams","currentScriptLocks","setCurrentScriptLocks","loadState","lockUtxo","setLockUtxo","unlockTxBuilder","setUnlockTxBuilder","userUnlockSig","setUserUnlockSig","unlockUtxoHex","setUnlockUtxoHex","unlockFee","setUnlockFee","sigNonce","polkadotCrypto","isValidFee","fee","lockTx","isNaN","val","RegExp","test","lockP2sh","btcLock","_fee","lockVout","sigHash","unsigned","unsignedUnlockTx","signatureHash","getUnlockUtxo","lockScript","signedUnlockUtxo","_net","unlockTxId","cleanUnlockTxState","fetchLockdropParams","blockStreamNet","_lockParams","dur","scriptAddr","daysToEpoch","lockVal","Bitcoin","currentParam","detail","_inputFee","_msg","bitcoinjsMessage","pub","p2sh","DustyBtcLockPage","testnet","MenuSection","headerText","menuItems","SideMenu","contentId","homeIcon","discord","telegram","twitter","github","App","when","exact","path","render","Boolean","hostname","match","createMuiTheme","fontFamily","join","light","dark","ReactDOM","getElementById","serviceWorker","ready","registration","unregister","BtcWalletType","LockSeason","PlasmNetwork","femtoToPlm","femto","isLessThanOrEqualTo","plmDenominator","pow","dividedBy","claimPowNonce","nonce","polkadotUtilCrypto","u8aConcat","plasmTypeReg","TypeRegistry","createPlasmInstance","network","endpoint","types","values","plasmDefinitions","Local","Main","wsProvider","WsProvider","ApiPromise","create","Address","Keys","StakingLedger","Votes","ReferendumInfo","typesAlias","voting","Tally","createLockParam","Struct","u8","U8aFixed","u64","u128","sendLockClaimRequest","api","tx","plasmLockdrop","claimRequestTx","request","toU8a","txHash","plasmPubKey","hexString","substr","Uint8Array","toByteArray","getAddressBalance","plasmAddress","asPlm","query","system","account","free","getLockdropVoteRequirements","_voteThreshold","_positiveVotes","sendLockdropClaim","claim","getClaimStatus","params","get","entries","structToLockdrop","lockdropParam","MESSAGE","btcAddress","URL","blob","qrCode","createObjectURL","getBtcTxsFromAddress","txs","JSON","broadcastTransaction","txHex","method","body","headers","responseText","ok","validateBtcAddress","toOutputScript","validatePublicKey","fromPublicKey","Buffer","p2pkh","pubkey","satoshiToBitcoin","satoshi","denominator","_satNum","getPublicKey","signature","addressNetwork","getNetworkFromAddress","_pubKey","daysToBlockSequence","isInteger","isFinite","blockSequence","bip68","encode","blocks","btcLockScript","publicKeyHex","pubKeyBuffer","compressed","compressPubKey","fromASM","number","trim","getLockP2SH","lockDays","redeem","output","lockTransaction","txFee","version","addInput","reverse","addOutput","hashType","SIGHASH_ALL","hashForSignature","signTransactionRaw","unsignedTx","rawSignature","redeemScriptSig","input","compile","setInputScript"],"mappings":"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","file":"static/js/main.c994c0bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plasm-logo.e814f1e5.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_a.c31d8b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_b.5a855f2c.png\";","module.exports = __webpack_public_path__ + \"static/media/UserAgreement.fd3c8e89.md\";","module.exports = __webpack_public_path__ + \"static/media/plasm-icon.cee6d05f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dusty-icon.acfa536a.svg\";","module.exports = __webpack_public_path__ + \"static/media/home-outline.5d4dea4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-twitter.27ff8f62.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-discord.fee2b0c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-telegram.ed1ca736.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-github.01fb3515.svg\";","var map = {\n\t\"./ion-action-sheet-controller_8.entry.js\": [\n\t\t2760,\n\t\t43\n\t],\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t2761,\n\t\t44\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t2762,\n\t\t45\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t2763,\n\t\t24\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t2764,\n\t\t25\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t2765,\n\t\t11\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t2766,\n\t\t12\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t2767,\n\t\t46\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t2768,\n\t\t47\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t2769,\n\t\t48\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t2770,\n\t\t49\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t2771,\n\t\t81\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t2772,\n\t\t82\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t2773,\n\t\t50\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t2774,\n\t\t51\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t2775,\n\t\t52\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t2776,\n\t\t53\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t2777,\n\t\t54\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t2778,\n\t\t55\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t2779,\n\t\t56\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t2780,\n\t\t57\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t2781,\n\t\t83\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t2782,\n\t\t20\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t2783,\n\t\t21\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t2784,\n\t\t58\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t2785,\n\t\t59\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t2786,\n\t\t84\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t2787,\n\t\t39\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t2788,\n\t\t40\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t2789,\n\t\t60\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t2790,\n\t\t61\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t2791,\n\t\t62\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t2792,\n\t\t63\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t2793,\n\t\t64\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t2794,\n\t\t65\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t2795,\n\t\t26\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t2796,\n\t\t27\n\t],\n\t\"./ion-menu_4-ios.entry.js\": [\n\t\t2797,\n\t\t18\n\t],\n\t\"./ion-menu_4-md.entry.js\": [\n\t\t2798,\n\t\t19\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t2799,\n\t\t14\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t2800,\n\t\t15\n\t],\n\t\"./ion-nav_5.entry.js\": [\n\t\t2801,\n\t\t13\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t2802,\n\t\t16\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t2803,\n\t\t17\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t2804,\n\t\t66\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t2805,\n\t\t67\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t2806,\n\t\t32\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t2807,\n\t\t33\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t2808,\n\t\t68\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t2809,\n\t\t69\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t2810,\n\t\t41\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t2811,\n\t\t42\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t2812,\n\t\t37\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t2813,\n\t\t38\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t2814,\n\t\t85\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t2815,\n\t\t70\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t2816,\n\t\t28\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t2817,\n\t\t29\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t2818,\n\t\t71\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t2819,\n\t\t72\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t2820,\n\t\t34\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t2821,\n\t\t35\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t2822,\n\t\t86\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t2823,\n\t\t87\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t2824,\n\t\t73\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t2825,\n\t\t88\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t2826,\n\t\t89\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t2827,\n\t\t74\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t2828,\n\t\t75\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t2829,\n\t\t36\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t2830,\n\t\t76\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t2831,\n\t\t77\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t2832,\n\t\t78\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t2833,\n\t\t30\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t2834,\n\t\t31\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t2835,\n\t\t22\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t2836,\n\t\t23\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t2837,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1154;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t2841,\n\t\t98\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1156;\nmodule.exports = webpackAsyncContext;","module.exports = __webpack_public_path__ + \"static/media/ethereum_logo.802c6eac.svg\";","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { IonHeader, IonButtons, IonMenuButton, IonToolbar, IonTitle } from '@ionic/react';\nimport plasmLogo from '../resources/plasm-logo.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        grow: {\n            flexGrow: 1,\n        },\n        navbar: {\n            backgroundColor: 'black',\n        },\n        logoIcon: {\n            margin: theme.spacing(1),\n            maxHeight: 45,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        title: {\n            color: 'white',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        sectionDesktop: {\n            display: 'none',\n            [theme.breakpoints.up('md')]: {\n                display: 'flex',\n            },\n        },\n        sectionMobile: {\n            display: 'flex',\n            [theme.breakpoints.up('md')]: {\n                display: 'none',\n            },\n        },\n        listItem: {\n            width: '100%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            fontWeight: theme.typography.fontWeightRegular,\n        },\n    }),\n);\n\nexport default function Navbar() {\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonHeader className={classes.navbar}>\n                <IonToolbar color=\"black\">\n                    <IonButtons slot=\"start\">\n                        <IonMenuButton className={classes.title} />\n                        <img className={classes.logoIcon} src={plasmLogo} alt=\"\" />\n                    </IonButtons>\n                    <IonTitle className={classes.title}>Plasm Network</IonTitle>\n                </IonToolbar>\n            </IonHeader>\n        </>\n    );\n}\n","export const Links = {\n    docs: 'https://docs.plasmnet.io',\n    blog: 'https://medium.com/stake-technologies',\n    twitter: 'https://twitter.com/Plasm_Network',\n    github: 'https://github.com/staketechnologies/Plasm',\n    telegram: 'https://t.me/PlasmOfficial',\n    discord: 'https://discordapp.com/invite/Dnfn5eT',\n    email: 'info@stake.co.jp',\n    home: 'https://stake.co.jp/',\n    plasmHome: 'https://plasmnet.io/',\n};\n\nexport const SponsorLinks = {\n    cryptoEconomicsLab: 'https://www.cryptoeconomicslab.com/',\n    parityTechnologies: 'https://www.parity.io/',\n    web3Foundation: 'https://web3.foundation/',\n    longhash: 'https://longhash.co.jp/en/',\n    universityOfTokyo: 'https://www.u-tokyo.ac.jp/en/index.html',\n    connect: 'https://www.blockchain.t.u-tokyo.ac.jp/',\n    parityBuilders: 'https://builders.parity.io/',\n    acala: 'https://acala.network/',\n};\n\nexport const BlogLinks = {\n    lockdropIntroduction: 'https://medium.com/stake-technologies/plasm-lockdrop-introduction-54614592a13',\n};\n\nexport const AppLinks = {\n    plasmnetIo: 'https://apps.plasmnet.io/',\n    polkadotNetwork: 'https://telemetry.polkadot.io/#list/Plasm%20Testnet%20v3',\n    joinLockdrop: 'https://lockdrop.plasmnet.io',\n    inkPlayground: 'https://ink-playground.com/',\n};\n\nexport const Whitepaper = [\n    {\n        description: 'English',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/en.pdf',\n        icon: `sticky note outline`,\n    },\n    {\n        description: 'Japanese',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/jp.pdf',\n        icon: `sticky note outline`,\n    },\n];\n\nexport const Community = [\n    {\n        description: 'Discord',\n        link: Links.discord,\n        icon: 'discord',\n    },\n    {\n        description: 'Telegram',\n        link: Links.telegram,\n        icon: 'telegram',\n    },\n];\n\nexport const Company = [\n    {\n        description: 'Home',\n        link: Links.home,\n    },\n    {\n        description: 'Contact us',\n        link: `mailto:${Links.email}`,\n    },\n];\n\nexport const Products = [\n    {\n        description: 'Plasm',\n        link: 'https://github.com/staketechnologies/Plasm',\n    },\n    {\n        description: 'Plasm Portal Sites',\n        link: 'https://github.com/staketechnologies/apps',\n    },\n    {\n        description: 'Plasm Lockdrop',\n        link: 'https://github.com/staketechnologies/lockdrop-ui',\n    },\n    {\n        description: 'Plasm documentations',\n        link: 'https://github.com/staketechnologies/plasmdocs',\n    },\n    {\n        description: 'Plasm homepage',\n        link: 'https://github.com/staketechnologies/plasmnet.io',\n    },\n];\n\nexport const Collaboration = [\n    {\n        description: 'Substrate Builders Program',\n        link: 'https://builders.parity.io/',\n    },\n    {\n        description: 'Web3 foundation grants program',\n        link: 'https://web3.foundation/',\n    },\n];\n\nexport const Blogs = [\n    {\n        description: 'Medium',\n        link: Links.blog,\n    },\n];\n\nexport const Discussions = [\n    {\n        link: Links.discord,\n        className: 'discord',\n    },\n    {\n        link: Links.telegram,\n        className: 'telegram',\n    },\n    {\n        link: Links.twitter,\n        className: 'twitter',\n    },\n    {\n        link: Links.github,\n        className: 'github',\n    },\n];\n","export const ThemeColors = {\n    darkGrey: '#383838',\n    lightGrey: '#999999',\n    white: '#ffffff',\n    black: '#000000',\n    darkBlue: '#2C3E50',\n    orange: '#FF5838',\n    darkRed: '#5c0f0f',\n    blue: '#4C8DFF',\n    lightBlue: '#56ccf2',\n};\n\nexport const ThemeFontFamily = {\n    logo: 'sans',\n    paragraph: 'not sans',\n};\n\nconst colors = {\n    transparent: 'rgba(0, 0, 0, 0)',\n    footerTransparent: 'rgba(0, 0, 0, 0.12)',\n    navy: '#1d417f',\n    ceruleanBlue: '#102e83',\n    blue: '#2179ee',\n    lightBlue: '#56ccf2',\n    periwinkle: '#D4D3E9',\n    teal: '#00FFD1',\n    green: '#28D24E',\n    crimson: '#DC143C',\n    red: '#D22828',\n    lightRed: '#ED0257',\n    coral: '#ff6759',\n    pink: '#FF17E8',\n    gold: '#f0b95b',\n    yellow: '#FFC700',\n    purple: '#7537ef',\n    lightPurple: '#56408B',\n    darkPurple: 'rgba(10, 7, 82, 0.75)',\n    softPurple: '#9795C5',\n    white: '#ffffff',\n    creamWhite: '#f4f5f7',\n    black: '#000000',\n    grey: '#333333',\n    lightGrey: 'grey',\n    softGrey: '#1D1B4D',\n    slaty: '#797992',\n    lavender: '#e5e5f8',\n    rat: '#cecddc',\n};\n\nconst secondaryColors = {\n    grey10: '#f3f4f8',\n    grey20: '#e1e5eb',\n    grey30: '#c2c6cc',\n    grey40: '#9ea2a8',\n    grey50: '#686c73',\n    grey60: '#30363d',\n    blue10: '#ade7ff',\n    blue20: '#61bcff',\n    blue30: '#2179ee',\n    blue40: '#1f4ab4',\n    blue50: '#1d2064',\n    green10: '#b5ffcb',\n    green20: '#5dffa3',\n    green30: '#00cc9a',\n    green40: '#219a8a',\n    green50: '#183f51',\n    purple10: '#dec7ff',\n    purple20: '#a673ff',\n    purple30: '#7537ef',\n    purple40: '#4e23b6',\n    purple50: '#2d1b64',\n    coral10: '#ffc6b3',\n    coral20: '#ff8e75',\n    coral30: '#ff6759',\n    coral40: '#eb312a',\n    coral50: '#7b1e30',\n    gold10: '#ffedc2',\n    gold20: '#ffda8b',\n    gold30: '#f0b95b',\n    gold40: '#e5a229',\n    gold50: '#6a4a24',\n};\n\nconst breakpoints = ['31.25em', '43.75em', '46.875em'];\nconst fontSizes = ['1.2rem', '1.4rem', '1.6rem', '1.8rem', '2.4rem', '2.8rem', '3.2rem', '4.0rem', '4.8rem', '6.4rem'];\nconst space = ['0', '.4rem', '.8rem', '1.2rem', '1.6rem', '2.0rem', '3.2rem', '4.8rem', '6.4rem', '9.6rem'];\n\nconst font =\n    'Work Sans, sans-serif, -apple-system, BlinkMacSystemFont,\"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\"Droid Sans\", \"Helvetica Neue\";-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n\nexport interface StyleClosetTheme {\n    breakpoints: string[];\n    fontSizes: string[];\n    space: string[];\n    colors: { [key in keyof typeof colors]: string };\n    secondaryColors: { [key in keyof typeof secondaryColors]: string };\n    font: string;\n}\n\nexport const theme: StyleClosetTheme = {\n    breakpoints,\n    fontSizes,\n    space,\n    colors,\n    secondaryColors,\n    font,\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport { Company, Products, Collaboration, Blogs, Community } from '../data/links';\nimport Divider from '@material-ui/core/Divider';\nimport { ThemeColors } from '../theme/themes';\n\nconst Copyright = () => {\n    return (\n        <>\n            <Typography variant=\"body2\">\n                {'© 2019-' + new Date().getFullYear() + ' '}\n                <Link color=\"inherit\" href=\"https://stake.co.jp/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                    Stake Technologies, Inc.\n                </Link>{' '}\n                {'All Rights Reserved.'}\n            </Typography>\n        </>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(10),\n    },\n    socialIcon: {\n        color: 'white',\n        fontSize: 60,\n        paddingLeft: theme.spacing(1),\n    },\n    footer: {\n        padding: theme.spacing(2),\n        backgroundColor: 'white',\n        color: 'black',\n    },\n    footerHeader: {\n        color: ThemeColors.darkBlue,\n    },\n    siteMap: {},\n}));\n\nconst StickyFooter = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <footer className={classes.footer}>\n                <Container maxWidth=\"lg\">\n                    <Grid container spacing={4} justify=\"center\" className={classes.siteMap}>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Company\n                            </Typography>\n                            <Divider />\n\n                            <List component=\"nav\">\n                                {Company.map(company => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={company.link}\n                                        key={company.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={company.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Repositories\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Products.map(product => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={product.link}\n                                        key={product.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={product.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Collaboration\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Collaboration.map(collaboration => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={collaboration.link}\n                                        key={collaboration.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={collaboration.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Blog\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Blogs.map(blog => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={blog.link}\n                                        key={blog.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={blog.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Community\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Community.map(community => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={community.link}\n                                        key={community.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={community.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Container>\n\n                <Container maxWidth=\"sm\">\n                    <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                        <Copyright />\n                    </Typography>\n                </Container>\n            </footer>\n        </div>\n    );\n};\n\nexport default StickyFooter;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { ThemeColors } from '../theme/themes';\n\ninterface Props {\n    maxWidth: false | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | undefined;\n}\n\nconst SectionCard: React.FC<Props> = ({ maxWidth, children }) => {\n    const useStyles = makeStyles(theme => ({\n        paper: {\n            backgroundColor: ThemeColors.white,\n            padding: theme.spacing(4, 0, 4),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth={maxWidth}>\n                <Paper elevation={5} className={classes.paper}>\n                    {children}\n                </Paper>\n            </Container>\n        </>\n    );\n};\n\nexport default SectionCard;\n","import { OptionItem, LockMenu } from '../types/LockdropModels';\nimport moment from 'moment';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport Lockdrop from '../contracts/Lockdrop.json';\n\nconst LOCKDROP_DURATION = 30; // days\n\n/**\n * the time zone is set to UTC as default\n * lockdrop starts from 1584230400 epoch time\n */\nexport const firstLockdropStart = moment.unix(1584230400);\nexport const firstLockdropEnd = firstLockdropStart.clone().add(LOCKDROP_DURATION, 'days');\n\n/**\n * the time zone is set to UTC as default\n * lockdrop starts from 1598832000 epoch time\n */\nexport const secondLockdropStart = moment.unix(1598832000);\nexport const secondLockdropEnd = secondLockdropStart.clone().add(LOCKDROP_DURATION, 'days');\n\n//todo: add other contract addresses when ready\nexport const lockdropContracts = {\n    firstLock: {\n        main: '0x458DaBf1Eff8fCdfbF0896A6Bd1F457c01E2FfD6',\n        ropsten: '0xEEd84A89675342fB04faFE06F7BB176fE35Cb168',\n        private: Lockdrop.networks[5777].address,\n    },\n    secondLock: {\n        main: '0x',\n        ropsten: ['0x69e7eb3ab94a10e4f408d842b287c70aa0d11649', '0xa91E04a6ECF202A7628e0c9191676407015F5AF9'],\n        private: Lockdrop.networks[5777].address,\n    },\n    thirdLock: { main: '0x', ropsten: '0x', private: Lockdrop.networks[5777].address },\n};\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n    { label: '1000 Days', value: 1000, rate: 1600 },\n];\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n    { label: '100 Days', value: 100, rate: 1600 },\n];\n\n/**\n * BTC lockdrop does not support 1000 days lock due to CSV lock scheme\n */\nexport const btcDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n];\n\n/**\n * BTC lockdrop for Dusty network. The lock days are much shorter\n */\nexport const btcDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n];\n\nexport const firstLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n\nexport const secondLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        //uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: secondLockdropStart,\n        endDate: secondLockdropEnd,\n        disabled: true,\n    },\n    // {\n    //     title: 'BTC Lock',\n    //     uri: '/lock-form/first',\n    //     icon: btcLogo,\n    //     startDate: secondLockdropStart,\n    //     endDate: secondLockdropEnd,\n    //     disabled: true,\n    // },\n];\n\nexport const dustyLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/dusty-eth',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n    {\n        title: 'BTC Lock',\n        uri: '/lock-form/dusty-btc',\n        icon: btcLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { IonModal, IonContent, IonButton, IonLabel, IonHeader, IonToolbar, IonTitle } from '@ionic/react';\nimport ReactMarkdown from 'react-markdown';\nimport tosContent from '../data/UserAgreement.md';\nimport { makeStyles, createStyles } from '@material-ui/core';\n\ninterface Props {\n    showModal: boolean;\n    onAgree?: Function;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        textBox: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            padding: theme.spacing(4),\n        },\n    }),\n);\n\nconst TosAgreementModal: React.FC<Props> = ({ showModal, onAgree }) => {\n    const classes = useStyles();\n\n    const [toc, setToc] = useState('');\n\n    // load the markdown content as string on component mount\n    useEffect(() => {\n        fetch(tosContent)\n            .then(data => data.text())\n            .then(text => {\n                setToc(text);\n            });\n    }, []);\n\n    const handleAgreement = (agree: boolean) => {\n        if (onAgree) onAgree(agree);\n    };\n\n    return (\n        <>\n            <IonModal isOpen={showModal} backdropDismiss={false}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Lockdrop Terms of Condition</IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n\n                <IonContent>\n                    <div className={classes.textBox}>\n                        <IonLabel>\n                            <ReactMarkdown source={toc} escapeHtml={false} />\n                        </IonLabel>\n                        <IonLabel>\n                            <h2>\n                                Follow us on{' '}\n                                <a href={'https://twitter.com/plasm_network'} rel=\"noopener noreferrer\" target=\"_blank\">\n                                    Twitter\n                                </a>{' '}\n                                and{' '}\n                                <a\n                                    href={'https://t.me/joinchat/IxHd_BfELvbxC9lUYm_czw'}\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    Telegram{' '}\n                                </a>\n                                for the latest information.\n                            </h2>\n                        </IonLabel>\n                    </div>\n\n                    <IonButton expand=\"block\" onClick={() => handleAgreement(true)}>\n                        Agree\n                    </IonButton>\n                </IonContent>\n            </IonModal>\n        </>\n    );\n};\n\nexport default TosAgreementModal;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n    IonContent,\n    IonPage,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonItem,\n    IonIcon,\n    IonLabel,\n    IonButton,\n    IonRouterLink,\n} from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport lockdropLogoA from '../resources/ld_logo_a.png';\nimport lockdropLogoB from '../resources/ld_logo_b.png';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport { makeStyles } from '@material-ui/core';\nimport { firstLockdropStart, firstLockdropEnd, secondLockdropStart, secondLockdropEnd } from '../data/lockInfo';\nimport TosAgreementModal from 'src/components/TosAgreementModal';\n//import moment from 'moment';\nimport momentTimezone from 'moment-timezone';\n\n// randomize the lockdrop logo\n// this is for AB testing the logo\nconst lockdropLogo = Math.floor(Math.random() * 10) > 5 ? lockdropLogoA : lockdropLogoB;\n\nconst useStyles = makeStyles(() => ({\n    logoImg: {\n        display: 'block',\n        maxWidth: '100%',\n        width: '20rem',\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        //maxHeight: '500',\n    },\n}));\n\nexport const LandingPage: React.FC = () => {\n    const classes = useStyles();\n\n    // user session storage to store TOS state\n    const [userAgreed, setUserAgreed] = useState(localStorage.getItem('AgreedState') || 'false');\n\n    // save session every time the agreement state changes\n    useEffect(() => {\n        localStorage.setItem('AgreedState', userAgreed.toString());\n    }, [userAgreed]);\n\n    const timezone = useMemo(() => {\n        const zoneName = momentTimezone.tz.guess();\n        const timezone = momentTimezone.tz(zoneName).zoneAbbr();\n        return timezone;\n    }, []);\n\n    return (\n        <IonPage>\n            <Navbar />\n            <TosAgreementModal\n                showModal={!userAgreed.includes('true')}\n                // we convert the boolean to string (because browser session)\n                onAgree={(ev: boolean) => setUserAgreed(ev ? 'true' : 'false')}\n            />\n            <IonContent>\n                <SectionCard maxWidth=\"lg\">\n                    <img src={lockdropLogo} alt=\"\" className={classes.logoImg} />\n                    <IonCardHeader>\n                        <IonCardSubtitle>Plasm Network Lockdrop Web Application</IonCardSubtitle>\n                        <IonCardTitle>Plasm Network Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        Lockdrop is a new token distribution mechanism that emphasizes on low risk and fairness to its\n                        users. For more details, checkout{' '}\n                        <a\n                            color=\"inherit\"\n                            href=\"https://medium.com/stake-technologies/what-is-and-how-to-join-the-plasm-network-lockdrop-the-ultimate-guide-e3f4bdec83de\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            this\n                        </a>{' '}\n                        article,\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>First Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/first\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n\n                    <IonCardContent>\n                        Lock Start: {firstLockdropStart.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                        <br />\n                        Lock End: {firstLockdropEnd.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Second Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem>\n\n                    {/* <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Plasm BTC Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem> */}\n                    <IonCardContent>\n                        Lock Start: {secondLockdropStart.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                        <br />\n                        Lock End: {secondLockdropEnd.format('YYYY-MM-DD hh:mm').toString()} {timezone}\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Dusty Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Dusty ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-eth\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                    <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Dusty BTC Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-btc\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                </SectionCard>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\n\nexport default LandingPage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Web3 from 'web3';\n\nasync function web3Listener() {\n    // Modern dapp browsers...\n    if ((window as any).ethereum) {\n        const web3 = new Web3((window as any).ethereum);\n        try {\n            // Request account access if needed\n            await (window as any).ethereum.enable();\n            console.log('Dapp browser detected');\n            // Accounts now exposed\n            return web3;\n        } catch (error) {\n            return error;\n        }\n    }\n    // Legacy dapp browsers...\n    else if ((window as any).web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = (window as any).web3;\n        console.log('Injected web3 detected.');\n        return web3;\n    }\n    // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        return web3;\n    }\n}\n\nexport const removeWeb3Event = () => {\n    new Promise((resolve, reject) => {\n        try {\n            window.removeEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // check if the event was already fired\n        if (document.readyState === 'complete') {\n            // reload page to reset the event\n            window.location.reload();\n        }\n\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        try {\n            window.addEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n\nexport default getWeb3;\n","// the default introducer address when none is provided by the user\nexport const defaultAddress = '0x0000000000000000000000000000000000000000';\n\nexport const affiliationRate = 0.01;\n\nconst firstEthIntroducer = [\n    '0xd8de1f6764e442b8763d313722e9eaee3779707e',\n    '0x1d32750e8a03443f008236f7c344fc84821cf690',\n    '0xa5a6d551ab33c3920848844b3fe3b27591df8f10',\n    '0xd8068f813c45c88cebb02cbc0f91f95626ec9a34',\n    '0x45ee0a0db0e775aecbebb300ccfc6486690b3287',\n    '0xd419d53817e1daa7b2f72e51707774f3ff0a54a3',\n    '0x1080355c93a1b4c0dd3c340eed4f7e514c583077',\n    '0x0013aa2fb5ec916660b38f1d53d4fc9bf8ef8a84',\n    '0x78ce6849d00c2f22aec93d29144fc68366cf0c62',\n    '0x60dc4b3d8e8d2c5449186270f385a56a21bb82c3',\n    '0x380566185c87ab93ca4edd474cf6998b5fc4153e',\n    '0x6a61dc52015945dfc6cd0c42f94a722d5022e3d1',\n    '0x520e74218a9fd5563855f11d204810281a833e0f',\n    '0x27c72e4bd23c910218d8f06c4a1742e06657c874',\n    '0xd307ff28710b7a4587200c5ba4c67648c1f24045',\n    '0x9498db340a3ecab7bb0973ee36e95e58c8e58a41',\n    '0xe552821ee85284249c71d4abfc4437992ed2fb93',\n    '0xc78a748dccbd806ae782eb3b8590ae7d162e5a90',\n    '0x20edd77ea8582f4a2400d3c0d53154a74a1ca887',\n    '0xeef2e4a5f6a01d5fb89f38211fb4e6a8702d33b6',\n    '0x531c2607862de00604f600cff6be9cb312467570',\n    '0xf22b286fda7369255376742f360ffcee4e1fbd42',\n    '0xb35e0bfec9facd8f2dcc0e43e68350d5e7baa82f',\n    '0x7b4d4ba1070c4562c568fed6280c800a68fa5427',\n    '0x81042f7f99a86d3981308e72feb36bd791c31920',\n    '0xb98df9f7cdc3a983081cefa1cd94aed4e936f1a9',\n    '0x5b6c1f8838b9abf16c0383b7e4f3c5a750707af2',\n    '0x711b3ca2cc9d5a827f83d5ceafcb0925f2fb82b3',\n    '0x8e7fcc7a17f00f0f5f85f2d5964a581d0813c8a6',\n    '0x6b5e2758bdb9ed798acbfd64104c1deaf09cd24b',\n    '0x55763d6db54736084c1b8d010aa1d99f0dc6d07c',\n    '0xfadf736b86f09f2d07d2b655cfc848fe215140d4',\n    '0x9f4f9e15a4a963a9a3885979cc64b326dcaa18a8',\n    '0x0def9b4811e4c4e9da5acf82d421c97b5e9c152f',\n];\n\nconst secondEthIntroducer = ['add Ethereum addresses'];\n\nconst secondBtcIntroducer = ['add Bitcoin addresses'];\n\nexport const validEthAddressList = [...firstEthIntroducer, ...secondEthIntroducer, defaultAddress];\n\nexport const validBtcAddressList = [...secondBtcIntroducer];\n\n/**\n * Checks if the given introducer address is listed as a valid introducer for the lockdrop\n * @param introducer a bitcoin or ethereum address\n */\nexport function isValidIntroducerAddress(introducer: string) {\n    return (\n        validEthAddressList.includes(introducer.toLowerCase()) || validBtcAddressList.includes(introducer.toLowerCase())\n    );\n}\n","import BigNumber from 'bignumber.js';\nimport { LockEvent } from './LockdropModels';\n\nexport class PlmDrop {\n    receiver: string;\n    basePlm: BigNumber;\n    introducerAndBonuses: [string, BigNumber][];\n    affiliationRefsBonuses: [string, BigNumber][];\n    locks: LockEvent[];\n\n    constructor(\n        receiver: string,\n        basePlm: BigNumber,\n        introducerAndBonuses: [string, BigNumber][],\n        affiliationRefsBonuses: [string, BigNumber][],\n        locks: LockEvent[],\n    ) {\n        this.receiver = receiver;\n        this.basePlm = basePlm;\n        this.introducerAndBonuses = introducerAndBonuses;\n        this.affiliationRefsBonuses = affiliationRefsBonuses;\n        this.locks = locks;\n    }\n\n    getTotal() {\n        let totalIntroBonuses = new BigNumber(0);\n\n        for (let i = 0; i < this.introducerAndBonuses.length; i++) {\n            totalIntroBonuses = totalIntroBonuses.plus(this.introducerAndBonuses[i][1]);\n        }\n\n        const affBonus = this.calculateAffBonus();\n\n        return this.basePlm\n            .plus(totalIntroBonuses)\n            .plus(affBonus)\n            .toFixed();\n    }\n\n    getTotalPlm() {\n        return new BigNumber(this.getTotal()).toFixed();\n    }\n\n    getAffBonus() {\n        return new BigNumber(this.calculateAffBonus()).toFormat(2);\n    }\n\n    getIntroBonus() {\n        return new BigNumber(this.calculateIntroBonus()).toFormat(2);\n    }\n\n    // calculate the number of PLM you get for being affiliated\n    calculateAffBonus() {\n        return this.affiliationRefsBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n\n    // the number of PLM you get for referencing an affiliate\n    calculateIntroBonus() {\n        return this.introducerAndBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// This module is used for communicating with the Ethereum smart contract\nimport Lockdrop from '../../contracts/Lockdrop.json';\nimport getWeb3 from '../getWeb3';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport { LockEvent, LockInput } from '../../types/LockdropModels';\nimport BN from 'bn.js';\nimport BigNumber from 'bignumber.js';\nimport { isValidIntroducerAddress, defaultAddress, affiliationRate } from '../../data/affiliationProgram';\nimport { lockDurationToRate } from '../plasmUtils';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport Web3Utils from 'web3-utils';\nimport { ecrecover, fromRpcSig, toBuffer, bufferToHex } from 'ethereumjs-util';\nimport EthCrypto from 'eth-crypto';\n\n/**\n * exchange rate at the start of April 14 UTC (at the end of the first lockdrop)\n * this is only used for the first lockdrop\n */\nexport const ethFinalExRate = 205.56;\n\n// the total amount of issueing PLMs at 1st Lockdrop.\nconst totalAmountOfPLMs = new BigNumber('500000000.000000000000000');\nconst totalAmountOfPLMsForLockdrop = totalAmountOfPLMs.times(new BigNumber('17').div(new BigNumber('20')));\n\n/**\n * asks the user to sign a hashed message from their dApp browser to recover the user's public key.\n * This will return a compressed public key.\n * @param web3 a web3.js instance to access the user's wallet information\n * @param message an optional message that the user should sign\n */\nexport async function getPubKey(web3: Web3, message?: string) {\n    // default message\n    let msg = 'Please Sign this message to generate Plasm Network address';\n    // change message if the function provides one\n    if (message) {\n        msg = message;\n    }\n    const hash = web3.eth.accounts.hashMessage(msg);\n    const addresses = await web3.eth.getAccounts();\n    // the password parameter is only used for specific wallets (most wallets will prompt the user to provide it)\n    const sig = '0x' + (await web3.eth.personal.sign(msg, addresses[0], 'SecureP4ssW0rd')).slice(2);\n    const res = fromRpcSig(sig);\n    const publicKey = bufferToHex(ecrecover(toBuffer(hash), res.v, res.r, res.s));\n    const compressedPubKey = '0x' + EthCrypto.publicKey.compress(publicKey.replace('0x', ''));\n\n    return compressedPubKey;\n}\n\n/**\n * returns an array of locked events for the lock contract\n * this function searches from the genesis block\n * @param web3 a web3.js instance to interact with the blockchain\n * @param instance a contract instance to parse the contract events\n */\nexport async function getAllLockEvents(web3: Web3, instance: Contract): Promise<LockEvent[]> {\n    // todo: set this value as the block number of where the contract was deployed for each network\n    const mainnetStartBlock = 0;\n    const ev = await instance.getPastEvents('Locked', {\n        fromBlock: mainnetStartBlock,\n    });\n\n    const eventHashes = await Promise.all(\n        ev.map(async e => {\n            return Promise.all([Promise.resolve(e.returnValues), web3.eth.getTransaction(e.transactionHash)]);\n        }),\n    );\n\n    return Promise.all(\n        eventHashes.map(async e => {\n            // e[0] is lock event and e[1] is block hash\n            const blockHash = e[1];\n            const lockEvent = e[0];\n\n            const transactionString = await Promise.resolve(web3.eth.getBlock(blockHash.blockNumber as number));\n            const time = transactionString.timestamp.toString();\n            return {\n                eth: lockEvent.eth as BN,\n                duration: lockEvent.duration as number,\n                lock: lockEvent.lock as string,\n                introducer: lockEvent.introducer as string,\n                blockNo: blockHash.blockNumber,\n                timestamp: time,\n                lockOwner: blockHash.from,\n                blockHash: blockHash.blockHash,\n                transactionHash: blockHash.hash,\n            } as LockEvent;\n        }),\n    );\n}\n\n/**\n * returns a 0 ethereum address if an empty string was provided.\n * this function is used for lockers with no introducers\n * @param aff a valid introducer ETH address\n */\nexport function defaultAffiliation(aff: string) {\n    // check if affiliation address is not empty and is not themselves\n    if (aff) {\n        // return itself when it is a valid address\n        return aff;\n    } else {\n        // if it is an invalid address, return the default affiliation address\n        return defaultAddress;\n    }\n}\n\nfunction plmBaseIssueRatio(lockData: LockEvent, ethExchangeRate: BigNumber): BigNumber {\n    // get lockTimeBonus * ethExRate\n    const bonusRate = new BigNumber(lockDurationToRate(lockData.duration)).times(ethExchangeRate);\n\n    // calculate issuingPLMRate = lockedEth([ETH]) * lockBonusRate * ethExRate\n    const issuingRatio: BigNumber = new BigNumber(Web3Utils.fromWei(lockData.eth.toString(), 'ether')).times(\n        new BigNumber(bonusRate),\n    );\n    return issuingRatio;\n}\n\nfunction totalPlmBaseIssuingRate(allLocks: LockEvent[], ethExchangeRate: BigNumber): BigNumber {\n    return allLocks.reduce(\n        (sum: BigNumber, value: LockEvent): BigNumber => sum.plus(plmBaseIssueRatio(value, ethExchangeRate)),\n        new BigNumber(0),\n    );\n}\n\nfunction plmBaseIssueAmountInLock(lock: LockEvent, totalPlmsRate: BigNumber, ethExchangeRate: BigNumber): BigNumber {\n    const currentIssue = plmBaseIssueRatio(lock, ethExchangeRate);\n    return totalAmountOfPLMsForLockdrop.times(currentIssue).div(totalPlmsRate);\n}\n\n/**\n * returns an array of addresses that referenced the given address for the affiliation program\n * @param address ETH address\n * @param lockData list of contract lock event\n */\nfunction getAllAffReferences(address: string, lockData: LockEvent[]) {\n    // check if there is\n    const results: LockEvent[] = [];\n    const refEvents = lockData.filter(e => e.introducer.toLowerCase() === address.toLowerCase());\n\n    for (let i = 0; i < refEvents.length; i++) {\n        results.push(refEvents[i]);\n    }\n\n    return results;\n}\n\nexport function calculateNetworkAlpha(allLocks: LockEvent[]): BigNumber {\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    const totalPlmRate = totalPlmBaseIssuingRate(allLocks, ethExchangeRate);\n\n    // alpha_1 = totalAmountOfPLMsForLockdrop /totalPlmRate\n    const alpha1 = totalAmountOfPLMsForLockdrop.div(totalPlmRate);\n\n    return alpha1;\n}\n\n/**\n * calculate the total receiving PLMs from the lockdrop including the affiliation program bonus\n * in this function, affiliation means the current address being referenced by others\n * and introducer means this address referencing other affiliated addresses\n * @param address the lockdrop participant's ETH address\n * @param lockData a list of lockdrop contract events\n */\nexport function calculateTotalPlm(address: string, lockData: LockEvent[]): PlmDrop {\n    const receivingPlm = new PlmDrop(address, new BigNumber(0), [], [], []);\n\n    const currentAddressLocks = lockData.filter(i => i.lockOwner.toLowerCase() === address.toLowerCase());\n\n    receivingPlm.locks = currentAddressLocks;\n\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    // get total plm rate for calculating actual issuing PLMs.\n    const totalPlmRate = totalPlmBaseIssuingRate(lockData, ethExchangeRate);\n\n    for (let i = 0; i < currentAddressLocks.length; i++) {\n        // calculate total base issuing PLM tokens\n        const issuingPlm = plmBaseIssueAmountInLock(currentAddressLocks[i], totalPlmRate, ethExchangeRate);\n\n        // add value to the total amount\n        receivingPlm.basePlm = receivingPlm.basePlm.plus(issuingPlm);\n\n        // self -> introducer : bonus getting PLMs.\n        // check if this address has an introducer\n        if (\n            isValidIntroducerAddress(currentAddressLocks[i].introducer) &&\n            currentAddressLocks[i].introducer !== defaultAddress\n        ) {\n            receivingPlm.introducerAndBonuses.push([\n                currentAddressLocks[i].introducer,\n                issuingPlm.times(new BigNumber(affiliationRate)),\n            ]);\n        }\n    }\n\n    // someone -> self(introducer) : bonus getting PLMs.\n    // calculate affiliation bonus for this address\n    if (isValidIntroducerAddress(address)) {\n        const allRefs = getAllAffReferences(address, lockData);\n\n        for (let i = 0; i < allRefs.length; i++) {\n            // reference amount * 0.01\n            receivingPlm.affiliationRefsBonuses.push([\n                allRefs[i].lock,\n                plmBaseIssueAmountInLock(allRefs[i], totalPlmRate, ethExchangeRate).times(\n                    new BigNumber(affiliationRate),\n                ),\n            ]);\n        }\n    }\n    return receivingPlm;\n}\n\n/**\n * parses through the given lock events to calculate the total amount of locked ETH\n * @param locks a list of lockdrop contract events\n */\nexport function getTotalLockVal(locks: LockEvent[]): string {\n    let totalVal = new BigNumber(0);\n    if (locks.length > 0) {\n        for (let i = 0; i < locks.length; i++) {\n            const currentEth = new BigNumber(locks[i].eth.toString());\n            totalVal = totalVal.plus(currentEth);\n        }\n    }\n    return Web3Utils.fromWei(totalVal.toFixed(), 'ether');\n}\n\n/**\n * creates a smart contract instance based on the contract address\n * @param web3 web3js API instance\n * @param contractAddress smart contract address\n */\nexport async function createContractInstance(web3: Web3, contractAddress: string) {\n    const lockdropAbi = Lockdrop.abi as Web3Utils.AbiItem[];\n\n    // create an empty contract instance first\n    return new web3.eth.Contract(lockdropAbi, contractAddress);\n}\n\n/**\n * returns the unlock date of the given ethereum lock event.\n * this will return the unlock date in unix time (seconds)\n * @param lockInfo\n */\nexport const getUnlockDate = (lockInfo: LockEvent) => {\n    // 24 hours in epoch\n    const epochDay = 60 * 60 * 24;\n\n    // Ethereum lock timestamp is in integers\n    const lockedDay = parseInt(lockInfo.timestamp);\n\n    // locked date + lock duration in days to epoch\n    const unlockDate = lockedDay + lockInfo.duration * epochDay;\n\n    return unlockDate;\n};\n\n/**\n * authenticate if the client has web3 enabled wallet installed and can communicate with the blockchain\n * returns the web3.js instance, list of active accounts and the contract instance\n * @param contractAddress the contract address that it should look for\n */\nexport async function connectWeb3(contractAddress: string) {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n\n    if (web3 instanceof Web3) {\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        const contract = await createContractInstance(web3, contractAddress);\n\n        return {\n            web3: web3,\n            accounts: accounts,\n            contract,\n        };\n    } else {\n        throw new Error('Cannot get Web3 instance from the client');\n    }\n}\n\n/**\n * returns the UTC date in epoch string of when the lockdrop smart contract will end\n * @param contract the lockdrop contract instance\n */\nexport async function getContractEndDate(contract: Contract) {\n    const _lockdropEndDate = await contract.methods.LOCK_END_TIME().call();\n    return _lockdropEndDate as string;\n}\n\n/**\n * returns the UTC date of when the lockdrop smart contract will start\n * @param contract the lockdrop contract instance\n */\nexport async function getContractStartDate(contract: Contract) {\n    const _lockdropStartDate = await contract.methods.LOCK_START_TIME().call();\n    return _lockdropStartDate as string;\n}\n\n/**\n * validate and create a transaction to the lock contract with the given parameter.\n * This will return the transaction hash\n * @param txInput the lock parameter for the contract\n * @param address the address of the locker\n * @param contract smart contract instance used to invoke the contract method\n */\nexport async function submitLockTx(txInput: LockInput, address: string, contract: Contract) {\n    // checks user input\n    if (txInput.amount <= new BN(0) || txInput.duration <= 0) {\n        throw new Error('You are missing an input!');\n    }\n\n    // return a default address if user input is empty\n    const introducer = defaultAffiliation(txInput.affiliation).toLowerCase();\n    // check user input\n    if (introducer === address) {\n        throw new Error('You cannot affiliate yourself');\n    }\n    if (introducer && !Web3.utils.isAddress(introducer)) {\n        throw new Error('Please input a valid Ethereum address');\n    }\n\n    // convert user input to Wei\n    const amountToSend = Web3.utils.toWei(txInput.amount, 'ether');\n    let hash = '';\n\n    // communicate with the smart contract\n    await contract.methods\n        .lock(txInput.duration, introducer)\n        .send({\n            from: address,\n            value: amountToSend,\n        })\n        .on('transactionHash', (res: any) => {\n            hash = res;\n        });\n\n    if (hash === '') {\n        throw new Error('An error has occurred while trying to send transaction');\n    }\n    return hash;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport { LockEvent, TimeFormat } from '../../types/LockdropModels';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport {\n    Divider,\n    Grid,\n    ListItemSecondaryAction,\n    IconButton,\n    LinearProgress,\n    createStyles,\n    makeStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        itemButtons: {\n            verticalAlign: 'middle',\n            textAlign: 'center',\n            alignContent: 'center',\n        },\n    }),\n);\n\ninterface CurrentLockProps {\n    web3: Web3;\n    accounts: string[]; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n}\n\ninterface UnlockInfoProps {\n    lockInfo: LockEvent;\n    web3: Web3;\n    address: string;\n}\n// displays a list of locks tha the current user has locked\nconst CurrentLocks: React.FC<CurrentLockProps> = ({ web3, accounts, lockData }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>([]);\n    const [isLoadingComp, setLoadState] = useState(true);\n\n    useEffect(() => {\n        setEvents(lockData.filter(i => i.lockOwner === accounts[0]));\n        setLoadState(false);\n    }, [lockData, accounts]);\n\n    return (\n        <div className={classes.lockListPage}>\n            {isLoadingComp ? (\n                <CircularProgress />\n            ) : (\n                <>\n                    {lockEvents.length > 0 ? (\n                        <>\n                            <h1>Your Locks</h1>\n                            <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                            <List className={classes.listRoot} subheader={<li />}>\n                                <li className={classes.listSection}>\n                                    <ul className={classes.ul}>\n                                        <ListSubheader>You have {lockEvents.length} locks</ListSubheader>\n                                        <Divider />\n                                        {lockEvents.map(eventItem => (\n                                            <div key={eventItem.blockHash}>\n                                                <UnlockInfo lockInfo={eventItem} web3={web3} address={accounts[0]} />\n                                                <Divider />\n                                            </div>\n                                        ))}\n                                    </ul>\n                                </li>\n                            </List>\n                        </>\n                    ) : (\n                        <>\n                            <h1>No Locks</h1>\n                            <h4>Please lock some ETH!</h4>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\n// the individual lock item\nconst UnlockInfo: React.FC<UnlockInfoProps> = ({ lockInfo, web3, address }) => {\n    const classes = useStyles();\n    // 24 hours in epoch\n    const epochDayMil = 86400000;\n\n    const getUnlockDate = useCallback(() => {\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n        // locked date + lock duration(epoch)\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        return unlockDate;\n    }, [lockInfo]);\n\n    const calculateTimeLeft = useCallback(() => {\n        // milliseconds left till unlock\n        const tillEnd = getUnlockDate() - +Date.now();\n        return {\n            days: Math.floor(tillEnd / (1000 * 60 * 60 * 24)),\n            hours: Math.floor((tillEnd / (1000 * 60 * 60)) % 24),\n            minutes: Math.floor((tillEnd / 1000 / 60) % 60),\n            seconds: Math.floor((tillEnd / 1000) % 60),\n        };\n    }, [getUnlockDate]);\n\n    const [canUnlock, setLockState] = useState(false);\n    const [tillUnlock, setUnlockDate] = useState<TimeFormat>(calculateTimeLeft());\n    const [unlocked, setUnlockState] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n\n    const checkUnlock = useCallback(async () => {\n        // get today in UTC epoch seconds (js default is ms)\n        const today = Date.now();\n\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        // get contract balance\n        const lockBalance = await web3.eth.getBalance(lockInfo.lock);\n        // check if the balance is 0 or not\n        const lockClaimState = lockBalance === '0';\n        // console.log(lockBalance);\n        setUnlockState(lockClaimState);\n        return today > unlockDate;\n    }, [lockInfo, web3]);\n\n    // update time value every second\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setUnlockDate(calculateTimeLeft());\n            setLockState(await checkUnlock());\n        }, 1000);\n        // cleanup async hook\n        return () => {\n            clearInterval(interval);\n        };\n    }, [calculateTimeLeft, checkUnlock]);\n\n    // initial update\n    useEffect(() => {\n        setUnlockDate(calculateTimeLeft());\n        checkUnlock().then(setLockState);\n    }, [calculateTimeLeft, checkUnlock]);\n\n    // click unlock ETH\n    const handleClick = () => {\n        setLoading(true);\n        web3.eth\n            .sendTransaction({\n                from: address,\n                to: lockInfo.lock,\n                value: '0',\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(() => {\n                // get contract balance\n                web3.eth\n                    .getBalance(lockInfo.lock)\n                    .then(lockBalance => {\n                        // check if the balance is 0 or not\n                        const lockClaimState = lockBalance === '0';\n\n                        setUnlockState(lockClaimState);\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    })\n                    .finally(() => {\n                        setLoading(false);\n                    });\n            });\n    };\n\n    return (\n        <>\n            <ListItem>\n                <Grid container spacing={4} alignItems=\"center\">\n                    <Grid item xs={9}>\n                        <ListItemText>\n                            <h5>Lock address: {lockInfo.lock}</h5>\n                            <p>\n                                Locked {Web3Utils.fromWei(lockInfo.eth, 'ether')} ETH for {lockInfo.duration} days\n                            </p>\n                            {lockInfo.introducer !== defaultAddress ? (\n                                <p>Introducer: {lockInfo.introducer}</p>\n                            ) : (\n                                <p>No introducer</p>\n                            )}\n                            {isLoading ? (\n                                <>\n                                    <LinearProgress />\n                                </>\n                            ) : (\n                                <>\n                                    {!canUnlock ? (\n                                        <Grid container spacing={1}>\n                                            <Grid item>\n                                                <p>{tillUnlock.days} Days </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.hours} Hours </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.minutes} Minutes </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.seconds} Seconds </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>Left</p>\n                                            </Grid>\n                                        </Grid>\n                                    ) : unlocked ? (\n                                        <p>Lock already unlocked!</p>\n                                    ) : (\n                                        <p>You can unlocked your lock!</p>\n                                    )}\n                                </>\n                            )}\n                        </ListItemText>\n                    </Grid>\n                    <Grid item>\n                        <ListItemSecondaryAction className={classes.itemButtons}>\n                            {unlocked ? (\n                                <LockOpenIcon color=\"disabled\" />\n                            ) : canUnlock ? (\n                                <Tooltip title=\"Click to unlock\" aria-label=\"unlock\">\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"unlock\"\n                                        onClick={() => handleClick()}\n                                        color=\"primary\"\n                                    >\n                                        <LockOpenIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            ) : (\n                                <LockIcon color=\"inherit\" />\n                            )}\n                        </ListItemSecondaryAction>\n                    </Grid>\n                </Grid>\n            </ListItem>\n        </>\n    );\n};\n\nexport default CurrentLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\n\nimport React, { useState, useEffect } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Divider } from '@material-ui/core';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\n\ninterface LockHistoryProps {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: theme.spacing(1, 2),\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\nconst GlobalLocks: React.FC<LockHistoryProps> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>([]);\n\n    useEffect(() => {\n        setEvents(lockData);\n    }, [lockData]);\n\n    return (\n        <div className={classes.lockListPage}>\n            <>\n                {lockEvents.length > 0 ? (\n                    <>\n                        <h1>Global Locks</h1>\n                        <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                        <List className={classes.listRoot} subheader={<li />}>\n                            <li className={classes.listSection}>\n                                <ul className={classes.ul}>\n                                    <ListSubheader>There are {lockEvents.length} locks</ListSubheader>\n                                    <Divider />\n                                    {lockEvents.map(eventItem => (\n                                        <div key={eventItem.transactionHash}>\n                                            <ListItem>\n                                                <ListItemText>\n                                                    <h4>Lock address: {eventItem.lock}</h4>\n                                                    <h5>Locked in block no. {eventItem.blockNo}</h5>\n                                                    <p>\n                                                        Locked {Web3Utils.fromWei(eventItem.eth, 'ether')} ETH for{' '}\n                                                        {eventItem.duration} days\n                                                    </p>\n                                                    {eventItem.introducer !== defaultAddress ? (\n                                                        <p>Introducer: {eventItem.introducer}</p>\n                                                    ) : (\n                                                        <p>No introducer</p>\n                                                    )}\n                                                </ListItemText>\n                                            </ListItem>\n                                            <Divider />\n                                        </div>\n                                    ))}\n                                </ul>\n                            </li>\n                        </List>\n                    </>\n                ) : (\n                    <>\n                        <h1>No Locks</h1>\n                        <h4>Please lock some ETH!</h4>\n                    </>\n                )}\n            </>\n        </div>\n    );\n};\n\nexport default GlobalLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport CurrentLocks from './CurrentLocks';\nimport GlobalLocks from './EthGlobalLocks';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\ninterface LockHistoryProps {\n    web3: Web3;\n    accounts: string[]; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\n// component that displays the number of tokens and the duration for the lock via Web3\nconst LockedEthList: React.FC<LockHistoryProps> = ({ web3, accounts, lockData }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.tabMenu}>\n                    <AppBar position=\"static\" color=\"inherit\">\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs\"\n                        >\n                            <Tab label=\"Locked Tokens\" {...a11yProps(0)} />\n                            <Tab label=\"Unlock Tokens\" {...a11yProps(1)} />\n                        </Tabs>\n                    </AppBar>\n                    <SwipeableViews\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                        index={value}\n                        onChangeIndex={handleChangeIndex}\n                    >\n                        <TabPanel value={value} index={0} dir={theme.direction}>\n                            <GlobalLocks lockData={lockData} />\n                        </TabPanel>\n                        <TabPanel value={value} index={1} dir={theme.direction}>\n                            <CurrentLocks web3={web3} accounts={accounts} lockData={lockData} />\n                        </TabPanel>\n                    </SwipeableViews>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockedEthList;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { TimeFormat, LockEvent } from '../../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    lockData: LockEvent[];\n}\n\nenum LockState {\n    notStart,\n    start,\n    end,\n}\n\nconst LockdropCountdownPanel: React.FC<Props> = ({ startTime, endTime, lockData }) => {\n    const now = moment().utc();\n\n    const calculateTimeLeft = (): TimeFormat => {\n        const tillStart = startTime.valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = endTime.valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        return timeLeft;\n    };\n\n    const getLockState = (): LockState => {\n        const tillStart = startTime.valueOf() - now.valueOf();\n        if (tillStart > 0) {\n            return LockState.notStart;\n        } else if (tillStart <= 0 && !(endTime.valueOf() - now.valueOf() < 0)) {\n            return LockState.start;\n        } else {\n            return LockState.end;\n        }\n    };\n\n    const [timeLeft, setTimeLeft] = useState<TimeFormat>(calculateTimeLeft());\n    const [lockState, setLockState] = useState(getLockState());\n    const [totalLockVal, setTotalLockVal] = useState('0');\n\n    const getLockValue = async (): Promise<void> => {\n        try {\n            const _totalLockVal = getTotalLockVal(lockData);\n            setTotalLockVal(_totalLockVal);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setTimeLeft(calculateTimeLeft());\n            setLockState(getLockState());\n            await getLockValue();\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    if (lockState !== LockState.end) {\n        return (\n            <>\n                <PanelWrapper>\n                    <div className=\"time\">\n                        <Grid container spacing={2} justify=\"center\">\n                            <Grid item>\n                                {lockState === LockState.notStart ? (\n                                    <Typography variant=\"h4\" component=\"h2\">\n                                        Lockdrop Starting in:\n                                    </Typography>\n                                ) : (\n                                    <Typography variant=\"h4\" component=\"h2\">\n                                        Lockdrop Ending in:\n                                    </Typography>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.days}</h3>\n                                <p>Days</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.hours}</h3>\n                                <p>Hours</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.minutes}</h3>\n                                <p>Minutes</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.seconds}</h3>\n                                <p>Seconds</p>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </PanelWrapper>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <PanelWrapper>\n                    <Typography variant=\"h2\" component=\"h1\" align=\"center\">\n                        Lockdrop has ended\n                    </Typography>\n                    <Typography variant=\"h3\" component=\"h3\" align=\"center\">\n                        Total Locked Value: {totalLockVal} ETH\n                    </Typography>\n                </PanelWrapper>\n            </>\n        );\n    }\n};\n\nexport default LockdropCountdownPanel;\n\nconst PanelWrapper: React.FC = ({ children }) => {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            padding: theme.spacing(5, 2, 0),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                {children}\n            </Container>\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    createStyles,\n    Theme,\n    CircularProgress,\n    Divider,\n    Link,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Collapse,\n    Typography,\n} from '@material-ui/core';\nimport { calculateTotalPlm, ethFinalExRate, getPubKey } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport BigNumber from 'bignumber.js';\nimport CountUp from 'react-countup';\nimport { ThemeColors } from '../../theme/themes';\nimport { IonPopover, IonList, IonListHeader, IonItem, IonLabel, IonChip, IonButton, IonLoading } from '@ionic/react';\nimport { LockEvent } from '../../types/LockdropModels';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport { generatePlmAddress } from 'src/helpers/plasmUtils';\n\nconst etherScanSearch = 'https://etherscan.io/address/';\n\ninterface ResultProps {\n    lockData: LockEvent[];\n    web3: Web3;\n}\n\nconst LockdropResult: React.FC<ResultProps> = ({ lockData, web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            pageContent: {\n                textAlign: 'center',\n                padding: theme.spacing(4, 2, 0),\n            },\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                padding: theme.spacing(4, 2, 0),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n    const [totalPlm, setTotalPlm] = useState<PlmDrop>(new PlmDrop('', new BigNumber(0), [], [], []));\n    const [exRate, setExRate] = useState(0);\n    const [isLoading, setLoadState] = useState(true);\n    const [showIntoRefPopover, setShowIntroRefPopover] = useState(false);\n    const [showIntoPopover, setShowIntroPopover] = useState(false);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setExRate(ethFinalExRate);\n            const accounts = await web3.eth.getAccounts();\n            const totalIssue = calculateTotalPlm(accounts[0], lockData);\n            setTotalPlm(totalIssue);\n\n            setLoadState(false);\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const countupTotalPlmVal: JSX.Element = (\n        <CountUp\n            start={0}\n            end={new BigNumber(totalPlm.getTotalPlm()).toNumber()}\n            decimals={2}\n            duration={1}\n            separator=\",\"\n        />\n    );\n\n    return (\n        <div className={classes.pageContent}>\n            <h1>Lockdrop Result</h1>\n            {isLoading ? (\n                <>\n                    <CircularProgress />\n                </>\n            ) : totalPlm.locks.length > 0 || totalPlm.affiliationRefsBonuses.length > 0 ? (\n                <>\n                    <h2 className={classes.header}>{countupTotalPlmVal} PLM in total</h2>\n                    <p>You have locked {totalPlm.locks.length} time(s)</p>\n                    <p>\n                        ETH exchange rate at the end of the lockdrop: {exRate} USD(\n                        <a href=\"https://api.coingecko.com/api/v3/coins/ethereum/history?date=01-05-2020&localization=false\">\n                            ref\n                        </a>\n                        )\n                    </p>\n                    <p>You have received around {totalPlm.basePlm.toFormat(2)} PLM from locking</p>\n                    <Divider />\n                    <h2>Affiliation Program</h2>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroRefPopover(true)}>\n                        <IonLabel>{totalPlm.affiliationRefsBonuses.length} locks</IonLabel>\n                    </IonChip>\n                    <IonLabel>referenced your address as a introducer: {totalPlm.getAffBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoRefPopover} onDidDismiss={() => setShowIntroRefPopover(false)}>\n                        <IntoRefItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <IonLabel>You have referenced </IonLabel>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroPopover(true)}>\n                        <IonLabel>{totalPlm.introducerAndBonuses.length} introducers</IonLabel>\n                    </IonChip>\n                    <IonLabel>: {totalPlm.getIntroBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoPopover} onDidDismiss={() => setShowIntroPopover(false)}>\n                        <IntoAffItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <ClaimPlm web3={web3} />\n                </>\n            ) : (\n                <h2 className={classes.header}>No Locks found for your address!</h2>\n            )}\n        </div>\n    );\n};\n\nexport default LockdropResult;\n\ninterface IntroRefProps {\n    data: PlmDrop;\n}\nconst IntoRefItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.affiliationRefsBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>References</IonListHeader>\n                        {data.affiliationRefsBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No References</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\nconst IntoAffItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.introducerAndBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>Introducers</IonListHeader>\n                        {data.introducerAndBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No Introducers</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\ninterface ClaimProps {\n    web3: Web3;\n}\nconst ClaimPlm: React.FC<ClaimProps> = ({ web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                paddingTop: theme.spacing(2),\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                maxWidth: '100%',\n            },\n            addressPanel: {\n                padding: theme.spacing(3, 3, 0),\n            },\n            root: {\n                width: '100%',\n                alignContent: 'center',\n                backgroundColor: theme.palette.background.paper,\n            },\n            nested: {\n                paddingLeft: theme.spacing(4),\n            },\n        }),\n    );\n\n    const [isLoading, setLoadState] = useState(false);\n    const [plmAddress, setPlmAddress] = useState('');\n    const [ethPubkey, setEthPubkey] = useState('');\n    const [open, setOpen] = useState(false);\n\n    const getPlasmAddress = async () => {\n        const pubKey = await getPubKey(web3);\n        let result = '';\n        if (typeof pubKey === 'string') {\n            setEthPubkey(pubKey);\n            // remove the 0x prefix before passing the value\n            const plmAddress = generatePlmAddress(pubKey.replace('0x', ''));\n            result = plmAddress;\n        }\n        setLoadState(false);\n        return result;\n    };\n    const ExpandItem = () => {\n        setOpen(!open);\n    };\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonLoading isOpen={isLoading} message={'Verifying user...'} />\n            <IonButton\n                color=\"primary\"\n                size=\"large\"\n                className={classes.claimButton}\n                onClick={async () => {\n                    setLoadState(true);\n                    setPlmAddress(await getPlasmAddress());\n                }}\n            >\n                Get Plasm Address\n            </IonButton>\n            {plmAddress ? (\n                <>\n                    <SectionCard maxWidth=\"md\">\n                        <div className={classes.addressPanel}>\n                            <p>Your Plasm Network address with the lockdrop rewards:</p>\n                            <Link\n                                color=\"inherit\"\n                                href={'https://plasm.subscan.io/account/' + plmAddress}\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <h2 className={classes.header}>{plmAddress}</h2>\n                            </Link>\n                            <List component=\"nav\" className={classes.root}>\n                                <ListItem button onClick={ExpandItem}>\n                                    <ListItemIcon>\n                                        <VpnKeyIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary=\"View Eth Public Key\" />\n                                    {open ? <ExpandLess /> : <ExpandMore />}\n                                </ListItem>\n                                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                    <Typography className={classes.header}>{ethPubkey}</Typography>\n                                </Collapse>\n                            </List>\n                        </div>\n                    </SectionCard>\n                </>\n            ) : null}\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { validEthAddressList, defaultAddress } from '../../data/affiliationProgram';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport { calculateTotalPlm } from '../../helpers/lockdrop/EthereumLockdrop';\nimport {\n    List,\n    ListItemText,\n    ListSubheader,\n    Divider,\n    ListItem,\n    makeStyles,\n    createStyles,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport SectionCard from '../SectionCard';\n\ninterface Props {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        title: {\n            textAlign: 'center',\n            padding: theme.spacing(4, 2, 0),\n        },\n    }),\n);\n\nconst AffiliationList: React.FC<Props> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockdropResult, setLockdropResult] = useState<PlmDrop[]>([]);\n\n    function getAffiliationResults(lockData: LockEvent[]) {\n        // filter out the 0x00 address from the list\n        const validAddresses = validEthAddressList.filter(address => address !== defaultAddress);\n\n        // get the lockdrop result\n        const lockResults = validAddresses.map(i => {\n            return calculateTotalPlm(i, lockData);\n        });\n\n        // sort the array by the number of references\n        return lockResults.sort((a, b) =>\n            a.affiliationRefsBonuses.length > b.affiliationRefsBonuses.length\n                ? -1\n                : a.affiliationRefsBonuses.length < b.affiliationRefsBonuses.length\n                ? 1\n                : 0,\n        );\n    }\n\n    useEffect(() => {\n        setLockdropResult(getAffiliationResults(lockData));\n    }, [lockData]);\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <Typography className={classes.title} variant=\"h3\">\n                    Affiliation Leaderboard\n                </Typography>\n                <List component=\"nav\" className={classes.listRoot} subheader={<li />}>\n                    <li className={classes.listSection}>\n                        <ul className={classes.ul}>\n                            <ListSubheader>There are {validEthAddressList.length - 1} affiliators</ListSubheader>\n                            <Divider />\n                            {lockdropResult.map(i => (\n                                <IntroducerBonusesItems key={i.receiver} lockResult={i} />\n                            ))}\n                        </ul>\n                    </li>\n                </List>\n            </SectionCard>\n        </>\n    );\n};\n\ninterface IntroducerPlanelProps {\n    lockResult: PlmDrop;\n}\n\nconst IntroducerBonusesItems: React.FC<IntroducerPlanelProps> = ({ lockResult }) => {\n    return (\n        <>\n            <ListItem>\n                <ListItemText>\n                    <h2>{lockResult.receiver}</h2>\n                    <p>{lockResult.affiliationRefsBonuses.length} lock(s) referenced this address</p>\n                    <p>{lockResult.getAffBonus()} PLMs gained from this</p>\n                </ListItemText>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n\nexport default AffiliationList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading } from '@ionic/react';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport * as ethLockdrop from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockEvent } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { removeWeb3Event } from '../helpers/getWeb3';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Divider } from '@material-ui/core';\nimport moment from 'moment';\nimport LockdropCountdownPanel from '../components/EthLock/LockdropCountdownPanel';\nimport { lockdropContracts } from '../data/lockInfo';\nimport 'react-dropdown/style.css';\nimport LockdropResult from 'src/components/EthLock/LockdropResult';\nimport AffiliationList from 'src/components/EthLock/AffiliationList';\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst EthLockdropPage: React.FC = () => {\n    const [web3, setWeb3] = useState<Web3>();\n    const [accounts, setAccounts] = useState<string[]>([]);\n    const [contract, setContract] = useState<Contract>();\n\n    const [isLoading, setLoading] = useState<{\n        loading: boolean;\n        message: string;\n    }>({\n        loading: false,\n        message: '',\n    });\n\n    const [networkType, setNetworkType] = useState('');\n    const [allLockEvents, setLockEvents] = useState<LockEvent[]>([]);\n\n    const [lockdropStart, setLockdropStart] = useState('0');\n    const [lockdropEnd, setLockdropEnd] = useState('0');\n\n    const isMainnet = useMemo(() => {\n        return networkType === 'main';\n    }, [networkType]);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            try {\n                // get all the lock events from the chain\n                if (web3 && contract) {\n                    const _allLocks = await ethLockdrop.getAllLockEvents(web3, contract);\n                    setLockEvents(_allLocks);\n                }\n            } catch (error) {\n                toast.error(error.message);\n                console.log(error);\n            }\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n            removeWeb3Event();\n        };\n    });\n\n    // load web3 instance\n    useEffect(() => {\n        setLoading({\n            loading: true,\n            message: 'Connecting to Web3 instance...',\n        });\n        (async function() {\n            try {\n                const web3State = await ethLockdrop.connectWeb3(lockdropContracts.firstLock.main);\n\n                setNetworkType(await web3State.web3.eth.net.getNetworkType());\n\n                // check contract start and end dates\n                const _end = await ethLockdrop.getContractEndDate(web3State.contract);\n                const _start = await ethLockdrop.getContractStartDate(web3State.contract);\n                setLockdropEnd(_end);\n                setLockdropStart(_start);\n\n                setWeb3(web3State.web3);\n                setContract(web3State.contract);\n                setAccounts(web3State.accounts);\n\n                const _allLocks = await ethLockdrop.getAllLockEvents(web3State.web3, web3State.contract);\n                setLockEvents(_allLocks);\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            }\n        })().finally(() => {\n            setLoading({ loading: false, message: '' });\n        });\n        // we disable this because we want this to only call once (on component mount)\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <IonPage>\n            <Navbar />\n            <IonContent>\n                <>\n                    <IonLoading isOpen={isLoading.loading} message={isLoading.message} />\n                    {!isMainnet ? (\n                        <SectionCard maxWidth=\"lg\">\n                            <Typography variant=\"h2\" component=\"h4\" align=\"center\">\n                                Please access this page with a Mainnet wallet\n                            </Typography>\n                        </SectionCard>\n                    ) : (\n                        <>\n                            <SectionCard maxWidth=\"lg\">\n                                <LockdropCountdownPanel\n                                    startTime={moment.unix(parseInt(lockdropStart))}\n                                    endTime={moment.unix(parseInt(lockdropEnd))}\n                                    lockData={allLockEvents}\n                                />\n                                {web3 && (\n                                    <>\n                                        <Divider />\n                                        <LockdropResult lockData={allLockEvents} web3={web3} />\n                                    </>\n                                )}\n                            </SectionCard>\n\n                            <AffiliationList lockData={allLockEvents} />\n\n                            {web3 && <LockedEthList web3={web3} accounts={accounts} lockData={allLockEvents} />}\n                        </>\n                    )}\n                </>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\nexport default EthLockdropPage;\n","import { IonSelect, IonSelectOption } from '@ionic/react';\nimport React from 'react';\nimport { OptionData } from '../types/LockdropModels';\n\n// react function component for making dropdown with the given items\nexport const DropdownOption = (props: OptionData) => {\n    const items = props.dataSets.map(x => {\n        return (\n            <IonSelectOption className=\"dropdown-item\" key={props.dataSets.indexOf(x)} value={x.value}>\n                {x.label}\n            </IonSelectOption>\n        );\n    });\n\n    return (\n        <IonSelect interface=\"popover\" onIonChange={e => props.onChoose(e)}>\n            {items}\n        </IonSelect>\n    );\n};\n","import { IonLabel, IonButton, IonItem, IonInput, IonCard, IonCardContent, IonChip } from '@ionic/react';\nimport React, { useState } from 'react';\nimport { LockInput, OptionItem } from '../../types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport { DropdownOption } from '../DropdownOption';\nimport Container from '@material-ui/core/Container';\nimport BN from 'bn.js';\nimport { Typography } from '@material-ui/core';\nimport quantstampLogo from '../../resources/quantstamp-logo.png';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport parse from 'html-react-parser';\nimport { ethDurations, ethDustyDurations } from '../../data/lockInfo';\n\ntype InputProps = {\n    token: string;\n    onSubmit: Function;\n    description?: string;\n    dusty?: boolean;\n};\n// the main component function\nconst LockdropForm = ({ token, onSubmit, description, dusty }: InputProps) => {\n    // states used in this component\n    const [lockAmount, setAmount] = useState<BN>(new BN(0));\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [affAccount, setAff] = useState('');\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            formRoot: {\n                padding: theme.spacing(4, 3, 0),\n            },\n            txButton: {\n                margin: theme.spacing(3),\n            },\n            formLabel: {\n                margin: theme.spacing(2),\n            },\n            quantLogo: {\n                marginRight: theme.spacing(2),\n                maxHeight: 20,\n                height: '100%',\n                verticalAlign: 'middle',\n            },\n            textBox: {\n                marginLeft: 'auto',\n                marginRight: 'auto',\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    // the submit button function\n    function handleSubmit() {\n        const inputs: LockInput = {\n            duration: lockDuration.value,\n            amount: lockAmount,\n            affiliation: affAccount,\n            rate: lockDuration.rate,\n        };\n        onSubmit(inputs);\n    }\n\n    // main render JSX\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.formRoot}>\n                    <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                        {dusty ? 'Dusty Plasm' : 'Plasm Main'} Network Ethereum Lockdrop\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                        Audited by{' '}\n                        <Link\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <img src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                        </Link>\n                    </Typography>\n                    {/* <IonLabel className={classes.formLabel}>About</IonLabel> */}\n                    {description ? (\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>{parse(description)}</IonCardContent>\n                        </IonCard>\n                    ) : null}\n\n                    <IonItem>\n                        <IonLabel position=\"floating\">Number of {token}</IonLabel>\n                        <IonInput\n                            placeholder={'ex: 0.64646 ' + token}\n                            onIonInput={e => setAmount(((e.target as HTMLInputElement).value as unknown) as BN)}\n                        ></IonInput>\n                    </IonItem>\n                    <IonLabel className={classes.formLabel}>Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={dusty ? ethDustyDurations : ethDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                const durationSet = dusty ? ethDustyDurations : ethDurations;\n                                setDuration(\n                                    durationSet.filter(i => i.value === ((e.target.value as unknown) as number))[0],\n                                );\n                            }}\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>\n                                If you have a friend who is also participating in the lockdrop and is part of our\n                                affiliation program, please input the address. Both parties will be able to receive a\n                                bonus rate of 1% of what the friend is receiving. Checkout this{' '}\n                                <a href=\"https://medium.com/stake-technologies/lockdrop-with-friends-the-plasm-network-affiliation-program-b385c1cd800d\">\n                                    article\n                                </a>{' '}\n                                for details.\n                            </IonCardContent>\n                        </IonCard>\n                        <IonLabel position=\"floating\">Affiliation (optional)</IonLabel>\n\n                        <IonInput\n                            placeholder={'ex: 0x324632...'}\n                            onIonInput={e => setAff((e.target as HTMLInputElement).value)}\n                        ></IonInput>\n                    </IonItem>\n                    <Container>\n                        <IonButton expand=\"block\" onClick={() => handleSubmit()} className={classes.txButton}>\n                            Submit Transaction\n                        </IonButton>\n                    </Container>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockdropForm;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport * as btcLockdrop from '../helpers/lockdrop/BitcoinLockdrop';\nimport { Claim, Lockdrop } from 'src/types/LockdropModels';\nimport {\n    List,\n    makeStyles,\n    createStyles,\n    ListSubheader,\n    Divider,\n    ListItem,\n    Typography,\n    ListItemText,\n    ListItemIcon,\n    Icon,\n    ListItemSecondaryAction,\n    IconButton,\n    CircularProgress,\n} from '@material-ui/core';\nimport plasmIcon from '../resources/plasm-icon.svg';\nimport dustyIcon from '../resources/dusty-icon.svg';\nimport Web3Utils from 'web3-utils';\nimport SendIcon from '@material-ui/icons/Send';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { green } from '@material-ui/core/colors';\nimport BigNumber from 'bignumber.js';\nimport { H256 } from '@polkadot/types/interfaces';\nimport Badge from '@material-ui/core/Badge';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { IonPopover, IonList, IonItem, IonListHeader, IonLabel } from '@ionic/react';\nimport { toast } from 'react-toastify';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport ReplayIcon from '@material-ui/icons/Replay';\n\ninterface Props {\n    claimParams: Lockdrop[];\n    plasmApi: ApiPromise;\n    networkType: 'ETH' | 'BTC';\n    plasmNetwork: 'Plasm' | 'Dusty';\n    publicKey: string;\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            height: 360,\n            //minHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        inline: {\n            display: 'inline',\n        },\n        iconProgress: {\n            color: green[500],\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            zIndex: 1,\n        },\n        emptyPanel: {\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: 'auto',\n        },\n        claimVoteIcon: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\nconst truncateString = (str: string, num: number) => {\n    if (str.length <= num) {\n        return str;\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...';\n};\n\nconst epochToDays = (epoch: number) => {\n    const epochDays = 60 * 60 * 24;\n    return epoch / epochDays;\n};\n\nconst ClaimStatus: React.FC<Props> = ({ claimParams, plasmApi, plasmNetwork = 'Plasm', networkType, publicKey }) => {\n    const classes = useStyles();\n    const plasmAddr = useMemo(() => {\n        return plasmUtils.generatePlmAddress(publicKey);\n    }, [publicKey]);\n    const [positiveVotes, setPositiveVotes] = useState(0);\n    const [voteThreshold, setVoteThreshold] = useState(0);\n    const [isLoadingBal, setLoadingBal] = useState(true);\n    const [isLoadingClaims, setLoadingClaims] = useState(true);\n    const [balance, setBalance] = useState('');\n    const [claims, setClaims] = useState<(Claim | undefined)[]>([]);\n\n    const fetchLockData = useCallback(async () => {\n        // create claims IDs from all the lock parameters\n        const claimIds = claimParams.map(c => {\n            // get claim ID of current parameter\n            return plasmUtils.createLockParam(\n                c.type,\n                c.transactionHash.toHex(),\n                c.publicKey.toHex(),\n                c.duration.toString(),\n                c.value.toString(),\n            ).hash;\n        });\n\n        const lockdropStates = claimIds.map(async id => {\n            // parse plasm node to check claim status\n            const claimRes = await plasmUtils.getClaimStatus(plasmApi, id);\n            return claimRes;\n        });\n\n        setClaims(await Promise.all(lockdropStates));\n    }, [claimParams, plasmApi]);\n\n    // initial set claim status\n    useEffect(() => {\n        fetchLockData().finally(() => {\n            setLoadingClaims(false);\n        });\n    }, [fetchLockData]);\n\n    // fetch address balance periodically\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            const _bal = (await plasmUtils.getAddressBalance(plasmApi, plasmAddr, true)).toFixed(3);\n            const formatBal = parseFloat(_bal).toLocaleString('en');\n            const _voteReq = await plasmUtils.getLockdropVoteRequirements(plasmApi);\n            setBalance(formatBal);\n            setPositiveVotes(_voteReq.positiveVotes);\n            setVoteThreshold(_voteReq.voteThreshold);\n            isLoadingBal && setLoadingBal(false);\n\n            await fetchLockData();\n        }, 3000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                Sending to {plasmAddr}\n            </Typography>\n\n            {balance && (\n                <Typography variant=\"body1\" component=\"p\" align=\"center\">\n                    Has balance of {balance + ' '}\n                    {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                </Typography>\n            )}\n\n            <List className={classes.listRoot} subheader={<li />}>\n                <li className={classes.listSection}>\n                    <ul className={classes.ul}>\n                        {isLoadingBal || isLoadingClaims ? (\n                            <div className={classes.emptyPanel}>\n                                <CircularProgress />\n                            </div>\n                        ) : claimParams.length > 0 ? (\n                            <>\n                                <ListSubheader>You can claim {claimParams.length} locks</ListSubheader>\n                                <Divider />\n\n                                {claimParams.map((e, i) => (\n                                    <div key={e.transactionHash.toHex()}>\n                                        <ClaimItem\n                                            lockParam={e}\n                                            plasmApi={plasmApi}\n                                            plasmNetwork={plasmNetwork}\n                                            networkType={networkType}\n                                            positiveVotes={positiveVotes}\n                                            voteThreshold={voteThreshold}\n                                            claimData={claims[i]}\n                                        />\n                                    </div>\n                                ))}\n                            </>\n                        ) : (\n                            <>\n                                <ListSubheader>You don&apos;t have any locks!</ListSubheader>\n                                <Divider />\n                                <div className={classes.emptyPanel}>\n                                    <Typography>Why does the feeling of emptiness occupy so much space?</Typography>\n                                    <Typography>-James de la Vega-</Typography>\n                                </div>\n                            </>\n                        )}\n                    </ul>\n                </li>\n            </List>\n        </div>\n    );\n};\n\nexport default ClaimStatus;\n\ninterface ItemProps {\n    lockParam: Lockdrop;\n    plasmApi: ApiPromise;\n    plasmNetwork: 'Plasm' | 'Dusty';\n    networkType: 'BTC' | 'ETH';\n    positiveVotes: number;\n    voteThreshold: number;\n    claimData?: Claim;\n}\n\nconst ClaimItem: React.FC<ItemProps> = ({\n    lockParam,\n    plasmApi,\n    plasmNetwork,\n    networkType,\n    positiveVotes,\n    voteThreshold,\n    claimData,\n}) => {\n    const classes = useStyles();\n\n    const claimId = useMemo(() => {\n        return plasmUtils.createLockParam(\n            lockParam.type,\n            lockParam.transactionHash.toHex(),\n            lockParam.publicKey.toHex(),\n            lockParam.duration.toString(),\n            lockParam.value.toString(),\n        ).hash;\n    }, [lockParam]);\n\n    // plasmLockdrop.request()\n    const [sendingRequest, setSendingRequest] = useState(false);\n    // plasmLockdrop.claim()\n    const [claimingLock, setClaimingLock] = useState(false);\n    const [approveList, setApproveList] = useState<string[]>([]);\n    const [declineList, setDeclineList] = useState<string[]>([]);\n\n    // for popup modals\n    const [showApproves, setShowApproves] = useState(false);\n    const [showDeclines, setShowDeclines] = useState(false);\n\n    const setVoteList = (_claim: Claim) => {\n        const approves = _claim.approve.toJSON() as string[];\n        setApproveList(approves);\n        const decline = _claim.decline.toJSON() as string[];\n        setDeclineList(decline);\n    };\n\n    /**\n     * sends a lockdrop claim request to the plasm node by the given lockdrop parameter\n     * @param param lockdrop parameter data\n     */\n    const submitClaimReq = (param: Lockdrop) => {\n        setSendingRequest(true);\n        claimData = undefined;\n        const _lock = plasmUtils.createLockParam(\n            param.type,\n            param.transactionHash.toHex(),\n            param.publicKey.toHex(),\n            param.duration.toString(),\n            param.value.toString(),\n        );\n        const _nonce = plasmUtils.claimPowNonce(_lock.hash);\n        // send lockdrop claim request\n        plasmUtils // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .sendLockClaimRequest(plasmApi, _lock as any, _nonce)\n            .then(res => {\n                console.log('Claim ID: ' + _lock.hash + '\\nRequest transaction hash:\\n' + res.toHex());\n            })\n            .catch(e => {\n                toast.error(e);\n                console.log(e);\n            });\n    };\n\n    const hasAllVotes = useMemo(() => {\n        return approveList.length + declineList.length >= voteThreshold;\n    }, [approveList, declineList, voteThreshold]);\n\n    const reqAccepted = useMemo(() => {\n        return approveList.length - declineList.length >= positiveVotes;\n    }, [approveList, declineList, positiveVotes]);\n\n    /**\n     * requests the plasm node to send the lockdrop rewards to the locker's address\n     * @param id lockdrop claim ID\n     */\n    const submitTokenClaim = (id: Uint8Array | H256) => {\n        if (hasAllVotes && reqAccepted) {\n            setClaimingLock(true);\n            plasmUtils\n                .sendLockdropClaim(plasmApi, id)\n                .then(res => {\n                    console.log('Token claim transaction hash:\\n' + res.toHex());\n                })\n                .catch(e => {\n                    toast.error(e);\n                    console.log(e);\n                });\n        } else {\n            throw new Error('Claim requirement was not met');\n        }\n    };\n\n    // initial set claim status\n    useEffect(() => {\n        // turn off loading if it's on\n        if (claimData) {\n            setVoteList(claimData);\n\n            // turn off loading if it's on\n            if (sendingRequest) setSendingRequest(false);\n            if (claimData.complete.valueOf() && claimingLock) setClaimingLock(false);\n        }\n    }, [claimData, claimingLock, sendingRequest]);\n\n    const ActionIcon = () => {\n        if (claimData && !hasAllVotes) {\n            return <HourglassEmptyIcon />;\n        } else if (claimData === undefined) {\n            return <SendIcon />;\n        } else if (claimData && !reqAccepted) {\n            return <ReplayIcon />;\n        }\n        return <CheckIcon />;\n    };\n\n    return (\n        <>\n            <IonPopover isOpen={showApproves} onDidDismiss={() => setShowApproves(false)}>\n                <IonList>\n                    <IonListHeader>Claim Approvals</IonListHeader>\n                    {approveList.length > 0 ? (\n                        approveList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Approvals</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <IonPopover isOpen={showDeclines} onDidDismiss={() => setShowDeclines(false)}>\n                <IonList>\n                    <IonListHeader>Claim Declines</IonListHeader>\n                    {declineList.length > 0 ? (\n                        declineList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Declines</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>\n                        {plasmNetwork === 'Plasm' ? <img src={plasmIcon} alt=\"\" /> : <img src={dustyIcon} alt=\"\" />}\n                    </Icon>\n                </ListItemIcon>\n                <ListItemText>\n                    <Typography component=\"h4\" variant=\"h5\" color=\"textPrimary\">\n                        Transaction Hash: {truncateString(lockParam.transactionHash.toHex(), 6)}\n                    </Typography>\n                    <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                        Locked{' '}\n                        {networkType === 'ETH'\n                            ? `${Web3Utils.fromWei(lockParam.value.toString(), 'ether')} ETH `\n                            : `${btcLockdrop.satoshiToBitcoin(lockParam.value.toString())} BTC `}\n                        for {epochToDays(lockParam.duration.toNumber()).toString()} days\n                    </Typography>\n\n                    {claimData && (\n                        <>\n                            <br />\n                            <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                                Receiving {plasmUtils.femtoToPlm(new BigNumber(claimData.amount.toString())).toFixed()}{' '}\n                                {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                            </Typography>\n                        </>\n                    )}\n\n                    <br />\n                    <Typography component=\"p\" variant=\"body2\" className={classes.inline} color=\"textPrimary\">\n                        Claim ID: {claimId.toHex()}\n                    </Typography>\n                    <br />\n                    <Typography\n                        component=\"p\"\n                        variant=\"body2\"\n                        className={classes.inline}\n                        color={claimData ? 'primary' : 'error'}\n                    >\n                        {claimData\n                            ? claimData.complete.valueOf()\n                                ? 'Claimed Lockdrop'\n                                : 'Claim requested (not claimed)'\n                            : 'Claim not requested'}\n                    </Typography>\n                    {claimData && (\n                        <>\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowApproves(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={approveList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbUpIcon />\n                                </Badge>\n                            </IconButton>\n\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowDeclines(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={declineList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbDownIcon />\n                                </Badge>\n                            </IconButton>\n                        </>\n                    )}\n                </ListItemText>\n\n                <ListItemSecondaryAction>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"request\"\n                            onClick={() => {\n                                claimData === undefined || !reqAccepted\n                                    ? submitClaimReq(lockParam)\n                                    : submitTokenClaim(claimId);\n                            }}\n                            color=\"primary\"\n                            disabled={\n                                sendingRequest ||\n                                claimData?.complete.valueOf() ||\n                                claimingLock ||\n                                (claimData && !hasAllVotes)\n                            }\n                        >\n                            <ActionIcon />\n                        </IconButton>\n                        {sendingRequest || claimingLock ? (\n                            <CircularProgress size={24} className={classes.iconProgress} />\n                        ) : null}\n                    </div>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading, IonButton } from '@ionic/react';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport LockdropForm from '../components/EthLock/LockdropForm';\nimport * as ethLockdrop from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockInput, LockEvent, LockdropType, Lockdrop } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { removeWeb3Event } from '../helpers/getWeb3';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Container, Divider } from '@material-ui/core';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport { ApiPromise } from '@polkadot/api';\nimport * as polkadotUtil from '@polkadot/util-crypto';\nimport ClaimStatus from 'src/components/ClaimStatus';\nimport moment from 'moment';\nimport LockdropCountdownPanel from '../components/EthLock/LockdropCountdownPanel';\nimport { lockdropContracts } from '../data/lockInfo';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nconst formInfo = `This is the lockdrop form for Ethereum.\nThis uses Web3 injection so you must have Metamask (or other Web3-enabled wallet) installed in order for this to work properly.\nIf you find any errors or find issues with this form, please contact the Plasm team.\nRegarding the audit by Quantstamp, click <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a> for more details`;\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst DustyEthLockPage: React.FC = () => {\n    const [web3, setWeb3] = useState<Web3>();\n    const [plasmApi, setPlasmApi] = useState<ApiPromise>();\n    const [accounts, setAccounts] = useState<string[]>([]);\n    const [contract, setContract] = useState<Contract>();\n    // set default testnet contract address\n    const [contractAddress, setContractAddress] = useState(\n        // always use the last contract as default\n        lockdropContracts.secondLock.ropsten[lockdropContracts.secondLock.ropsten.length - 1],\n    );\n\n    const [isLoading, setLoading] = useState<{\n        loading: boolean;\n        message: string;\n    }>({\n        loading: false,\n        message: '',\n    });\n\n    const [ethNetworkType, setEthNetworkType] = useState('');\n    const [allLockEvents, setLockEvents] = useState<LockEvent[]>([]);\n    const [lockParams, setLockParams] = useState<Lockdrop[]>([]);\n    const [publicKey, setPublicKey] = useState<string>();\n\n    const [lockdropStart, setLockdropStart] = useState('0');\n    const [lockdropEnd, setLockdropEnd] = useState('0');\n\n    const isMainnet = useMemo(() => {\n        return ethNetworkType === 'main';\n    }, [ethNetworkType]);\n\n    const durationToEpoch = (duration: number) => {\n        const epochDays = 60 * 60 * 24;\n        return duration * epochDays;\n    };\n\n    /**\n     * Obtains list of lockdrop claim parameters\n     */\n    const getClaimParams = useCallback(\n        (ethAccount: string) => {\n            if (publicKey) {\n                const claimableLocks = allLockEvents.filter(i => {\n                    const isOwnedLock = i.lockOwner === ethAccount;\n                    // check if the lock as been confirmed for at least 10 blocks\n                    const hasTimePast = moment.utc().valueOf() > parseInt(i.timestamp) + 35 * 10;\n                    return isOwnedLock && hasTimePast;\n                });\n\n                const claimIDs = claimableLocks.map(lock => {\n                    const _param = plasmUtils.createLockParam(\n                        LockdropType.Ethereum,\n                        lock.transactionHash,\n                        publicKey,\n                        durationToEpoch(lock.duration).toString(),\n                        lock.eth.toString(),\n                    );\n                    return plasmUtils.structToLockdrop(_param as any);\n                });\n\n                return claimIDs;\n            }\n        },\n        [publicKey, allLockEvents],\n    );\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            try {\n                // get all the lock events from the chain\n                if (web3 && contract) {\n                    const _allLocks = await ethLockdrop.getAllLockEvents(web3, contract);\n                    setLockEvents(_allLocks);\n                }\n\n                const _lockParam = getClaimParams(accounts[0]) || [];\n                setLockParams(_lockParam);\n            } catch (error) {\n                toast.error(error.message);\n                console.log(error);\n            }\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n            removeWeb3Event();\n        };\n    });\n\n    // load web3 instance\n    useEffect(() => {\n        setLoading({\n            loading: true,\n            message: 'Connecting to Web3 instance...',\n        });\n        (async function() {\n            try {\n                const web3State = await ethLockdrop.connectWeb3(contractAddress);\n\n                const plasmNode = await plasmUtils.createPlasmInstance(plasmUtils.PlasmNetwork.Dusty);\n                setPlasmApi(plasmNode);\n\n                setEthNetworkType(await web3State.web3.eth.net.getNetworkType());\n\n                // get the initial claim parameters\n                const _lockParam = getClaimParams(web3State.accounts[0]) || [];\n                setLockParams(_lockParam);\n\n                // check contract start and end dates\n                const _end = await ethLockdrop.getContractEndDate(web3State.contract);\n                const _start = await ethLockdrop.getContractStartDate(web3State.contract);\n                setLockdropEnd(_end);\n                setLockdropStart(_start);\n\n                setWeb3(web3State.web3);\n                setContract(web3State.contract);\n                setAccounts(web3State.accounts);\n\n                const _allLocks = await ethLockdrop.getAllLockEvents(web3State.web3, web3State.contract);\n                setLockEvents(_allLocks);\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            }\n        })().finally(() => {\n            setLoading({ loading: false, message: '' });\n        });\n        // we disable this because we want this to only call once (on component mount)\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        if (web3) {\n            setLoading({\n                loading: true,\n                message: 'Connecting to Web3 instance with new contract...',\n            });\n            (async function() {\n                const _contract = await ethLockdrop.createContractInstance(web3, contractAddress);\n\n                const _allLocks = await ethLockdrop.getAllLockEvents(web3, _contract);\n                setLockEvents(_allLocks);\n                // get the initial claim parameters\n                const _lockParam = getClaimParams(accounts[0]) || [];\n                setLockParams(_lockParam);\n                // check contract start and end dates\n                const _end = await ethLockdrop.getContractEndDate(_contract);\n                const _start = await ethLockdrop.getContractStartDate(_contract);\n                setLockdropEnd(_end);\n                setLockdropStart(_start);\n                setContract(_contract);\n            })().finally(() => {\n                setLoading({ loading: false, message: '' });\n            });\n        }\n        // we disable next line to prevent change on getClaimParams\n        // eslint-disable-next-line\n    }, [contractAddress, web3, accounts]);\n\n    /**\n     * called when the user changes MetaMask account\n     */\n    // const handleAccountChange = () => {\n    //     // refresh the page\n    //     window.location.reload(false);\n    // };\n\n    // // handle metamask account change event handler\n    // useEffect(() => {\n    //     // checks if account has changed in MetaMask\n    //     if ((window as any).ethereum.on) {\n    //         (window as any).ethereum.on('accountsChanged', handleAccountChange);\n    //     }\n    //     return () => {\n    //         (window as any).ethereum.removeEventListener('accountsChanged', handleAccountChange);\n    //     };\n    // }, []);\n\n    const handleGetPublicKey = useCallback(() => {\n        if (!publicKey && web3) {\n            setLoading({\n                loading: true,\n                message: 'Obtaining user signature...',\n            });\n\n            (async function() {\n                try {\n                    const _pub = await ethLockdrop.getPubKey(\n                        web3,\n                        `Sign this message to submit a lock request.\n                    This action is required for the real-time lockdrop module ${polkadotUtil.randomAsHex(3)}`,\n                    );\n                    setPublicKey(_pub);\n                } catch (e) {\n                    console.log(e);\n                    toast.error(e.message);\n                }\n            })().finally(() => {\n                setLoading({ loading: false, message: '' });\n            });\n        } else if (typeof web3 === 'undefined') {\n            toast.error('Not connected to Web3');\n        }\n    }, [publicKey, web3]);\n\n    const handleSubmit = useCallback(\n        async (formInputVal: LockInput) => {\n            setLoading({\n                loading: true,\n                message: 'Submitting transaction...',\n            });\n            try {\n                if (!publicKey && web3) {\n                    const _publicKey = await ethLockdrop.getPubKey(\n                        web3,\n                        `Sign this message to submit a lock request.\n                This action is required for the real-time lockdrop module\n                ${polkadotUtil.randomAsHex(3)}`,\n                    );\n                    setPublicKey(_publicKey);\n                }\n\n                contract && (await ethLockdrop.submitLockTx(formInputVal, accounts[0], contract));\n                toast.success(`Successfully locked ${formInputVal.amount} ETH for ${formInputVal.duration} days!`);\n            } catch (e) {\n                toast.error(e.message.toString());\n                console.log(e);\n            }\n\n            setLoading({ loading: false, message: '' });\n        },\n        [accounts, contract, publicKey, web3],\n    );\n\n    return (\n        <IonPage>\n            <Navbar />\n            <IonContent>\n                <>\n                    <IonLoading isOpen={isLoading.loading} message={isLoading.message} />\n                    {isMainnet ? (\n                        <SectionCard maxWidth=\"lg\">\n                            <Typography variant=\"h2\" component=\"h4\" align=\"center\">\n                                Please access this page with a Ethereum testnet wallet (Ropsten)\n                            </Typography>\n                        </SectionCard>\n                    ) : (\n                        <>\n                            <SectionCard maxWidth=\"lg\">\n                                <LockdropCountdownPanel\n                                    startTime={moment.unix(parseInt(lockdropStart))}\n                                    endTime={moment.unix(parseInt(lockdropEnd))}\n                                    lockData={allLockEvents}\n                                />\n                                <Divider />\n                                <Typography variant=\"h4\" component=\"h5\" align=\"center\">\n                                    Lockdrop Contract Address\n                                </Typography>\n                                <Dropdown\n                                    options={lockdropContracts.secondLock.ropsten}\n                                    value={contractAddress}\n                                    onChange={e => setContractAddress(e.value)}\n                                />\n                            </SectionCard>\n\n                            <LockdropForm token=\"ETH\" onSubmit={handleSubmit} description={formInfo} dusty />\n\n                            <SectionCard maxWidth=\"lg\">\n                                <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                    Real-time Lockdrop Status\n                                </Typography>\n                                {publicKey && plasmApi ? (\n                                    <ClaimStatus\n                                        claimParams={lockParams}\n                                        plasmApi={plasmApi}\n                                        networkType=\"ETH\"\n                                        plasmNetwork=\"Dusty\"\n                                        publicKey={publicKey}\n                                    />\n                                ) : (\n                                    <>\n                                        <Container>\n                                            <IonButton expand=\"block\" onClick={handleGetPublicKey}>\n                                                Click to view lock claims\n                                            </IonButton>\n                                        </Container>\n                                    </>\n                                )}\n                            </SectionCard>\n                            {web3 && <LockedEthList web3={web3} accounts={accounts} lockData={allLockEvents} />}\n                        </>\n                    )}\n                </>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\nexport default DustyEthLockPage;\n","/* eslint-disable react/prop-types */\nimport React, { useMemo, useCallback } from 'react';\nimport { TimeFormat } from '../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    /**function callback if the countdown is over. This returns a boolean as the parameter */\n    onFinish?: Function;\n}\n\nconst CountdownTimer: React.FC<Props> = ({ startTime, endTime, onFinish }) => {\n    const now = moment().utc();\n    const handleCountdownFinish = useCallback(\n        (didFinish: boolean) => {\n            if (onFinish) onFinish(didFinish);\n        },\n        [onFinish],\n    );\n\n    const timeLeft = useMemo(() => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let _timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = moment(endTime).valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            _timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        handleCountdownFinish(tillEnd < 0);\n        return _timeLeft;\n    }, [now, startTime, endTime, handleCountdownFinish]);\n\n    return (\n        <>\n            <p>\n                {timeLeft.days} Days {timeLeft.hours} Hours {timeLeft.minutes} Minutes {timeLeft.seconds} Seconds\n            </p>\n        </>\n    );\n};\n\nexport default CountdownTimer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\n//import { makeStyles, createStyles } from '@material-ui/core';\nimport * as btcLockdrop from '../../helpers/lockdrop/BitcoinLockdrop';\nimport {\n    IonChip,\n    IonIcon,\n    IonLabel,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonButtons,\n    IonButton,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonList,\n    IonItem,\n    IonSpinner,\n} from '@ionic/react';\nimport { lock, time } from 'ionicons/icons';\nimport { Tooltip } from '@material-ui/core';\nimport BigNumber from 'bignumber.js';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport CountdownTimer from '../CountdownTimer';\nimport moment from 'moment';\n\ninterface Props {\n    scriptAddress: string;\n    lockData: BlockStreamApi.Transaction[];\n    lockDurationDay: number;\n    onUnlock?: Function;\n}\n\n/**\n * Shows the number of BTC locked in the given P2SH address. Information is fetched from block stream\n * @param param0 P2SH address to look for\n */\nconst LockStatus: React.FC<Props> = ({ lockData, onUnlock, scriptAddress, lockDurationDay }) => {\n    const [lockedValue, setLockedValue] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    const [canUnlock, setCanUnlock] = useState(false);\n\n    const handleUnlock = (lock: BlockStreamApi.Transaction) => {\n        if (onUnlock) onUnlock(lock);\n    };\n\n    const getLockBal = useCallback(\n        (lock: BlockStreamApi.Transaction) => {\n            const _lockVout = lock.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n            if (_lockVout) return btcLockdrop.satoshiToBitcoin(_lockVout.value.toFixed()).toFixed();\n            else return '0';\n        },\n        [scriptAddress],\n    );\n\n    useEffect(() => {\n        if (lockData.length === 0) {\n            setLockedValue('');\n        } else {\n            let totalBal = new BigNumber(0);\n            lockData.forEach(i => {\n                const _lockVout = i.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n                if (_lockVout) {\n                    totalBal = totalBal.plus(new BigNumber(_lockVout.value.toFixed()));\n                }\n            });\n\n            setLockedValue(btcLockdrop.satoshiToBitcoin(totalBal).toFixed());\n        }\n    }, [lockData, lockedValue, scriptAddress]);\n\n    return (\n        <>\n            <IonModal isOpen={showModal} onDidDismiss={() => setShowModal(false)}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>BTC Lock Information</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={() => setShowModal(false)}>Close</IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardSubtitle>General information about your lock</IonCardSubtitle>\n                        <IonCardTitle>Lock Overview</IonCardTitle>\n                    </IonCardHeader>\n                    <>\n                        {lockData.length > 0 && lockedValue ? (\n                            <IonCardContent>\n                                <IonList>\n                                    {lockData.map(e => (\n                                        <IonItem key={e.txid}>\n                                            <IonLabel>\n                                                <h2>Transaction Hash: {e.txid}</h2>\n                                                <h3>Locked Amount: {getLockBal(e)} BTC</h3>\n                                                {e.status.confirmed ? (\n                                                    <>\n                                                        <p>Locked in block no. {e.status.block_height}</p>\n                                                        {canUnlock ? (\n                                                            <p>Tokens can be unlocked</p>\n                                                        ) : (\n                                                            <>\n                                                                <CountdownTimer\n                                                                    startTime={moment.unix(e.status.block_time)}\n                                                                    endTime={moment\n                                                                        .unix(e.status.block_time)\n                                                                        .add(lockDurationDay, 'days')}\n                                                                    onFinish={(u: boolean) => setCanUnlock(u)}\n                                                                />\n                                                                <p> Till unlock</p>\n                                                            </>\n                                                        )}\n                                                    </>\n                                                ) : (\n                                                    <p>Transaction not confirmed</p>\n                                                )}\n                                            </IonLabel>\n                                            {onUnlock && (\n                                                <IonButton\n                                                    fill=\"outline\"\n                                                    slot=\"end\"\n                                                    onClick={() => handleUnlock(e)}\n                                                    disabled={!canUnlock}\n                                                >\n                                                    Unlock\n                                                </IonButton>\n                                            )}\n                                        </IonItem>\n                                    ))}\n                                </IonList>\n                            </IonCardContent>\n                        ) : (\n                            <IonLabel>No locks found yet! (Please wait for it to be confirmed)</IonLabel>\n                        )}\n                    </>\n                </IonCard>\n            </IonModal>\n\n            <Tooltip title=\"Click for details\" aria-label=\"lock-detail\">\n                <IonChip onClick={() => setShowModal(true)}>\n                    <IonIcon icon={lockedValue ? lock : time} color={lockedValue ? 'success' : 'warning'} />\n                    {lockedValue ? (\n                        <IonLabel>{lockedValue} BTC locked</IonLabel>\n                    ) : (\n                        <>\n                            <IonLabel>No deposits detected yet</IonLabel>\n                            <IonSpinner name=\"bubbles\" />\n                        </>\n                    )}\n                </IonChip>\n            </Tooltip>\n        </>\n    );\n};\n\nexport default LockStatus;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState } from 'react';\nimport { Paper, Typography, makeStyles, createStyles, Tooltip, IconButton } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { IonToast } from '@ionic/react';\n\ninterface Props {\n    header: string;\n    message: string;\n    isCode?: boolean;\n    componentType?:\n        | 'inherit'\n        | 'button'\n        | 'overline'\n        | 'caption'\n        | 'h1'\n        | 'h2'\n        | 'h3'\n        | 'h4'\n        | 'h5'\n        | 'h6'\n        | 'subtitle1'\n        | 'subtitle2'\n        | 'body1'\n        | 'body2'\n        | 'srOnly';\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        messageBox: {\n            padding: theme.spacing(2, 4),\n            alignItems: 'center',\n        },\n        signMessage: {\n            alignItems: 'center',\n            display: 'flex',\n            justifyContent: 'center',\n            height: '100%',\n        },\n        message: {\n            wordBreak: 'break-all',\n        },\n        copyIcon: {\n            verticalAlign: 'middle',\n        },\n    }),\n);\n\nconst CopyMessageBox: React.FC<Props> = ({ header, message, componentType, isCode }) => {\n    const classes = useStyles();\n    const [showCopyToast, setCopyToast] = useState(false);\n\n    const clickCopyMessage = () => {\n        navigator.clipboard.writeText(message).then(\n            function() {\n                setCopyToast(true);\n            },\n            function(err) {\n                console.error('Async: Could not copy text: ', err);\n            },\n        );\n    };\n    return (\n        <>\n            <Paper elevation={1} className={classes.messageBox}>\n                <Typography component=\"h4\" variant=\"h3\">\n                    {header}:\n                </Typography>\n                <div className={classes.signMessage}>\n                    {isCode ? (\n                        <code className={classes.message}>{message}</code>\n                    ) : (\n                        <Typography\n                            component=\"h1\"\n                            variant={componentType ? componentType : 'h2'}\n                            className={classes.message}\n                        >\n                            {message}\n                        </Typography>\n                    )}\n\n                    <div className={classes.copyIcon}>\n                        <Tooltip title=\"Copy Message\" aria-label=\"copy\">\n                            <IconButton color=\"inherit\" component=\"span\" onClick={() => clickCopyMessage()}>\n                                <FileCopyIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            </Paper>\n            <IonToast\n                isOpen={showCopyToast}\n                onDidDismiss={() => setCopyToast(false)}\n                message=\"Copied message to clipboard\"\n                duration={2000}\n            />\n        </>\n    );\n};\n\nexport default CopyMessageBox;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonAvatar,\n    IonSkeletonText,\n} from '@ionic/react';\nimport { qrEncodeUri } from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { makeStyles, createStyles, Grid } from '@material-ui/core';\nimport LockStatus from './LockStatus';\nimport CopyMessageBox from '../CopyMessageBox';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\n\ninterface Props {\n    address: string;\n    lockData: BlockStreamApi.Transaction[];\n    lockDurationDay: number;\n    onUnlock?: Function;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        qrImage: {\n            boxSizing: 'border-box',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            verticalAlign: 'middle',\n            alignSelf: 'center',\n            maxHeight: '100%',\n            maxWidth: 250,\n            objectFit: 'cover',\n        },\n        imageSkeleton: {\n            boxSizing: 'border-box',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            verticalAlign: 'middle',\n            alignSelf: 'center',\n            objectFit: 'cover',\n        },\n        chipGrid: {\n            position: 'relative',\n            padding: theme.spacing(2),\n        },\n        statusChip: {\n            [theme.breakpoints.up('sm')]: {\n                position: 'absolute',\n                right: 0,\n                top: 0,\n            },\n        },\n    }),\n);\n\nconst QrEncodedAddress: React.FC<Props> = ({ address, lockData, onUnlock, lockDurationDay }) => {\n    const classes = useStyles();\n    const [imageUri, setUri] = useState('');\n    const [imageLoaded, setImageLoad] = useState(false);\n\n    useEffect(() => {\n        qrEncodeUri(address).then(img => {\n            setUri(img);\n        });\n    }, [address]);\n\n    return (\n        <>\n            <IonCard>\n                <IonCardHeader>\n                    <img\n                        src={imageUri}\n                        className={classes.qrImage}\n                        alt=\"\"\n                        style={imageLoaded ? {} : { display: 'none' }}\n                        onLoad={() => setImageLoad(true)}\n                    />\n                    {imageLoaded ? null : (\n                        <IonAvatar className={classes.imageSkeleton}>\n                            <IonSkeletonText animated />\n                        </IonAvatar>\n                    )}\n\n                    <IonCardSubtitle>Please send the amount you want to lock to this P2SH address</IonCardSubtitle>\n                    <Grid container>\n                        <Grid item xs={12} sm={6}>\n                            <IonCardTitle>Lock Script Address</IonCardTitle>\n                        </Grid>\n                        <Grid item xs={12} sm={6} className={classes.chipGrid}>\n                            <div className={classes.statusChip}>\n                                <LockStatus\n                                    lockData={lockData}\n                                    scriptAddress={address}\n                                    onUnlock={onUnlock}\n                                    lockDurationDay={lockDurationDay}\n                                />\n                            </div>\n                        </Grid>\n                    </Grid>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <CopyMessageBox header=\"P2SH Address\" message={address} />\n                </IonCardContent>\n            </IonCard>\n        </>\n    );\n};\n\nexport default QrEncodedAddress;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonTextarea,\n    IonButton,\n    IonChip,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonTitle,\n    IonText,\n    IonLoading,\n} from '@ionic/react';\nimport { makeStyles, createStyles, Container, Typography } from '@material-ui/core';\nimport * as btcLock from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DropdownOption } from '../DropdownOption';\nimport { btcDustyDurations, btcDurations } from '../../data/lockInfo';\nimport QrEncodedAddress from './QrEncodedAddress';\nimport CopyMessageBox from '../CopyMessageBox';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport { OptionItem, Lockdrop, LockdropType } from 'src/types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport ClaimStatus from '../ClaimStatus';\nimport * as plasmUtils from '../../helpers/plasmUtils';\nimport { ApiPromise } from '@polkadot/api';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport * as polkadotCrypto from '@polkadot/util-crypto';\nimport * as bitcoinjsMessage from 'bitcoinjs-message';\n\ninterface Props {\n    networkType: bitcoinjs.Network;\n    plasmApi: ApiPromise;\n}\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        button: {\n            textAlign: 'center',\n        },\n    }),\n);\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\n/**\n * Obtains lockdrop participant's public key by receiving raw signatures and BTC address\n * @param networkType Bitcoin network to use\n */\nconst BtcRawSignature: React.FC<Props> = ({ networkType, plasmApi }) => {\n    const classes = useStyles();\n    // switch lock duration depending on the chain network\n    const networkLockDur = networkType === bitcoinjs.networks.bitcoin ? btcDurations : btcDustyDurations;\n\n    const [sigInput, setSig] = useState('');\n    const [addressInput, setAddress] = useState('');\n\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [p2shAddress, setP2sh] = useState('');\n    const [publicKey, setPublicKey] = useState('');\n    const [allLockParams, setAllLockParams] = useState<Lockdrop[]>([]);\n    const [currentScriptLocks, setCurrentScriptLocks] = useState<BlockStreamApi.Transaction[]>([]);\n    const [isLoading, setLoading] = useState<{ loadState: boolean; message: string }>({\n        loadState: false,\n        message: '',\n    });\n\n    // current lock unlock signature data set\n    // everything below here are used for raw unlock signature\n    const [lockUtxo, setLockUtxo] = useState<BlockStreamApi.Transaction>();\n    const [unlockTxBuilder, setUnlockTxBuilder] = useState<bitcoinjs.Transaction>();\n    const [userUnlockSig, setUserUnlockSig] = useState('');\n    const [unlockUtxoHex, setUnlockUtxoHex] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    // in satoshi\n    const [unlockFee, setUnlockFee] = useState('0');\n\n    // signature nonce used for security\n    const sigNonce = useMemo(() => {\n        return polkadotCrypto.randomAsHex(2);\n    }, []);\n\n    const isValidFee = useCallback(\n        (fee: string, lockTx: BlockStreamApi.Transaction) => {\n            // checks if the given string is a valid integer\n            function checkInt(val: string) {\n                const checkString = new RegExp(/^(0|[1-9][0-9]*)$/);\n                return checkString.test(val);\n            }\n\n            if (typeof lockTx !== 'undefined' && !isNaN(parseInt(fee)) && checkInt(fee)) {\n                const lockP2sh = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n                const _fee = parseInt(fee);\n                const lockVout = lockTx.vout.find(locked => locked.scriptpubkey_address === lockP2sh.address!);\n                if (typeof lockVout === 'undefined') {\n                    return false;\n                }\n                return lockVout.value - _fee > 0 && _fee !== 0;\n            } else {\n                return false;\n            }\n        },\n        [publicKey, lockDuration.value, networkType],\n    );\n\n    const sigHash = useMemo(() => {\n        try {\n            if (typeof lockUtxo !== 'undefined' && !isNaN(parseInt(unlockFee)) && isValidFee(unlockFee, lockUtxo)) {\n                const _fee = parseInt(unlockFee);\n                const unsigned = btcLock.unsignedUnlockTx(lockUtxo, publicKey, lockDuration.value, networkType, _fee);\n                setShowModal(true);\n                setUnlockTxBuilder(unsigned.unsignedUnlockTx);\n                return unsigned.signatureHash;\n            }\n        } catch (err) {\n            console.log(err);\n            toast.error(err.message);\n        }\n        return 'N/A';\n    }, [unlockFee, publicKey, lockDuration.value, networkType, lockUtxo, isValidFee]);\n\n    const onSubmit = () => {\n        try {\n            if (!lockDuration || !addressInput || !sigInput) throw new Error('Please fill in all the inputs');\n\n            if (!btcLock.validateBtcAddress(addressInput, networkType))\n                throw new Error('Please use a valid Bitcoin address');\n            const _msg = btcLock.MESSAGE + sigNonce;\n\n            if (bitcoinjsMessage.verify(_msg, addressInput, sigInput)) {\n                const pub = btcLock.getPublicKey(addressInput, sigInput, _msg, networkType);\n                console.log({ _msg, addressInput, sigInput, pub });\n                setPublicKey(pub);\n\n                const p2sh = btcLock.getLockP2SH(lockDuration.value, pub, networkType);\n\n                if (typeof p2sh.address === 'string') {\n                    setP2sh(p2sh.address);\n                } else {\n                    throw new Error('Cannot create P2SH address');\n                }\n                toast.success('Successfully created lock script');\n            } else {\n                throw new Error('Invalid signature');\n            }\n\n            //setPublicKey(btcLock.compressPubKey(pubKeyInput, networkType));\n            toast.success('Successfully created lock script');\n        } catch (e) {\n            console.log(e);\n            toast.error(e.message);\n        }\n    };\n\n    // show unsigned transaction hahs\n    const unlockScriptTx = (lock: BlockStreamApi.Transaction) => {\n        // set default transaction fee\n        setUnlockFee((lock.fee * 0.1).toString());\n        setLockUtxo(lock);\n    };\n\n    // use the obtained transaction signature to create full signed transaction in hex\n    // this function will broad cast the transaction as well\n    const getUnlockUtxo = async () => {\n        if (unlockTxBuilder) {\n            try {\n                if (userUnlockSig === '') {\n                    throw new Error('Please paste the unlock signature');\n                }\n                setLoading({ loadState: true, message: 'broadcasting unlock transaction...' });\n                const lockScript = btcLock.btcLockScript(\n                    publicKey,\n                    btcLock.daysToBlockSequence(lockDuration.value),\n                    networkType,\n                );\n\n                const signedUnlockUtxo = btcLock.signTransactionRaw(\n                    unlockTxBuilder,\n                    userUnlockSig,\n                    lockScript,\n                    networkType,\n                );\n\n                console.log('Signed unlock UTXO hex:\\n' + signedUnlockUtxo);\n\n                setUnlockUtxoHex(signedUnlockUtxo);\n\n                const _net = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n                const unlockTxId = await btcLock.broadcastTransaction(signedUnlockUtxo, _net);\n                console.log('Broadcasted: ' + unlockTxId);\n                toast.success('Successfully broadcasted ' + unlockTxId);\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            } finally {\n                setLoading({ loadState: false, message: '' });\n            }\n        }\n    };\n\n    // clean all unlock UTXO signature state when closing the modal\n    const cleanUnlockTxState = () => {\n        setLockUtxo(undefined);\n        setUnlockTxBuilder(undefined);\n        setUserUnlockSig('');\n        setUnlockFee('0');\n        setUnlockUtxoHex('');\n        setShowModal(false);\n    };\n\n    const getLockBal = useCallback(() => {\n        if (lockUtxo) {\n            const _lockVout = lockUtxo.vout.find(locked => locked.scriptpubkey_address === p2shAddress);\n            if (_lockVout) return btcLock.satoshiToBitcoin(_lockVout.value.toFixed()).toFixed();\n        }\n        return '0';\n    }, [lockUtxo, p2shAddress]);\n\n    const fetchLockdropParams = useCallback(async () => {\n        const blockStreamNet = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n        // initialize lockdrop data array\n        const _lockParams: Lockdrop[] = [];\n\n        // get all the possible lock addresses\n        networkLockDur.map(async (dur, index) => {\n            const scriptAddr = btcLock.getLockP2SH(dur.value, publicKey, networkType).address!;\n            // make a real-time lockdrop data structure with the current P2SH and duration\n            //const lock = await btcLock.getLockParameter(scriptAddr, dur.value, publicKey, blockStreamNet);\n\n            const locks = await btcLock.getBtcTxsFromAddress(scriptAddr, blockStreamNet);\n            const daysToEpoch = 60 * 60 * 24 * dur.value;\n\n            const lockParams = locks.map(i => {\n                const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddr);\n\n                if (lockVal) {\n                    return plasmUtils.createLockParam(\n                        LockdropType.Bitcoin,\n                        '0x' + i.txid,\n                        '0x' + publicKey,\n                        daysToEpoch.toString(),\n                        lockVal.value.toString(),\n                    );\n                } else {\n                    throw new Error('Could not find the lock value from the UTXO');\n                }\n            });\n\n            // if the lock data is the one that the user is viewing\n            if (p2shAddress === scriptAddr && dur.value === lockDuration.value) {\n                setCurrentScriptLocks(locks);\n            }\n\n            // loop through all the token locks within the given script\n            // this is to prevent nested array\n            lockParams.forEach(e => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const currentParam = plasmUtils.structToLockdrop(e as any);\n\n                _lockParams.push(currentParam);\n            });\n\n            // set lockdrop param data if we're in the final loop\n            // we do this because we want to set the values inside the then block\n            if (_lockParams.length > allLockParams.length && index === networkLockDur.length - 1) {\n                setAllLockParams(_lockParams);\n            }\n        });\n    }, [publicKey, networkType, p2shAddress, networkLockDur, allLockParams, lockDuration.value]);\n\n    useEffect(() => {\n        // change P2SH if the user changed the lock duration\n        if (publicKey && lockDuration.value !== 0) {\n            const lockScript = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n            setP2sh(lockScript.address!);\n            fetchLockdropParams().catch(e => {\n                toast.error(e);\n            });\n        }\n    }, [fetchLockdropParams, lockDuration.value, networkType, publicKey]);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            publicKey &&\n                fetchLockdropParams().catch(e => {\n                    toast.error(e);\n                });\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            {p2shAddress && (\n                <QrEncodedAddress\n                    address={p2shAddress}\n                    lockData={currentScriptLocks}\n                    onUnlock={unlockScriptTx}\n                    lockDurationDay={lockDuration.value}\n                />\n            )}\n\n            <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n            <IonModal isOpen={showModal} onDidDismiss={() => cleanUnlockTxState()}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Unlock BTC Transaction</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={() => cleanUnlockTxState()}>Close</IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardSubtitle>\n                            Provide the signature for your unlock script. This will unlock your tokens\n                        </IonCardSubtitle>\n                        <IonCardTitle>Unlock UTXO</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        {lockUtxo && (\n                            <>\n                                <IonLabel>\n                                    <p>Lock ID: {lockUtxo.txid}</p>\n                                    <p>Lock Value: {getLockBal()} BTC</p>\n                                </IonLabel>\n                                {unlockUtxoHex ? (\n                                    <CopyMessageBox header=\"signed unlock transaction\" message={unlockUtxoHex} isCode />\n                                ) : (\n                                    <>\n                                        <CopyMessageBox header=\"unsigned\" message={sigHash} isCode />\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">\n                                                Paste your signature here<IonText color=\"danger\">*</IonText>\n                                            </IonLabel>\n                                            <IonTextarea\n                                                placeholder=\"f816733330690bdce1...\"\n                                                value={userUnlockSig}\n                                                onIonChange={e => setUserUnlockSig(e.detail.value!)}\n                                            ></IonTextarea>\n                                        </IonItem>\n                                        <IonItem>\n                                            <IonLabel position=\"floating\">Transaction fee</IonLabel>\n                                            <IonInput\n                                                placeholder={lockUtxo.fee.toString() + '  Satoshi'}\n                                                onIonInput={e => {\n                                                    const _inputFee = (e.target as HTMLInputElement).value;\n                                                    setUnlockFee(_inputFee);\n                                                }}\n                                                color={isValidFee(unlockFee, lockUtxo) ? 'primary' : 'danger'}\n                                            ></IonInput>\n                                        </IonItem>\n                                    </>\n                                )}\n\n                                <IonButton\n                                    disabled={!!unlockUtxoHex || !isValidFee(unlockFee, lockUtxo)}\n                                    onClick={() => getUnlockUtxo()}\n                                >\n                                    Generate unlock UTXO\n                                </IonButton>\n                            </>\n                        )}\n                    </IonCardContent>\n                </IonCard>\n            </IonModal>\n\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardSubtitle>\n                        Please provide the public key or address and signature of the BTC address you wish to use for\n                        the BTC lockdrop\n                    </IonCardSubtitle>\n                    <IonCardTitle>Get Public Key</IonCardTitle>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <CopyMessageBox header=\"message\" message={btcLock.MESSAGE + sigNonce} />\n                    <IonItem>\n                        <IonLabel position=\"stacked\">Bitcoin Address</IonLabel>\n                        <IonInput\n                            value={addressInput}\n                            placeholder=\"Enter BTC Address\"\n                            onIonChange={e => setAddress(e.detail.value!)}\n                        ></IonInput>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonTextarea\n                            placeholder=\"Paste your base64 message signature here...\"\n                            value={sigInput}\n                            onIonChange={e => setSig(e.detail.value!)}\n                        ></IonTextarea>\n                    </IonItem>\n                    <IonLabel position=\"stacked\">Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={btcDustyDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setDuration(\n                                    btcDustyDurations.filter(\n                                        i => i.value === ((e.target.value as unknown) as number),\n                                    )[0],\n                                )\n                            }\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n                    <div className={classes.button}>\n                        <IonButton onClick={onSubmit} disabled={!!publicKey}>\n                            Generate Lock Script\n                        </IonButton>\n                    </div>\n                </IonCardContent>\n            </IonCard>\n            <SectionCard maxWidth=\"lg\">\n                <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                    Real-time Lockdrop Status\n                </Typography>\n                {publicKey && lockDuration.value !== 0 ? (\n                    <ClaimStatus\n                        claimParams={allLockParams}\n                        plasmApi={plasmApi}\n                        networkType=\"BTC\"\n                        plasmNetwork=\"Dusty\"\n                        publicKey={publicKey}\n                    />\n                ) : (\n                    <>\n                        <Container>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                                Provide signature to view\n                            </Typography>\n                        </Container>\n                    </>\n                )}\n            </SectionCard>\n        </div>\n    );\n};\n\nexport default BtcRawSignature;\n","import React, { useState, useEffect } from 'react';\nimport { IonContent, IonPage, IonLoading } from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Link, makeStyles, createStyles } from '@material-ui/core';\nimport quantstampLogo from '../resources/quantstamp-logo.png';\nimport BtcRawSignature from '../components/BtcLock/BtcRawSignature';\n//import TrezorConnect, { DEVICE } from 'trezor-connect';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport { toast } from 'react-toastify';\nimport { ApiPromise } from '@polkadot/api';\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        quantLogo: {\n            marginRight: theme.spacing(2),\n            maxHeight: 20,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        textBox: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    }),\n);\n\nexport default function DustyBtcLockPage() {\n    const classes = useStyles();\n\n    const [plasmApi, setPlasmApi] = useState<ApiPromise>({} as ApiPromise);\n    const [isLoading, setLoading] = useState<{\n        loadState: boolean;\n        message: string;\n    }>({\n        loadState: false,\n        message: '',\n    });\n\n    // connect to plasm node on mount\n    useEffect(() => {\n        setLoading({\n            loadState: true,\n            message: 'Connecting to Plasm Network',\n        });\n\n        plasmUtils\n            .createPlasmInstance(plasmUtils.PlasmNetwork.Dusty)\n            .then(e => {\n                setPlasmApi(e);\n                console.log('connected to Plasm network');\n            })\n            .catch(err => {\n                toast.error(err);\n                console.log(err);\n            })\n            .finally(() => {\n                setLoading({\n                    loadState: false,\n                    message: '',\n                });\n            });\n    }, []);\n\n    return (\n        <>\n            <IonPage>\n                <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n                <Navbar />\n                <IonContent>\n                    <SectionCard maxWidth=\"md\">\n                        <div>\n                            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                Dusty Plasm Network BTC Lockdrop\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                                Audited by{' '}\n                                <Link\n                                    color=\"inherit\"\n                                    href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    <img src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                                </Link>\n                            </Typography>\n                        </div>\n                        <BtcRawSignature networkType={bitcoinjs.networks.testnet} plasmApi={plasmApi} />\n                    </SectionCard>\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        </>\n    );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { IonMenu, IonListHeader, IonContent, IonList, IonItem, IonIcon, IonLabel, IonRouterLink } from '@ionic/react';\nimport { Links } from '../data/links';\nimport homeIcon from '../resources/home-outline.svg';\nimport twitter from '../resources/logo-twitter.svg';\nimport discord from '../resources/logo-discord.svg';\nimport telegram from '../resources/logo-telegram.svg';\nimport github from '../resources/logo-github.svg';\nimport { firstLock, secondLock, dustyLock } from '../data/lockInfo';\nimport { LockMenu } from '../types/LockdropModels';\n\ninterface Props {\n    headerText: string;\n    menuItems: LockMenu[];\n}\nconst MenuSection: React.FC<Props> = ({ headerText, menuItems }) => {\n    return (\n        <IonList>\n            <IonListHeader>{headerText}</IonListHeader>\n            {menuItems.map((i, index) => (\n                <IonRouterLink routerLink={i.uri} key={index}>\n                    <IonItem button detail disabled={i.disabled}>\n                        <IonIcon src={i.icon} slot=\"start\" />\n                        <IonLabel>{i.title}</IonLabel>\n                    </IonItem>\n                </IonRouterLink>\n            ))}\n        </IonList>\n    );\n};\n\nconst SideMenu: React.FC = () => {\n    return (\n        <>\n            <IonMenu contentId=\"main\">\n                <IonListHeader>Sitemap</IonListHeader>\n                <IonContent>\n                    <IonList>\n                        <IonRouterLink routerLink=\"/lock-form\">\n                            <IonItem button detail>\n                                <IonIcon src={homeIcon} slot=\"start\" />\n                                <IonLabel>Home</IonLabel>\n                            </IonItem>\n                        </IonRouterLink>\n                    </IonList>\n\n                    <MenuSection headerText=\"First Lockdrop\" menuItems={firstLock} />\n                    <MenuSection headerText=\"Second Lockdrop\" menuItems={secondLock} />\n                    <MenuSection headerText=\"Dusty Lockdrop\" menuItems={dustyLock} />\n\n                    <IonList>\n                        <IonListHeader>External Links</IonListHeader>\n                        <IonItem href={Links.discord} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon src={discord} slot=\"start\" />\n                            <IonLabel>Discord</IonLabel>\n                        </IonItem>\n                        <IonItem href={Links.telegram} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon src={telegram} slot=\"start\" />\n                            <IonLabel>Telegram</IonLabel>\n                        </IonItem>\n                        <IonItem href={Links.twitter} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon src={twitter} slot=\"start\" />\n                            <IonLabel>Twitter</IonLabel>\n                        </IonItem>\n                        <IonItem href={Links.github} rel=\"noopener noreferrer\" target=\"_blank\" detail>\n                            <IonIcon src={github} slot=\"start\" />\n                            <IonLabel>Github</IonLabel>\n                        </IonItem>\n                    </IonList>\n                </IonContent>\n            </IonMenu>\n        </>\n    );\n};\n\nexport default SideMenu;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet, IonSplitPane } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport LandingPage from './pages/LandingPage';\nimport EthLockdropPage from './pages/EthLockdropPage';\nimport DustyEthLockPage from './pages/DustyEthLockPage';\nimport DustyBtcLockPage from './pages/DustyBtcLockPage';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\nimport SideMenu from './components/SideMenu';\n\nconst App: React.FC = () => {\n    return (\n        <IonApp>\n            <IonReactHashRouter>\n                <IonSplitPane contentId=\"main\" when=\"lg\">\n                    <SideMenu />\n\n                    <IonRouterOutlet id=\"main\" animated>\n                        <Route exact path=\"/lock-form\" component={LandingPage} />\n                        <Route path=\"/lock-form/first\" component={EthLockdropPage} />\n                        <Route path=\"/lock-form/dusty-eth\" component={DustyEthLockPage} />\n                        <Route path=\"/lock-form/dusty-btc\" component={DustyBtcLockPage} />\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/lock-form\" />} />\n                    </IonRouterOutlet>\n                </IonSplitPane>\n            </IonReactHashRouter>\n        </IonApp>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable-line  no-use-before-define */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\n\n// define web3 instance as a global variable\ndeclare global {\n    interface Window {\n        web3: Web3;\n        contract: Contract;\n    }\n}\nwindow.contract = window.contract || {};\nwindow.web3 = window.web3 || {};\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n            'Work Sans',\n            '-apple-system',\n            'BlinkMacSystemFont',\n            'Segoe UI',\n            'Roboto',\n            'Oxygen',\n            'Ubuntu',\n            'Cantarell',\n            'Fira Sans',\n            'Droid Sans',\n            'Helvetica Neue',\n        ].join(','),\n    },\n    palette: {\n        primary: {\n            main: '#4791db',\n            light: '#1976d2',\n            dark: '#115293',\n        },\n    },\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import BN from 'bn.js';\nimport { Moment } from 'moment';\nimport { u64, u128, U8aFixed, BTreeSet } from '@polkadot/types';\nimport { H256, AuthorityId } from '@polkadot/types/interfaces';\n\n/**\n * lock contract parameter\n */\nexport interface LockInput {\n    duration: number; // in days\n    amount: BN; // in ETH\n    affiliation: string; // Ethereum address\n    rate: number;\n}\n\n/**\n * defines the method for creating a BTC transaction\n */\nexport enum BtcWalletType {\n    Trezor,\n    Ledger,\n    Raw,\n    None,\n}\n\nexport interface UnspentTx {\n    value: number;\n    txId: string;\n    vout: number;\n    address?: string;\n    height?: number;\n}\n\nexport interface LockMenu {\n    uri?: string;\n    icon?: string;\n    title: string;\n    startDate: Moment;\n    endDate: Moment;\n    disabled?: boolean;\n}\n\nexport interface TimeFormat {\n    days: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n}\n\nexport enum LockSeason {\n    First,\n    Second,\n    Dusty,\n    Third,\n}\n\n/**\n * The lockdrop lock token type. This is used for the real-time lockdrop module\n */\nexport enum LockdropType {\n    Bitcoin,\n    Ethereum,\n}\n\nexport interface LockEvent {\n    eth: BN; // this uses BN.js instead of BigNumber.js because that is what eth helper uses\n    duration: number; // in Unix epoch seconds\n    lock: string; // lock address\n    introducer: string;\n    blockNo: number;\n    timestamp: string; // in Unix epoch seconds\n    lockOwner: string; // locker's address\n    blockHash: string;\n    transactionHash: string;\n}\n\n// option data is the type that is going to be passed to the component\nexport interface OptionData {\n    dataSets: OptionItem[];\n    onChoose: Function;\n}\n\n// option item type is used to provide the data for dropdown items\nexport interface OptionItem {\n    label: string; // the dropdown display label\n    value: number; // dropdown select return value\n    rate: number;\n}\n\n/**\n * used for real-time lockdrop parameter\n * this data is used to communicate with Substrate\n */\nexport interface Lockdrop {\n    type: LockdropType;\n    transactionHash: H256; //H256\n    publicKey: U8aFixed; // [u8; 33]\n    duration: u64; // u64\n    value: u128; // u128\n}\n\nexport interface Claim {\n    params: Lockdrop;\n    approve: BTreeSet<AuthorityId>;\n    decline: BTreeSet<AuthorityId>;\n    amount: u128; // u128\n    complete: boolean;\n}\n\nexport interface HwSigner {\n    publicKey: Buffer;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    network?: any;\n    sign(hash: Buffer, lowR?: boolean): Buffer | Promise<Buffer>;\n    getPublicKey?(): Buffer;\n}\n","module.exports = __webpack_public_path__ + \"static/media/bitcoin_logo.c200e932.svg\";","module.exports = __webpack_public_path__ + \"static/media/quantstamp-logo.a01ad5b8.png\";","/* eslint-disable @typescript-eslint/camelcase */\nimport BigNumber from 'bignumber.js';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { Hash, H256 } from '@polkadot/types/interfaces';\nimport * as polkadotUtilCrypto from '@polkadot/util-crypto';\n//import * as polkadotUtil from '@polkadot/util';\nimport { u8aConcat } from '@polkadot/util';\nimport { Struct, TypeRegistry, u64, u128, U8aFixed, u8 } from '@polkadot/types';\nimport * as plasmDefinitions from '@plasm/types/interfaces/definitions';\nimport { LockdropType, Claim, Lockdrop } from 'src/types/LockdropModels';\n\n/**\n * Plasm network enum\n */\nexport enum PlasmNetwork {\n    Local,\n    Dusty,\n    Main,\n}\n\n/**\n * converts the plasm network minimum denominator to PLM\n * @param femto minimum token value\n */\nexport function femtoToPlm(femto: BigNumber) {\n    if (femto.isLessThanOrEqualTo(new BigNumber(0))) {\n        return new BigNumber(0);\n    }\n    const plmDenominator = new BigNumber(10).pow(new BigNumber(15));\n    return femto.dividedBy(plmDenominator);\n}\n\n/**\n * a Proof-of-Work function that hashes the lockdrop claim ID and the nonce\n * together to verify the unsigned transaction.\n * this will return the correct nonce in hex string\n * @param claimId the real-time lockdrop claim ID (blake2 hashed lock parameter)\n */\nexport function claimPowNonce(claimId: Uint8Array | H256): Uint8Array {\n    let nonce = polkadotUtilCrypto.randomAsU8a();\n    while (true) {\n        const hash = polkadotUtilCrypto.blake2AsU8a(u8aConcat(claimId, nonce));\n        //console.log('PoW hash: ' + u8aToHex(hash));\n        if (hash[0] > 0) {\n            nonce = polkadotUtilCrypto.randomAsU8a();\n            //console.log('Next nonce: ' + u8aToHex(nonce));\n        } else {\n            return nonce;\n        }\n    }\n}\n\n/**\n * used for adding new polkadot-js api types for communicating with plasm node\n */\nexport const plasmTypeReg = new TypeRegistry();\n\n/**\n * establishes a connection between the client and the plasm node with the given endpoint.\n * this will default to the main net node\n * @param network end point for the client to connect to\n */\nexport async function createPlasmInstance(network?: PlasmNetwork) {\n    let endpoint = '';\n    const types = Object.values(plasmDefinitions).reduce((res, { types }): object => ({ ...res, ...types }), {});\n\n    switch (network) {\n        case PlasmNetwork.Local:\n            endpoint = 'ws://127.0.0.1:9944';\n            break;\n        case PlasmNetwork.Dusty:\n            endpoint = 'wss://rpc.dusty.plasmnet.io/';\n            break;\n        case PlasmNetwork.Main: // main net endpoint will be the default value\n        default:\n            endpoint = 'wss://rpc.plasmnet.io';\n            break;\n    }\n\n    const wsProvider = new WsProvider(endpoint);\n\n    return await ApiPromise.create({\n        provider: wsProvider,\n        types: {\n            ...types,\n            // aliases that don't do well as part of interfaces\n            'voting::VoteType': 'VoteType',\n            'voting::TallyType': 'TallyType',\n            // chain-specific overrides\n            Address: 'GenericAddress',\n            Keys: 'SessionKeys4',\n            StakingLedger: 'StakingLedgerTo223',\n            Votes: 'VotesTo230',\n            ReferendumInfo: 'ReferendumInfoTo239',\n        },\n        // override duplicate type name\n        typesAlias: { voting: { Tally: 'VotingTally' } },\n    });\n}\n\n/**\n * convert the given lock duration in to PLM issue bonus rate\n * @param duration token lock duration\n */\nexport function lockDurationToRate(duration: number) {\n    if (duration < 30) {\n        return 0;\n    } else if (duration < 100) {\n        return 24;\n    } else if (duration < 300) {\n        return 100;\n    } else if (duration < 1000) {\n        return 360;\n    } else {\n        return 1600;\n    }\n}\n\n/**\n * Create a lock parameter object with the given lock information.\n * This is used for the real-time lockdrop module in Plasm for both ETH and BTC locks\n * @param network the lockdrop network type\n * @param transactionHash the lock transaction hash in hex string\n * @param publicKey locker's public key in hex string\n * @param duration lock duration in Unix epoch (seconds)\n * @param value lock value in the minimum denominator (Wei or Satoshi)\n */\nexport function createLockParam(\n    network: LockdropType,\n    transactionHash: string,\n    publicKey: string,\n    duration: string,\n    value: string,\n) {\n    const lockParam = new Struct(\n        plasmTypeReg,\n        {\n            type: u8,\n            transactionHash: 'H256',\n            publicKey: U8aFixed, // [u8; 33]\n            duration: u64,\n            value: u128,\n        },\n        {\n            type: network, // enum is converted to number\n            transactionHash: transactionHash,\n            publicKey: new U8aFixed(plasmTypeReg, publicKey, 264),\n            duration: new u64(plasmTypeReg, duration),\n            value: new u128(plasmTypeReg, value),\n        },\n    );\n\n    // console.log({\n    //     type: network, // enum is converted to number\n    //     transactionHash: transactionHash,\n    //     publicKey: new U8aFixed(plasmTypeReg, publicKey, 264).toHex(),\n    //     duration: new u64(plasmTypeReg, duration).toString(),\n    //     value: new u128(plasmTypeReg, value).toString(),\n    //     nonce: polkadotUtil.u8aToHex(claimPowNonce(lockParam.hash)),\n    // });\n\n    return lockParam;\n}\n\n/**\n * signature message that is used for the claim_to() function\n */\nexport const SIG_MESSAGE = 'todo';\n\n/**\n * sends the unclaimed lockdrop reward to the given plasm address.\n * the signature must derive from the public key that made the lock.\n * @param api\n * @param claimId\n * @param recipient\n * @param signature\n */\nexport async function claimTo(api: ApiPromise, claimId: string, recipient: string, signature: string) {\n    const claimToTx = api.tx.plasmLockdrop.claimTo(claimId, recipient, signature);\n\n    const txHash = await claimToTx.send();\n\n    return txHash;\n}\n\n/**\n * submits a real-time lockdrop claim request to plasm node and returns the transaction hash.\n * this is a unsigned transaction that is only authenticated by a simple PoW to prevent spamming\n * @param api plasm node api instance (polkadot-js api)\n * @param lockParam lockdrop parameter that contains the lock data\n * @param nonce nonce for PoW authentication with the node\n */\nexport async function sendLockClaimRequest(api: ApiPromise, lockParam: Struct, nonce: Uint8Array): Promise<Hash> {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.request(lockParam.toU8a(), nonce);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * generates a Plasm public address with the given ethereum public key\n * @param ethPubKey an compressed ECDSA public key. With or without the 0x prefix\n */\nexport function generatePlmAddress(publicKey: string) {\n    // converts a given hex string into Uint8Array\n    const toByteArray = (hexString: string) => {\n        const result = [];\n        for (let i = 0; i < hexString.length; i += 2) {\n            result.push(parseInt(hexString.substr(i, 2), 16));\n        }\n        return new Uint8Array(result);\n    };\n\n    // hash to blake2\n    const plasmPubKey = polkadotUtilCrypto.blake2AsU8a(toByteArray(publicKey.replace('0x', '')), 256);\n    // encode address\n    const plasmAddress = polkadotUtilCrypto.encodeAddress(plasmPubKey, 5);\n    return plasmAddress;\n}\n\n/**\n * Fetches the number of free balance for the given address in femto.\n * @param api polkadot-js api instance\n * @param plasmAddress Plasm network address\n * @param asPlm if the output value should be in PLM. Default denominator is in femto\n */\nexport async function getAddressBalance(api: ApiPromise, plasmAddress: string, asPlm?: boolean) {\n    const { data: balance } = await api.query.system.account(plasmAddress);\n    let _bal = new BigNumber(balance.free.toString());\n    if (asPlm) {\n        _bal = femtoToPlm(new BigNumber(balance.free.toString()));\n    }\n    return _bal;\n}\n\n/**\n * Fetches Plasm real-time lockdrop vote threshold and positive vote values.\n * @param api polkadot-js api instance\n */\nexport async function getLockdropVoteRequirements(api: ApiPromise) {\n    // number of minium votes required for a claim request to be accepted\n    const _voteThreshold = Number.parseInt((await api.query.plasmLockdrop.voteThreshold()).toString());\n    // number of outstanding votes (approve votes - decline votes) required for a claim request to be accepted\n    const _positiveVotes = Number.parseInt((await api.query.plasmLockdrop.positiveVotes()).toString());\n\n    return {\n        voteThreshold: _voteThreshold,\n        positiveVotes: _positiveVotes,\n    };\n}\n\n/**\n * sends a lockdrop claim request to Plasm net node. This will fund the ECDSA address.\n * @param api polkadot API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function sendLockdropClaim(api: ApiPromise, claimId: Uint8Array | H256) {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.claim(claimId);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * Plasm network real-time lockdrop claim data query wrapper.\n * This will query the node with the given claim ID and wrap the data to a readable interface.\n * This function will return undefined if the claim data does not exists on the chain.\n * @param api Polkadot-js API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function getClaimStatus(api: ApiPromise, claimId: Uint8Array | H256) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = (await api.query.plasmLockdrop.claims(claimId)) as any;\n\n    // wrap block query data to TypeScript interface\n    const data: Claim = {\n        params: {\n            // we use snake case here because this data is directly parsed from the node\n            type: claim.get('params').get('type'),\n            transactionHash: claim.get('params').get('transaction_hash'),\n            publicKey: claim.get('params').get('public_key'),\n            duration: claim.get('params').get('duration'),\n            value: claim.get('params').get('value'),\n        },\n        approve: claim.get('approve'),\n        decline: claim.get('decline'),\n        amount: claim.get('amount'),\n        complete: claim.get('complete'),\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_key, value] of Object.entries(data.params)) {\n        // check if data exists on chain\n        if (\n            typeof value === 'undefined' ||\n            value.toHex() === '0x000000000000000000000000000000000000000000000000000000000000000000' || // pub key\n            value.toHex() === '0x0000000000000000000000000000000000000000000000000000000000000000' // tx hash\n        ) {\n            return undefined;\n        }\n    }\n\n    return data;\n}\n\n/**\n * converts lockdrop parameter into a Lockdrop type\n * @param lockdropParam lockdrop parameter type in polakdot-js structure\n */\nexport function structToLockdrop(lockdropParam: Struct) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = lockdropParam as any;\n    const param: Lockdrop = {\n        type: claim.get('type'),\n        transactionHash: claim.get('transactionHash'),\n        publicKey: claim.get('publicKey'),\n        duration: claim.get('duration'),\n        value: claim.get('value'),\n    };\n\n    return param;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport bip68 from 'bip68';\nimport { LockdropType, HwSigner } from '../../types/LockdropModels';\nimport { Network } from 'bitcoinjs-lib';\nimport BigNumber from 'bignumber.js';\nimport * as plasmUtils from '../plasmUtils';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport { SoChainApi } from 'src/types/SoChainTypes';\nimport AppBtc from '@ledgerhq/hw-app-btc';\nimport * as LedgerTypes from '../../types/LedgerTypes';\nimport * as bitcoinjsMessage from 'bitcoinjs-message';\n\n// https://www.blockchain.com/api/api_websocket\nexport const BLOCKCHAIN_WS = 'wss://ws.blockchain.info/inv';\n\n/**\n * the message that will be hashed and signed by the client\n */\nexport const MESSAGE = 'plasm network btc lock'; //todo: add nonce for security\n\n/**\n * returns a blob url for the qr encoded bitcoin address\n * @param btcAddress bitcoin address\n */\nexport async function qrEncodeUri(btcAddress: string, size = 300) {\n    const qrCode = URL.createObjectURL(\n        await fetch(`https://chart.googleapis.com/chart?chs=${size}x${size}&cht=qr&chl=${btcAddress}`).then(res =>\n            res.blob(),\n        ),\n    );\n\n    return qrCode;\n}\n\n/**\n * Returns a list of transactions from the given address.\n * This data is fetched from BlockStream\n * @param address BTC address to look for\n * @param network BTC network token (mainnet or testnet)\n */\nexport async function getBtcTxsFromAddress(address: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/address/${address}/txs`;\n    const res = await (await fetch(api)).text();\n    if (res.includes('Invalid Bitcoin address')) {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    const txs: BlockStreamApi.Transaction[] = JSON.parse(res);\n    return txs;\n}\n\n/**\n * Returns the transaction information from the given transaction hash/TXID.\n * This data is fetched from BlockStream\n * @param txid transaction hash or TXID in hex string\n * @param network BTC network token (mainnet or testnet)\n */\nexport async function getBtcTxFromTxId(txid: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/tx/${txid.replace('0x', '')}`;\n    const res = await (await fetch(api)).text();\n    if (res.includes('Invalid hex string')) {\n        throw new Error('Invalid hex string');\n    }\n\n    const tx: BlockStreamApi.Transaction = JSON.parse(res);\n    return tx;\n}\n\n/**\n * returns the transaction information including the inputs and outputs from ledger node API.\n * @param txId bitcoin transaction hash\n * @param isTestnet check if looking for BTC testnet\n */\nexport async function getTransactionEndpoint(txId: string, isTestnet?: boolean) {\n    const network = isTestnet ? 'btc_testnet' : 'btc';\n    const api = `https://api.ledgerwallet.com/blockchain/v2/${network}/transactions/${txId}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('error')) {\n        throw new Error(res);\n    }\n\n    const hashEndpoint: LedgerTypes.Transaction = JSON.parse(res);\n    return hashEndpoint;\n}\n\n/**\n * returns a raw transaction in hex strings from SoChain REST API.\n * @param txId transaction ID or transaction hash\n * @param network BTC network to choose from\n */\nexport async function getTransactionHex(txId: string, network: 'BTC' | 'BTCTEST') {\n    const api = `https://sochain.com/api/v2/get_tx/${network}/${txId}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('fail')) {\n        throw new Error(res);\n    }\n\n    const txHex: SoChainApi.Transaction = JSON.parse(res);\n    return txHex.data.tx_hex;\n}\n\n/**\n * Broadcasts the given transaction hex through BlockStream REST API\n * @param txHex raw transaction in hex string\n * @param network bitcoin network to broadcast for\n */\nexport async function broadcastTransaction(txHex: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/tx`;\n    const res = await fetch(api, {\n        method: 'POST',\n        body: txHex,\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        },\n    });\n    const responseText = await res.text();\n    if (!res.ok || responseText.includes('error')) {\n        throw new Error('Failed to broadcast the transaction:\\n' + responseText);\n    }\n\n    console.log(responseText);\n    // returns a tx ID if everything went well\n    return responseText;\n}\n\n/**\n * Validates the given BTC address by checking if it's in the correct format.\n * The default network is set to mainnet, byt anything else will require you to explicitly\n * pass it as the parameter.\n * @param address Bitcoin public address\n * @param network bitcoin network type (bitcoinjs-lib)\n */\nexport function validateBtcAddress(address: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.address.toOutputScript(address, network);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * Validates the given public key hex by importing it through bitcoinjs ECPair.\n * Returns true if it's valid, and false if it's invalid\n * @param publicKey Bitcoin public key hex string\n * @param network bitcoin network to check from. Defaults to mainnet\n */\nexport function validatePublicKey(publicKey: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), { network: network });\n\n        const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network: network });\n        if (typeof address === 'string' && !validateBtcAddress(address, network)) {\n            throw new Error('Invalid public key');\n        }\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * returns the network type that the given address belongs to.\n * this will also validate the address before returning a value.\n * @param address bitcoin address\n */\nexport function getNetworkFromAddress(address: string) {\n    // sources: https://en.bitcoin.it/wiki/List_of_address_prefixes\n    // main net public key hash prefixes\n    const mainNetPref = ['1', '3', 'bc1'];\n    // test net public key hash prefixes\n    const testNetPref = ['m', 'n', 'tb1', '2'];\n    let addressNetwork: bitcoinjs.networks.Network;\n\n    if (new RegExp(`^(${mainNetPref.join('|')})`).test(address)) {\n        // check for regex match from the given address and array\n        addressNetwork = bitcoinjs.networks.bitcoin;\n        //return bitcoinjs.networks.bitcoin;\n    } else if (new RegExp(`^(${testNetPref.join('|')})`).test(address)) {\n        addressNetwork = bitcoinjs.networks.testnet;\n        //return bitcoinjs.networks.testnet;\n    } else {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    if (!validateBtcAddress(address, addressNetwork)) {\n        throw new Error('Invalid Bitcoin address');\n    }\n    return addressNetwork;\n}\n\n/**\n * converts satoshi to bitcoin\n * @param satoshi number of satoshi\n */\nexport function satoshiToBitcoin(satoshi: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshi\n    const denominator = new BigNumber(10).pow(new BigNumber(8));\n\n    if (typeof satoshi === 'string' || typeof satoshi === 'number') {\n        const _satNum = typeof satoshi === 'string' ? parseInt(satoshi) : satoshi;\n        if (isNaN(_satNum)) {\n            throw new Error('Provided value is not a number');\n        }\n        if (_satNum < 0) {\n            throw new Error('Provided value cannot be negative');\n        }\n    }\n\n    return new BigNumber(satoshi).div(denominator);\n}\n\n/**\n * converts bitcoin into satoshi\n * @param bitcoin number of bitcoin\n */\nexport function bitcoinToSatoshi(bitcoin: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshis\n    const denominator = new BigNumber('100000000');\n\n    if (typeof bitcoin === 'number' || typeof bitcoin === 'string') {\n        const _btcNum = typeof bitcoin === 'string' ? parseFloat(bitcoin) : bitcoin;\n        if (isNaN(_btcNum)) {\n            throw new Error('Provided value is not a number');\n        }\n        if (_btcNum < 0) {\n            throw new Error('Provided value cannot be negative');\n        }\n    }\n\n    return new BigNumber(bitcoin).multipliedBy(denominator).integerValue();\n}\n\n/**\n * converts an compressed public key to a uncompressed public key\n * @param publicKey compressed BTC public key\n */\nexport function decompressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: false,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * compresses the given BTC public key\n * @param publicKey uncompressed BTC public key\n * @param network bitcoin network the public key will encode for\n */\nexport function compressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: true,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * returns a compressed public key from the given address and signature.\n * this function will only work with BIP44 encoded address. BIP49 or BIP84 will return\n * an error.\n * @param address bitcoin address in base58 string\n * @param signature the signature in base64 string or buffer\n * @param msg message that was used to sign excluding the prefix in string\n * @param network bitcoin network this belongs to. If none is given, the function will guess one\n */\nexport function getPublicKey(address: string, signature: string | Buffer, msg: string, network?: bitcoinjs.Network) {\n    const _net = network ? network : getNetworkFromAddress(address);\n\n    // returns a compressed public key by default\n    const _pubKey = bitcoinjsMessage.recover(msg, address, signature);\n\n    const recoveredAddress = bitcoinjs.payments.p2pkh({\n        pubkey: Buffer.from(_pubKey, 'hex'),\n        network: _net,\n    }).address!;\n\n    if (recoveredAddress !== address) {\n        throw new Error('Could not recover public key for ' + address);\n    }\n    return _pubKey;\n}\n\n/**\n * used for CHECKSEQUENCEVERIFY relative time lock.\n * this converts days to bip68 encoded block number.\n * @param days number of days to be converted to sequence number\n */\nexport function daysToBlockSequence(days: number) {\n    // verify lock days value\n    if (!Number.isInteger(days) || !Number.isFinite(days)) {\n        throw new Error('Lock days must be a valid integer, but received: ' + days);\n    }\n    const blocksPerDay = 144; //10 min per block. day = 6 * 24\n    const blockSequence = bip68.encode({ blocks: days * blocksPerDay });\n    if (blockSequence >= 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    return blockSequence;\n}\n\n/**\n * create a bitcoin lock script buffer with the given public key.\n * this will lock the token for the given number of block sequence.\n * if the given public key is not compressed, this function will compress it.\n * @param publicKeyHex compressed BTC public key in hex string\n * @param blockSequence bip68 encoded block sequence\n * @param network bitcoin network the public key belongs to\n */\nexport function btcLockScript(publicKeyHex: string, blockSequence: number, network: bitcoinjs.Network): Buffer {\n    // verify block sequence value\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be a negative number');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (blockSequence >= 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    // verify public key by converting to an address\n    if (!validatePublicKey(publicKeyHex, network)) {\n        throw new Error('Invalid public key');\n    }\n\n    const pubKeyBuffer = Buffer.from(compressPubKey(publicKeyHex, network), 'hex');\n\n    return bitcoinjs.script.fromASM(\n        `\n        ${bitcoinjs.script.number.encode(blockSequence).toString('hex')}\n        OP_CHECKSEQUENCEVERIFY\n        OP_DROP\n        ${pubKeyBuffer.toString('hex')}\n        OP_CHECKSIG\n        `\n            .trim()\n            .replace(/\\s+/g, ' '),\n    );\n}\n\n/**\n * creates a P2SH instance that locks the sent token for the given duration.\n * the locked tokens can only be claimed by the provided public key\n * @param lockDays the lock duration in days\n * @param publicKey public key of the locker. This can be both compressed or uncompressed\n * @param network bitcoin network the script will generate for\n */\nexport function getLockP2SH(lockDays: number, publicKey: string, network: bitcoinjs.Network) {\n    // only check lock duration boundaries for main net\n    if (network === bitcoinjs.networks.bitcoin) {\n        if (lockDays > 300 || lockDays < 30) {\n            throw new Error('Lock duration must be between 30 days to 300 days');\n        }\n    }\n\n    return bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDays), network),\n        },\n    });\n}\n\n/**\n * creates a lock redeem UTXO\n * @param signer the signer for signing the transaction hash\n * @param network network type (bitcoinjs-lib)\n * @param lockTx the transaction that locks the value to P2SH address\n * @param lockScript the lock script (P2SH)\n * @param blockSequence block sequence to lock the funds, should be the same value used in the lock script\n * @param recipient recipient for the transaction output\n * @param fee transaction fee for the lock transaction\n */\nexport async function btcUnlockTx(\n    signer: HwSigner,\n    network: Network,\n    lockTx: bitcoinjs.Transaction,\n    lockScript: Buffer,\n    blockSequence: number,\n    recipientAddress: string,\n    fee: number, // satoshis\n) {\n    function idToHash(txid: string): Buffer {\n        return Buffer.from(txid, 'hex').reverse();\n    }\n    function toOutputScript(address: string): Buffer {\n        return bitcoinjs.address.toOutputScript(address, network);\n    }\n\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be less than zeo');\n    }\n    if (fee < 0) {\n        throw new Error('Transaction fee cannot be less than zero');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (!Number.isInteger(fee) || !Number.isFinite(fee)) {\n        throw new Error('Fee must be a valid integer, but received: ' + fee);\n    }\n    const txIndex = 0;\n    if (lockTx.outs[txIndex].value - fee < 0) {\n        throw new Error(`Transaction fee cannot be larger than ${lockTx.outs[txIndex].value} Satoshi`);\n    }\n\n    //const sequence = bip68.encode({ blocks: lockBlocks });\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(idToHash(lockTx.getId()), txIndex, blockSequence);\n    tx.addOutput(toOutputScript(recipientAddress), lockTx.outs[txIndex].value - fee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType);\n    const signature = bitcoinjs.script.signature.encode(await signer.sign(signatureHash), hashType);\n\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network,\n        redeem: {\n            network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n    if (redeemScriptSig instanceof Buffer) {\n        tx.setInputScript(0, redeemScriptSig);\n    } else {\n        throw new Error('Transaction is invalid');\n    }\n\n    return tx;\n}\n\n/**\n * create a unsigned unlock transaction. This function will return a signature hash for the transaction that the user will sign,\n * the unsigned transaction instance and the lock P2SH payment instance that this will be unlocking for.\n * @param lockTransaction the lock UTXO that is already in the blockchain\n * @param publicKey public key of the user in string hex (compression is done within the function)\n * @param lockDuration script token locking duration in days (converted to relative block sequence within the function)\n * @param network the bitcoin network the transaction is for\n * @param txFee the transaction fee for the UTXO in Satoshi\n */\nexport function unsignedUnlockTx(\n    lockTransaction: BlockStreamApi.Transaction,\n    publicKey: string,\n    lockDuration: number,\n    network: bitcoinjs.Network,\n    txFee: number,\n) {\n    const lockP2sh = getLockP2SH(lockDuration, publicKey, network);\n    const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network });\n\n    if (typeof address === 'undefined') {\n        throw new Error('could not get P2PKH address from the given public key');\n    }\n\n    const lockVout = lockTransaction.vout.find(locked => locked.scriptpubkey_address === lockP2sh.address!);\n\n    if (typeof lockVout === 'undefined') {\n        throw new Error('Invalid public key provided');\n    }\n\n    if (lockVout.value - txFee < 0) {\n        throw new Error(`Transaction fee cannot be larger than ${lockVout.value} Satoshi`);\n    }\n    if (txFee <= 0) {\n        throw new Error('Transaction fee cannot be 0 or less');\n    }\n\n    const lockScript = btcLockScript(publicKey, daysToBlockSequence(lockDuration), network);\n    const sequence = 0;\n    const output = bitcoinjs.address.toOutputScript(address, network);\n\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(Buffer.from(lockTransaction.txid, 'hex').reverse(), 0, sequence);\n    tx.addOutput(output, lockVout.value - txFee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType).toString('hex');\n\n    return {\n        signatureHash,\n        unsignedUnlockTx: tx,\n        lockP2sh,\n    };\n}\n\n/**\n * Signs the given transaction and returns it as a raw transaction hex that is ready for being broadcasted.\n * The signature should be provided by the user.\n * @param unsignedTx transaction instance that isn't signed\n * @param userUnlockSig signature for the transaction signed by the sender's wallet\n * @param lockScript the lock script used for the lock transaction\n * @param network bitcoin network the transaction will be propagating for\n */\nexport function signTransactionRaw(\n    unsignedTx: bitcoinjs.Transaction,\n    userUnlockSig: string,\n    lockScript: Buffer,\n    network: bitcoinjs.Network,\n) {\n    if (userUnlockSig === '') {\n        throw new Error('Please paste the unlock signature');\n    }\n    const rawSignature = Buffer.from(userUnlockSig.replace(' ', ''), 'hex');\n\n    const signature = bitcoinjs.script.signature.encode(rawSignature, bitcoinjs.Transaction.SIGHASH_ALL);\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            network: network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n\n    unsignedTx.setInputScript(0, redeemScriptSig!);\n\n    const signedTxHex = unsignedTx.toHex();\n\n    return signedTxHex;\n}\n\n/**\n * creates a lockdrop parameter from the given lock script address and values\n * by fetching all transactions in the lock script address from block stream\n * @param scriptAddress the P2SH lock address\n * @param lockDuration duration of the lock in days\n * @param publicKey compressed BTC public key of the locker\n * @param network bitcoin network\n */\nexport async function getLockParameter(\n    scriptAddress: string,\n    lockDurationDays: number,\n    publicKey: string,\n    network: 'mainnet' | 'testnet',\n) {\n    const btcNetwork = network === 'mainnet' ? bitcoinjs.networks.bitcoin : bitcoinjs.networks.testnet;\n    const p2sh = bitcoinjs.payments.p2sh({\n        network: btcNetwork,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDurationDays), btcNetwork),\n        },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    if (p2sh.address && p2sh.address !== scriptAddress) {\n        throw new Error('Lock script information does not match P2SH');\n    }\n\n    if (!validatePublicKey(publicKey, btcNetwork)) {\n        throw new Error('Invalid Public Key');\n    }\n\n    if (lockDurationDays < 0 || !Number.isInteger(lockDurationDays)) {\n        throw new Error('Invalid lock duration');\n    }\n\n    const locks = await getBtcTxsFromAddress(scriptAddress, network);\n    const daysToEpoch = 60 * 60 * 24 * lockDurationDays;\n\n    const lockParams = locks.map(i => {\n        const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n\n        if (typeof lockVal === 'undefined') {\n            throw new Error('Cannot find lock transaction for ' + scriptAddress);\n        }\n\n        return plasmUtils.createLockParam(\n            LockdropType.Bitcoin,\n            '0x' + i.txid,\n            '0x' + publicKey,\n            daysToEpoch.toString(),\n            lockVal.value.toString(),\n        );\n    });\n\n    return lockParams;\n}\n\n/**\n * Creates a signer instance for signing transactions made with bitcoinjs-lib\n * from Ledger BTC App.\n * @param ledgerApi\n * @param path HD address path\n * @param network bitcoin network the transaction will belong\n * @param lockTxHex raw lock UTXO in hex string\n * @param lockScript lock script used to generate the P2SH\n * @param publicKey compressed public key in string format\n */\nexport const generateSigner = async (\n    ledgerApi: AppBtc,\n    path: string,\n    network: bitcoinjs.Network,\n    lockTxHex: string,\n    lockScript: bitcoinjs.payments.Payment,\n    publicKey: string,\n) => {\n    const isSegWit = bitcoinjs.Transaction.fromHex(lockTxHex).hasWitnesses();\n    const ledgerTx = ledgerApi.splitTransaction(lockTxHex, isSegWit);\n    const txIndex = 0; //temp value\n\n    return {\n        network,\n        publicKey: Buffer.from(publicKey, 'hex'),\n\n        sign: async (hash: Buffer, lowR?: boolean) => {\n            console.log('signing with ledger\\n' + hash.toString('hex'));\n\n            const ledgerTxSignatures = await ledgerApi.signP2SHTransaction({\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                inputs: [[ledgerTx, txIndex, lockScript.redeem!.output!.toString('hex'), null]],\n                associatedKeysets: [path],\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                outputScriptHex: lockScript.output!.toString('hex'),\n                segwit: isSegWit,\n                transactionVersion: 2,\n                sigHashType: bitcoinjs.Transaction.SIGHASH_ALL,\n            });\n\n            console.log(ledgerTxSignatures);\n            console.log(hash.toString('hex') + lowR);\n            const [ledgerSignature] = ledgerTxSignatures;\n            const encodedSignature = (() => {\n                if (isSegWit) {\n                    return Buffer.from(ledgerSignature, 'hex');\n                }\n                return Buffer.concat([\n                    Buffer.from(ledgerSignature, 'hex'),\n                    Buffer.from('01', 'hex'), // SIGHASH_ALL\n                ]);\n            })();\n            const decoded = bitcoinjs.script.signature.decode(encodedSignature);\n            return decoded.signature;\n        },\n    } as HwSigner;\n};\n"],"sourceRoot":""}