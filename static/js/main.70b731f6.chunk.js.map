{"version":3,"sources":["logo.png","drizzleOptions.js","LockdropForm.js","LockList.js","LockdropContainer.js","LockdropComponent.js","middleware/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","options","web3","block","fallback","type","url","contracts","events","Lockdrop","polls","accounts","LockdropForm","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","bind","assertThisInitialized","handleSubmit","contract","drizzle","utils","state","form-days","form-value","event","wei","Math","pow","days","methods","lock","cacheSend","value","setState","defineProperty","target","name","console","log","react_default","a","createElement","Component","contextTypes","PropTypes","object","drizzleConnect","LockList","getPastEvents","fromBlock","then","map","e","eth","getTransaction","transactionHash","Promise","all","resolve","returnValues","locks","filter","Contract","abi","address","_this2","Table","striped","bordered","hover","i","link","fromWei","duration","href","arrayOf","string","accountIndex","number","isRequired","LockdropContainer","Container","lib","Image","src","logo","width","Tabs","defaultActiveKey","id","Tab","eventKey","title","src_LockdropForm","src_LockList","drizzleStatus","appMiddlewares","store","next","action","EventActions","EVENT_FIRED","contractEvent","message","_message","display","concat","toast","success","position","POSITION","TOP_RIGHT","generateStore","drizzleOptions","disableReduxDevTools","App","drizzle_react","drizzle_react_components","src_LockdropContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70b731f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.eaa7a31a.png\";","import Lockdrop from \"./contracts/Lockdrop.json\";\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545\",\n    },\n  },\n  contracts: [Lockdrop],\n  events: {\n    Lockdrop: [\"Locked\"],\n  },\n  polls: {\n    // set polling interval to 30secs so we don't get buried in poll events\n    accounts: 30000,\n  },\n};\n\nexport default options;\n","import React, { Component } from 'react';\nimport { drizzleConnect } from 'drizzle-react'\nimport PropTypes from \"prop-types\";\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\n\nclass LockdropForm extends Component {\n    constructor(props, context) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.contract = context.drizzle.contracts.Lockdrop;\n        this.utils = context.drizzle.web3.utils;\n\n        this.state = {\n            'form-days': 1,\n            'form-value': 0.42,\n        };\n    }\n\n    handleSubmit(event) {\n        let wei = this.state['form-value'] * 10**18;\n        let days = this.state['form-days'];\n        this.contract.methods.lock.cacheSend(days, {value: wei});\n    }\n\n    handleInputChange(event) {\n        this.setState({ [event.target.name]: event.target.value });\n        console.log(event.target.name);\n        console.log(event.target.value);\n    }\n\n    render() {\n        return (<center><em>Testnet lockdrop finished 20th december</em></center>);\n        return (<Form>\n            <Form.Group controlId='LockValue'>\n                <Form.Label>How much</Form.Label>\n                <InputGroup>\n                    <Form.Control type='number' name='form-value' placeholder='0,42' required onChange={this.handleInputChange}/>\n                    <InputGroup.Append>\n                        <InputGroup.Text id='eth-addon'>ETH</InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form.Text className='text-muted'>\n                    ETH will be locked on simple separated contract (<a href='https://ropsten.etherscan.io/address/0x89AbD163b178C6375dfE9F37e77dFAB53967Af20#code'>source code</a>).<br/><em>Inspired by <a href=\"https://edgewa.re/lockdrop/\">Edgeware lockdrop</a> initiative.</em> \n                </Form.Text>\n            </Form.Group>\n            <Form.Group controlId='DurationSelect'>\n                <Form.Label>How long</Form.Label>\n                <InputGroup>\n                    <Form.Control as='select' name='form-days' required onChange={this.handleInputChange}>\n                        <option>1</option>\n                        <option>3</option>\n                        <option>7</option>\n                    </Form.Control>\n                    <InputGroup.Append>\n                        <InputGroup.Text id='days-addon'>days</InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form.Text className='text-muted'>\n                    Your asset will be released after days spended.\n                </Form.Text>\n            </Form.Group>\n            <Button variant='primary' type='button' onClick={this.handleSubmit}>\n                Send\n            </Button>\n        </Form>)\n    }\n}\n\nLockdropForm.contextTypes = {\n    drizzle: PropTypes.object,\n};\n\nconst mapStateToProps = state => {\n    return {\n        Lockdrop: state.contracts.Lockdrop,\n    };\n};\n\nexport default drizzleConnect(LockdropForm, mapStateToProps);\n","import React, { Component, useState } from 'react';\nimport { drizzleConnect } from 'drizzle-react'\nimport PropTypes from \"prop-types\";\n\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\n\nclass LockList extends Component {\n    constructor(props, context) {\n        super(props);\n\n        this.web3 = context.drizzle.web3;\n        this.contract = context.drizzle.contracts.Lockdrop;\n        const accounts = props.accounts;\n\n        this.getPastEvents({fromBlock: 6958002}).then(events => events.map(e => this.web3.eth.getTransaction(e.transactionHash).then(console.log)));\n        this.getPastEvents({fromBlock: 6958002})\n            .then(events => Promise.all(\n                events.map(e => Promise.all(\n                    [Promise.resolve(e.returnValues), this.web3.eth.getTransaction(e.transactionHash)]\n                ))\n            ))\n            .then(events => this.setState({locks:\n                events.filter(e => e[1]['from'] == accounts[0]).map(e => e[0])\n            }));\n        this.state = {locks: []};\n    }\n\n    getPastEvents(options: any) {\n        const yourContractWeb3 = new this.web3.eth.Contract(this.contract.abi, this.contract.address);\n        return yourContractWeb3.getPastEvents('Locked', options);\n    }\n\n    render() {\n        return (\n            <Table striped bordered hover>\n            <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Amount, ETH</th>\n                  <th>Duration, days</th>\n                  <th>Lock Contract</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.locks.map((a, i) => {\n                  const link = \"https://ropsten.etherscan.io/address/\" + a.lock; \n                  return (<tr>\n                    <td>{i}</td>\n                    <td>{this.web3.utils.fromWei(a.eth, 'ether')}</td>\n                    <td>{a.duration}</td>\n                    <td><a href={link}>{a.lock}</a></td>\n                  </tr>)\n                })}\n              </tbody>\n            </Table>\n        )\n    }\n}\n\nLockList.contextTypes = {\n    drizzle: PropTypes.object,\n    accounts: PropTypes.arrayOf(PropTypes.string),\n    accountIndex: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = state => {\n    return {\n        Lockdrop: state.contracts.Lockdrop,\n        accounts: state.accounts,\n    };\n};\n\nexport default drizzleConnect(LockList, mapStateToProps);\n","import LockdropComponent from './LockdropComponent'\nimport { drizzleConnect } from 'drizzle-react'\n\nconst mapStateToProps = state => ({\n  accounts: state.accounts,\n  drizzleStatus: state.drizzleStatus\n})\n\nconst LockdropContainer = drizzleConnect(\n  LockdropComponent,\n  mapStateToProps\n)\n\nexport default LockdropContainer \n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport logo from './logo.png';\n\nimport LockdropForm from './LockdropForm';\nimport LockList from './LockList';\n\nexport default (props) => (\n    <Container>\n        <ToastContainer />\n        <Image src={logo} width=\"50%\"  />\n        <Tabs defaultActiveKey=\"send\" id=\"lockdrop-tabs\">\n            <Tab eventKey=\"send\" title=\"Send\">\n                <LockdropForm />\n            </Tab>\n            <Tab eventKey=\"locks\" title=\"My locks\">\n                <LockList />\n            </Tab>\n        </Tabs>\n    </Container>\n)\n","import { toast } from 'react-toastify'\nimport { generateStore, EventActions } from 'drizzle'\nimport drizzleOptions from '../drizzleOptions'\n\nconst contractEventNotifier = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const contract = action.name\n    const contractEvent = action.event.event\n    const message = action.event.returnValues._message\n    const display = `${contract}(${contractEvent}): ${message}`\n\n    toast.success(display, { position: toast.POSITION.TOP_RIGHT })\n  }\n  return next(action)\n}\n\n\nconst appMiddlewares = [ contractEventNotifier ]\n\nconst store = generateStore({\n  drizzleOptions,\n  appMiddlewares,\n  disableReduxDevTools: false  // enable ReduxDevTools!\n})\n\n// Use the store with DrizzleProvider\nexport default store\n","import React, { Component } from \"react\";\nimport { DrizzleProvider } from \"drizzle-react\";\nimport { LoadingContainer } from \"drizzle-react-components\";\n\nimport \"./App.css\";\n\nimport drizzleOptions from \"./drizzleOptions\";\nimport LockdropContainer from \"./LockdropContainer\";\nimport store from './middleware'\n\nclass App extends Component {\n  render() {\n    return (\n      <DrizzleProvider store={store} options={drizzleOptions}>\n        <LoadingContainer>\n          <LockdropContainer />\n        </LoadingContainer>\n      </DrizzleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}