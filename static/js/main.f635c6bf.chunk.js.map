{"version":3,"sources":["resources/plasm-logo.png","resources/ld_logo_a.png","resources/ld_logo_b.png","resources/plasm-icon.svg","resources/dusty-icon.svg","resources/home-outline.svg","resources/logo-twitter.svg","resources/logo-discord.svg","resources/logo-telegram.svg","resources/logo-github.svg","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm/legacy lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","resources/ethereum_logo.svg","components/Navbar.tsx","data/links.ts","theme/themes.ts","components/Footer.tsx","components/SectionCard.tsx","data/lockInfo.ts","pages/LandingPage.tsx","components/DropdownOption.tsx","components/EthLock/LockdropForm.tsx","helpers/getWeb3.ts","data/affiliationProgram.ts","types/PlasmDrop.ts","helpers/lockdrop/EthereumLockdrop.ts","components/EthLock/CurrentLocks.tsx","components/EthLock/EthGlobalLocks.tsx","components/EthLock/LockedEthList.tsx","components/EthLock/LockdropCountdownPanel.tsx","components/EthLock/LockdropResult.tsx","components/EthLock/AffiliationList.tsx","pages/EthLockdropPage.tsx","components/ClaimStatus.tsx","pages/DustyEthLockPage.tsx","components/CountdownTimer.tsx","components/BtcLock/LockStatus.tsx","components/CopyMessageBox.tsx","components/BtcLock/QrEncodedAddress.tsx","components/BtcLock/BtcRawSignature.tsx","components/BtcLock/TrezorLock.tsx","components/BtcLock/LedgerLock.tsx","pages/DustyBtcLockPage.tsx","components/SideMenu.tsx","App.tsx","serviceWorker.ts","index.tsx","resources/bitcoin_logo.svg","helpers/lockdrop/BitcoinLockdrop.ts","resources/quantstamp-logo.png","helpers/plasmUtils.ts","types/LockdropModels.ts"],"names":["module","exports","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","useStyles","makeStyles","theme","createStyles","grow","flexGrow","navbar","backgroundColor","logoIcon","margin","spacing","maxHeight","height","verticalAlign","title","color","inputRoot","sectionDesktop","display","breakpoints","up","sectionMobile","listItem","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Navbar","classes","className","slot","src","plasmLogo","alt","Links","Community","description","link","icon","Company","Products","Collaboration","Blogs","ThemeColors","Copyright","Typography","variant","Date","getFullYear","Link","href","rel","target","root","marginTop","socialIcon","paddingLeft","footer","padding","footerHeader","siteMap","StickyFooter","Container","maxWidth","Grid","container","justify","item","component","align","Divider","List","company","key","ListItem","button","ListItemText","primary","product","collaboration","blog","community","SectionCard","children","paper","Paper","elevation","firstLockdropStart","moment","utc","firstLockdropEnd","secondLockdropStart","secondLockdropEnd","lockdropContracts","firstLock","main","ropsten","private","Lockdrop","networks","address","secondLock","thirdLock","ethDurations","label","value","rate","ethDustyDurations","btcDurations","btcDustyDurations","uri","ethLogo","startDate","endDate","disabled","btcLogo","dustyLock","lockdropLogo","Math","floor","random","lockdropLogoA","lockdropLogoB","logoImg","marginLeft","marginRight","LandingPage","fill","routerLink","format","toString","DropdownOption","props","items","dataSets","x","indexOf","interface","onIonChange","onChoose","LockdropForm","token","onSubmit","dusty","useState","BN","lockAmount","setAmount","lockDuration","setDuration","affAccount","setAff","formRoot","txButton","formLabel","quantLogo","textBox","quantstampLogo","parse","position","placeholder","onIonInput","filter","i","expand","onClick","inputs","duration","amount","affiliation","handleSubmit","web3Listener","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","removeWeb3Event","reject","removeEventListener","error","getWeb3","document","readyState","location","reload","addEventListener","defaultAddress","validEthAddressList","validBtcAddressList","isValidIntroducerAddress","introducer","includes","toLowerCase","PlmDrop","receiver","basePlm","introducerAndBonuses","affiliationRefsBonuses","locks","this","totalIntroBonuses","BigNumber","length","plus","affBonus","calculateAffBonus","toFixed","getTotal","toFormat","calculateIntroBonus","reduce","sum","bonus","totalAmountOfPLMsForLockdrop","times","div","getPubKey","message","msg","hash","eth","accounts","hashMessage","getAccounts","addresses","personal","sign","slice","sig","res","fromRpcSig","publicKey","bufferToHex","ecrecover","toBuffer","v","r","s","compressedPubKey","EthCrypto","compress","replace","getAllLockEvents","instance","getPastEvents","fromBlock","ev","all","returnValues","getTransaction","transactionHash","eventHashes","blockHash","lockEvent","getBlock","blockNumber","transactionString","time","timestamp","lock","blockNo","lockOwner","from","defaultAffiliation","aff","plmBaseIssueRatio","lockData","ethExchangeRate","bonusRate","lockDurationToRate","Web3Utils","fromWei","totalPlmBaseIssuingRate","allLocks","plmBaseIssueAmountInLock","totalPlmsRate","currentIssue","calculateTotalPlm","receivingPlm","currentAddressLocks","totalPlmRate","issuingPlm","push","allRefs","results","refEvents","getAllAffReferences","getTotalLockVal","totalVal","currentEth","connectWeb3","lockSeason","lockdropAbi","abi","net","getNetworkType","networkType","contractAddress","lockInfo","Contract","contract","getContractEndDate","methods","LOCK_END_TIME","call","_lockdropEndDate","getContractStartDate","LOCK_START_TIME","_lockdropStartDate","submitLockTx","txInput","utils","isAddress","amountToSend","toWei","send","on","listRoot","palette","background","overflow","listSection","ul","lockListPage","textAlign","tabMenu","itemButtons","alignContent","UnlockInfo","getUnlockDate","useCallback","Number","calculateTimeLeft","tillEnd","now","days","hours","minutes","seconds","canUnlock","setLockState","tillUnlock","setUnlockDate","unlocked","setUnlockState","isLoading","setLoading","checkUnlock","today","lockedDay","unlockDate","getBalance","lockBalance","useEffect","interval","setInterval","clearInterval","alignItems","xs","LinearProgress","ListItemSecondaryAction","Tooltip","aria-label","IconButton","edge","sendTransaction","to","catch","finally","err","CurrentLocks","lockEvents","setEvents","isLoadingComp","setLoadState","CircularProgress","subheader","ListSubheader","eventItem","GlobalLocks","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","LockState","LockedEthList","useTheme","React","setValue","AppBar","Tabs","onChange","_event","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","LockdropCountdownPanel","startTime","endTime","tillStart","valueOf","difference","diff","timeLeft","getLockState","notStart","start","end","setTimeLeft","lockState","totalLockVal","setTotalLockVal","getLockValue","_totalLockVal","PanelWrapper","LockdropResult","pageContent","header","claimButton","totalPlm","setTotalPlm","exRate","setExRate","showIntoRefPopover","setShowIntroRefPopover","showIntoPopover","setShowIntroPopover","totalIssue","countupTotalPlmVal","getTotalPlm","toNumber","decimals","separator","getAffBonus","isOpen","onDidDismiss","data","getIntroBonus","IntoRefItems","IntoAffItems","ClaimPlm","paddingTop","addressPanel","nested","plmAddress","setPlmAddress","ethPubkey","setEthPubkey","open","setOpen","getPlasmAddress","pubKey","result","generatePlmAddress","size","ListItemIcon","Collapse","in","timeout","unmountOnExit","IntroducerBonusesItems","lockResult","AffiliationList","lockdropResult","setLockdropResult","sort","b","getAffiliationResults","toast","configure","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","hasFirstLockdropEnded","EthLockdropPage","timerInterval","componentDidMount","web3State","setState","handleAccountChange","state","getLockData","componentWillUnmount","isMainnet","allLockEvents","formInputVal","isProcessing","success","fetchingLockData","hasFirstLockdropStarted","Component","inline","iconProgress","green","top","left","zIndex","emptyPanel","justifyContent","claimVoteIcon","ClaimStatus","claimParams","plasmApi","plasmNetwork","plasmAddr","useMemo","plasmUtils","positiveVotes","setPositiveVotes","voteThreshold","setVoteThreshold","isLoadingBal","setLoadingBal","isLoadingClaims","setLoadingClaims","balance","setBalance","claims","setClaims","fetchLockData","claimIds","c","type","toHex","lockdropStates","claimRes","_bal","formatBal","parseFloat","toLocaleString","_voteReq","lockParam","claimData","ClaimItem","claimId","sendingRequest","setSendingRequest","claimingLock","setClaimingLock","approveList","setApproveList","declineList","setDeclineList","showApproves","setShowApproves","showDeclines","setShowDeclines","hasAllVotes","reqAccepted","_claim","approves","approve","toJSON","decline","setVoteList","complete","epoch","str","num","ActionIcon","undefined","authority","Icon","plasmIcon","dustyIcon","btcLockdrop","Badge","badgeContent","showZero","max","anchorOrigin","vertical","horizontal","param","_lock","_nonce","submitClaimReq","DustyEthLockPage","Dusty","plasmNode","_end","_start","lockdropEnd","lockdropStart","_allLocks","_lockParam","getClaimParams","lockParams","setPublicKey","polkadotUtil","pub","_param","LockdropType","Ethereum","durationToEpoch","_publicKey","unix","parseInt","CountdownTimer","onFinish","handleCountdownFinish","didFinish","_timeLeft","LockStatus","onUnlock","scriptAddress","lockDurationDay","lockedValue","setLockedValue","showModal","setShowModal","setCanUnlock","getLockBal","_lockVout","vout","find","locked","scriptpubkey_address","totalBal","forEach","txid","status","confirmed","block_height","block_time","add","u","name","messageBox","signMessage","wordBreak","copyIcon","CopyMessageBox","componentType","isCode","showCopyToast","setCopyToast","navigator","clipboard","writeText","qrImage","boxSizing","alignSelf","objectFit","imageSkeleton","chipGrid","statusChip","right","QrEncodedAddress","imageUri","setUri","imageLoaded","setImageLoad","qrEncodeUri","img","style","onLoad","animated","sm","BtcRawSignature","networkLockDur","bitcoinjs","bitcoin","sigInput","setSig","addressInput","setAddress","p2shAddress","setP2sh","allLockParams","setAllLockParams","currentScriptLocks","setCurrentScriptLocks","loadState","lockUtxo","setLockUtxo","unlockTxBuilder","setUnlockTxBuilder","userUnlockSig","setUserUnlockSig","unlockUtxoHex","setUnlockUtxoHex","unlockFee","setUnlockFee","sigNonce","polkadotCrypto","isValidFee","fee","lockTx","isNaN","val","RegExp","test","lockP2sh","btcLock","_fee","lockVout","sigHash","unsigned","unsignedUnlockTx","signatureHash","getUnlockUtxo","lockScript","signedUnlockUtxo","_net","unlockTxId","cleanUnlockTxState","fetchLockdropParams","blockStreamNet","_lockParams","dur","scriptAddr","daysToEpoch","lockVal","Bitcoin","currentParam","detail","_inputFee","_msg","bitcoinjsMessage","p2sh","TrezorLock","defaultPath","addressPath","setAddressPath","inputValidation","valid","TrezorConnect","path","coin","payload","_pubKey","signature","createLockAddress","signLockdropClaims","LedgerLock","btcApi","setBtcApi","ledgerApiInstance","TransportWebUSB","create","ts","btc","AppBtc","TransportU2F","viewClaims","getWalletPublicKey","wallet","unlockScriptTx","redeem","rawTxHex","isSegWit","fromHex","hasWitnesses","utxo","splitTransaction","createPaymentTransactionNew","output","associatedKeysets","outputScriptHex","segwit","sigHashType","SIGHASH_ALL","lockTime","useTrustedInputForSegwit","newTx","ledgerSigner","randomPublicKey","makeRandom","network","compressed","randomAddress","p2pkh","pubkey","unlockTx","signedTxHex","DustyBtcLockPage","BtcWalletType","None","walletType","setWalletType","setPlasmApi","panelWallet","ChangeSignView","Raw","testnet","Trezor","Ledger","warning","MenuSection","headerText","menuItems","SideMenu","contentId","homeIcon","discord","telegram","twitter","github","App","when","exact","render","Boolean","hostname","match","createMuiTheme","fontFamily","join","light","dark","ReactDOM","getElementById","serviceWorker","ready","registration","unregister","MESSAGE","btcAddress","URL","fetch","blob","qrCode","createObjectURL","getBtcTxsFromAddress","api","text","txs","JSON","getTransactionHex","txId","txHex","tx_hex","broadcastTransaction","method","body","headers","responseText","ok","validateBtcAddress","toOutputScript","validatePublicKey","fromPublicKey","Buffer","satoshiToBitcoin","satoshi","denominator","pow","_satNum","getPublicKey","addressNetwork","getNetworkFromAddress","daysToBlockSequence","isInteger","isFinite","blockSequence","bip68","encode","blocks","btcLockScript","publicKeyHex","pubKeyBuffer","compressPubKey","fromASM","number","trim","getLockP2SH","lockDays","btcUnlockTx","signer","recipientAddress","idToHash","reverse","txIndex","outs","tx","version","addInput","getId","addOutput","hashType","hashForSignature","redeemScriptSig","input","compile","setInputScript","lockTransaction","txFee","signTransactionRaw","unsignedTx","rawSignature","generateSigner","ledgerApi","lockTxHex","ledgerTx","lowR","signP2SHTransaction","transactionVersion","ledgerTxSignatures","ledgerSignature","encodedSignature","concat","decoded","decode","PlasmNetwork","femtoToPlm","femto","isLessThanOrEqualTo","plmDenominator","dividedBy","plasmTypeReg","TypeRegistry","createPlasmInstance","endpoint","types","values","plasmDefinitions","Local","Main","wsProvider","WsProvider","ApiPromise","Address","Keys","StakingLedger","Votes","ReferendumInfo","typesAlias","voting","Tally","createLockParam","Struct","u8","U8aFixed","u64","u128","sendLockClaimRequest","nonce","plasmLockdrop","claimRequestTx","request","toU8a","txHash","plasmPubKey","hexString","substr","Uint8Array","toByteArray","getAddressBalance","plasmAddress","asPlm","query","system","account","free","getLockdropVoteRequirements","_voteThreshold","_positiveVotes","sendLockdropClaim","claim","getClaimStatus","params","get","entries","structToLockdrop","lockdropParam","claimPowNonce","u8aConcat","LockSeason"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,wC,qBCA3CD,EAAOC,QAAU,IAA0B,uC,qBCA3CD,EAAOC,QAAU,IAA0B,uC,qBCA3CD,EAAOC,QAAU,IAA0B,wC,qBCA3CD,EAAOC,QAAU,IAA0B,wC,qBCA3CD,EAAOC,QAAU,IAA0B,0C,qBCA3CD,EAAOC,QAAU,IAA0B,0C,qBCA3CD,EAAOC,QAAU,IAA0B,0C,qBCA3CD,EAAOC,QAAU,IAA0B,2C,qBCA3CD,EAAOC,QAAU,IAA0B,yC,oFCA3C,IAAIC,EAAM,CACT,2CAA4C,CAC3C,KACA,IAED,kCAAmC,CAClC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,iCAAkC,CACjC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,uBAAwB,CACvB,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,qBAAsB,CACrB,KACA,IAED,uCAAwC,CACvC,KACA,IAED,sCAAuC,CACtC,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,mCAAoC,CACnC,KACA,IAED,kCAAmC,CAClC,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,uBAAwB,CACvB,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,kCAAmC,CAClC,KACA,IAED,iCAAkC,CACjC,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,iCAAkC,CACjC,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,yBAA0B,CACzB,KACA,IAED,gCAAiC,CAChC,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,+BAAgC,CAC/B,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,uBAAwB,CACvB,KACA,IAED,sBAAuB,CACtB,KACA,IAED,8BAA+B,CAC9B,KACA,IAED,6BAA8B,CAC7B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,0BAA2B,CAC1B,KACA,IAED,4BAA6B,CAC5B,KACA,IAED,2BAA4B,CAC3B,KACA,IAED,gCAAiC,CAChC,KACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,KACzBd,EAAOC,QAAUE,G,qBC5UjB,IAAID,EAAM,CACT,sBAAuB,CACtB,KACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,KACzBd,EAAOC,QAAUE,G,maCxBjBH,EAAOC,QAAU,IAA0B,2C,2QCKrCgB,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,OAAQ,CACJC,gBAAiB,SAErBC,SAAU,CACNC,OAAQP,EAAMQ,QAAQ,GACtBC,UAAW,GACXC,OAAQ,OACRC,cAAe,UAEnBC,MAAO,CACHC,MAAO,SAEXC,UAAW,CACPD,MAAO,WAEXE,eAAe,aACXC,QAAS,QACRhB,EAAMiB,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,SAGjBG,cAAc,aACVH,QAAS,QACRhB,EAAMiB,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,SAGjBI,SAAU,CACNC,MAAO,QAEXC,QAAS,CACLC,SAAUvB,EAAMwB,WAAWC,QAAQ,IACnCC,WAAY1B,EAAMwB,WAAWG,wBAK1B,SAASC,IACpB,IAAMC,EAAU/B,IAEhB,OACI,oCACI,kBAAC,IAAD,CAAWgC,UAAWD,EAAQzB,QAC1B,kBAAC,IAAD,CAAYS,MAAM,SACd,kBAAC,IAAD,CAAYkB,KAAK,SACb,kBAAC,IAAD,CAAeD,UAAWD,EAAQjB,QAClC,yBAAKkB,UAAWD,EAAQvB,SAAU0B,IAAKC,IAAWC,IAAI,MAE1D,kBAAC,IAAD,CAAUJ,UAAWD,EAAQjB,OAA7B,oB,yEC1DPuB,EAEH,wCAFGA,EAGA,oCAHAA,EAID,6CAJCA,EAKC,6BALDA,EAMA,wCAyCAC,EAAY,CACrB,CACIC,YAAa,UACbC,KAAMH,EACNI,KAAM,WAEV,CACIF,YAAa,WACbC,KAAMH,EACNI,KAAM,aAIDC,EAAU,CACnB,CACIH,YAAa,OACbC,KAvDE,wBAyDN,CACID,YAAa,aACbC,KAAK,UAAD,OA5DD,sBAgEEG,EAAW,CACpB,CACIJ,YAAa,QACbC,KAAM,8CAEV,CACID,YAAa,qBACbC,KAAM,6CAEV,CACID,YAAa,iBACbC,KAAM,oDAEV,CACID,YAAa,uBACbC,KAAM,kDAEV,CACID,YAAa,iBACbC,KAAM,qDAIDI,EAAgB,CACzB,CACIL,YAAa,6BACbC,KAAM,+BAEV,CACID,YAAa,iCACbC,KAAM,6BAIDK,EAAQ,CACjB,CACIN,YAAa,SACbC,KAAMH,I,UC5GDS,EAGF,UAHEA,EAKC,UALDA,EAQH,UCKV,SAASC,IACL,OACI,oCACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SACf,cAAY,IAAIC,MAAOC,cAAgB,IACxC,kBAACC,EAAA,EAAD,CAAMrC,MAAM,UAAUsC,KAAK,uBAAuBC,IAAI,sBAAsBC,OAAO,UAAnF,4BAEQ,IACP,yBAMjB,IAAMvD,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCsD,KAAM,CACFC,UAAWvD,EAAMQ,QAAQ,KAE7BgD,WAAY,CACR3C,MAAO,QACPU,SAAU,GACVkC,YAAazD,EAAMQ,QAAQ,IAE/BkD,OAAQ,CACJC,QAAS3D,EAAMQ,QAAQ,GACvBH,gBAAiB,QACjBQ,MAAO,SAEX+C,aAAc,CACV/C,MAAO+B,GAEXiB,QAAS,OAGE,SAASC,IACpB,IAAMjC,EAAU/B,IAEhB,OACI,yBAAKgC,UAAWD,EAAQyB,MACpB,4BAAQxB,UAAWD,EAAQ6B,QACvB,kBAACK,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,EAAG2D,QAAQ,SAASrC,UAAWD,EAAQgC,SAC5D,kBAACI,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,WAGA,kBAACW,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX7B,EAAQzD,KAAI,SAAA0F,GAAO,OAChB,kBAACvB,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAMsB,EAAQnC,KACdoC,IAAKD,EAAQpC,YACbe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAQpC,qBAMnD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,gBAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX5B,EAAS1D,KAAI,SAAAgG,GAAO,OACjB,kBAAC7B,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM4B,EAAQzC,KACdoC,IAAKK,EAAQ1C,YACbe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASC,EAAQ1C,qBAMnD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,iBAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX3B,EAAc3D,KAAI,SAAAiG,GAAa,OAC5B,kBAAC9B,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM6B,EAAc1C,KACpBoC,IAAKM,EAAc3C,YACnBe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASE,EAAc3C,qBAMzD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,QAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACX1B,EAAM5D,KAAI,SAAAkG,GAAI,OACX,kBAAC/B,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM8B,EAAK3C,KACXoC,IAAKO,EAAK5C,YACVe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASG,EAAK5C,qBAMhD,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACtB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cAA7E,aAGA,kBAACW,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMH,UAAU,OACXjC,EAAUrD,KAAI,SAAAmG,GAAS,OACpB,kBAAChC,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM+B,EAAU5C,KAChBoC,IAAKQ,EAAU7C,YACfe,IAAI,sBACJC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAcC,QAASI,EAAU7C,uBAS7D,kBAAC0B,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,SAASxC,UAAWD,EAAQ+B,cACzE,kBAACf,EAAD,U,cCrITsC,EAtBsB,SAAC,GAA4B,IAA1BnB,EAAyB,EAAzBA,SAAUoB,EAAe,EAAfA,SASxCvD,EARY9B,aAAW,SAAAC,GAAK,MAAK,CACnCqF,MAAO,CACHhF,gBAAiBuC,EACjBe,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,GAC7BD,OAAQP,EAAMQ,QAAQ,OAIdV,GAEhB,OACI,oCACI,kBAACiE,EAAA,EAAD,CAAWC,SAAUA,GACjB,kBAACsB,EAAA,EAAD,CAAOC,UAAW,EAAGzD,UAAWD,EAAQwD,OACnCD,M,oGChBRI,GAAqBC,IAAOC,IAAI,uBAMhCC,GAAmBF,IAAOC,IAAI,uBAG9BE,GAAsBH,IAAOC,IAAI,uBAEjCG,GAAoBJ,IAAOC,IAAI,uBAG/BI,GAAoB,CAC7BC,UAAW,CACPC,KAAM,6CACNC,QAAS,6CACTC,QAASC,EAASC,SAAS,MAAMC,SAErCC,WAAY,CACRN,KAAM,KACNC,QAAS,6CACTC,QAASC,EAASC,SAAS,MAAMC,SAErCE,UAAW,CAAEP,KAAM,KAAMC,QAAS,KAAMC,QAASC,EAASC,SAAS,MAAMC,UAMhEG,GAA6B,CACtC,CAAEC,MAAO,UAAWC,MAAO,GAAIC,KAAM,IACrC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,KACvC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,KACvC,CAAEF,MAAO,YAAaC,MAAO,IAAMC,KAAM,OAMhCC,GAAkC,CAC3C,CAAEH,MAAO,SAAUC,MAAO,EAAGC,KAAM,IACnC,CAAEF,MAAO,UAAWC,MAAO,GAAIC,KAAM,KACrC,CAAEF,MAAO,UAAWC,MAAO,GAAIC,KAAM,KACrC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,OAM9BE,GAA6B,CACtC,CAAEJ,MAAO,UAAWC,MAAO,GAAIC,KAAM,IACrC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,KACvC,CAAEF,MAAO,WAAYC,MAAO,IAAKC,KAAM,MAM9BG,GAAkC,CAC3C,CAAEL,MAAO,SAAUC,MAAO,EAAGC,KAAM,IACnC,CAAEF,MAAO,UAAWC,MAAO,GAAIC,KAAM,KACrC,CAAEF,MAAO,UAAWC,MAAO,GAAIC,KAAM,MAG5BZ,GAAwB,CACjC,CACInF,MAAO,WACPmG,IAAK,mBACLxE,KAAMyE,IACNC,UAAWzB,GACX0B,QAASvB,KAIJW,GAAyB,CAClC,CACI1F,MAAO,WAEP2B,KAAMyE,IACNC,UAAWrB,GACXsB,QAASrB,GACTsB,UAAU,GAEd,CACIvG,MAAO,WACPmG,IAAK,mBACLxE,KAAM6E,IACNH,UAAWrB,GACXsB,QAASrB,GACTsB,UAAU,IAILE,GAAwB,CACjC,CACIzG,MAAO,WACPmG,IAAK,uBACLxE,KAAMyE,IACNC,UAAWzB,GACX0B,QAASvB,IAEb,CACI/E,MAAO,WACPmG,IAAK,uBACLxE,KAAM6E,IACNH,UAAWzB,GACX0B,QAASvB,KC5FX2B,GAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAAIC,IAAgBC,IAEpE7H,GAAYC,aAAW,iBAAO,CAChC6H,QAAS,CACL5G,QAAS,QACTgD,SAAU,OACV3C,MAAO,QACPX,OAAQ,OACRmH,WAAY,OACZC,YAAa,YA0GNC,GArGsB,WACjC,IAAMlG,EAAU/B,KAEhB,OACI,kBAAC,IAAD,KACI,kBAAC8B,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaoC,SAAS,MAClB,yBAAKhC,IAAKsF,GAAcpF,IAAI,GAAGJ,UAAWD,EAAQ+F,UAClD,kBAAC,IAAD,KACI,kBAAC,IAAD,+CACA,kBAAC,IAAD,gCAEJ,kBAAC,IAAD,wIAEsC,IAClC,uBACI/G,MAAM,UACNsC,KAAK,2HACLC,IAAI,sBACJC,OAAO,UAJX,QAOK,IAVT,aAeJ,kBAAC,EAAD,CAAaW,SAAS,MAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,wBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAShC,IAAKgF,IAASjF,KAAK,UAC5B,kBAAC,IAAD,uBAEA,kBAAC,IAAD,CAAWiG,KAAK,UAAUjG,KAAK,OAC3B,kBAAC,IAAD,CAAekG,WAAW,oBAA1B,UAIR,kBAAC,IAAD,oBACiBzC,GAAmB0C,OAAO,oBAAoBC,WAD/D,OAEI,6BAFJ,aAGexC,GAAiBuC,OAAO,oBAAoBC,WAH3D,SAOJ,kBAAC,EAAD,CAAanE,SAAS,MAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,yBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAShC,IAAKgF,IAASjF,KAAK,UAC5B,kBAAC,IAAD,uBACA,kBAAC,IAAD,CAAWiG,KAAK,UAAUjG,KAAK,MAAMoF,UAAU,GAA/C,SAKJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASnF,IAAKoF,IAASrF,KAAK,UAC5B,kBAAC,IAAD,uBACA,kBAAC,IAAD,CAAWiG,KAAK,UAAUjG,KAAK,MAAMoF,UAAU,GAA/C,SAIJ,kBAAC,IAAD,uBAEI,6BAFJ,kBAOJ,kBAAC,EAAD,CAAanD,SAAS,MAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,wBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAShC,IAAKgF,IAASjF,KAAK,UAC5B,kBAAC,IAAD,uBAEA,kBAAC,IAAD,CAAWiG,KAAK,UAAUjG,KAAK,OAC3B,kBAAC,IAAD,CAAekG,WAAW,wBAA1B,UAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASjG,IAAKoF,IAASrF,KAAK,UAC5B,kBAAC,IAAD,uBAEA,kBAAC,IAAD,CAAWiG,KAAK,UAAUjG,KAAK,OAC3B,kBAAC,IAAD,CAAekG,WAAW,wBAA1B,WAIZ,kBAAC,EAAD,S,yEClIHG,GAAiB,SAACC,GAC3B,IAAMC,EAAQD,EAAME,SAASxJ,KAAI,SAAAyJ,GAC7B,OACI,kBAAC,IAAD,CAAiB1G,UAAU,gBAAgB4C,IAAK2D,EAAME,SAASE,QAAQD,GAAI9B,MAAO8B,EAAE9B,OAC/E8B,EAAE/B,UAKf,OACI,kBAAC,IAAD,CAAWiC,UAAU,UAAUC,YAAa,SAAApJ,GAAC,OAAI8I,EAAMO,SAASrJ,KAC3D+I,I,+DCmIEO,GA9HM,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAU1G,EAAqC,EAArCA,YAAa2G,EAAwB,EAAxBA,MAAwB,EAE1CC,mBAAa,IAAIC,KAAG,IAFsB,oBAEnEC,EAFmE,KAEvDC,EAFuD,OAGtCH,mBAAqB,CAAExC,MAAO,GAAIC,MAAO,EAAGC,KAAM,IAHZ,oBAGnE0C,EAHmE,KAGrDC,EAHqD,OAI7CL,mBAAS,IAJoC,oBAInEM,EAJmE,KAIvDC,EAJuD,KA8BpE3H,EAxBY9B,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTwJ,SAAU,CACN9F,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,IAEjCkJ,SAAU,CACNnJ,OAAQP,EAAMQ,QAAQ,IAE1BmJ,UAAW,CACPpJ,OAAQP,EAAMQ,QAAQ,IAE1BoJ,UAAW,CACP9B,YAAa9H,EAAMQ,QAAQ,GAC3BC,UAAW,GACXC,OAAQ,OACRC,cAAe,UAEnBkJ,QAAS,CACLhC,WAAY,OACZC,YAAa,YAKThI,GAchB,OACI,oCACI,kBAAC,EAAD,CAAakE,SAAS,MAClB,yBAAKlC,UAAWD,EAAQ4H,UACpB,kBAAC3G,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UACzC0E,EAAQ,cAAgB,aAD7B,8BAGA,kBAAClG,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,UAAjD,aACe,IACX,kBAACpB,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAK,4HACLC,IAAI,sBACJC,OAAO,UAEP,yBAAKrB,IAAK8H,KAAgB5H,IAAI,GAAGJ,UAAWD,EAAQ+H,cAI3DvH,EACG,kBAAC,IAAD,CAASP,UAAWD,EAAQgI,SACxB,kBAAC,IAAD,KAAiBE,KAAM1H,KAE3B,KAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU2H,SAAS,YAAnB,aAAyClB,GACzC,kBAAC,IAAD,CACImB,YAAa,eAAiBnB,EAC9BoB,WAAY,SAAA3K,GAAC,OAAI6J,EAAY7J,EAAE8D,OAA4BqD,WAGnE,kBAAC,IAAD,CAAU5E,UAAWD,EAAQ8H,WAA7B,iBACA,kBAAC,IAAD,KACI,kBAAC,GAAD,CACIpB,SAAUS,EAAQpC,GAAoBJ,GACtCoC,SAAU,SAACrJ,GAEP+J,GADoBN,EAAQpC,GAAoBJ,IAEhC2D,QAAO,SAAAC,GAAC,OAAIA,EAAE1D,QAAYnH,EAAE8D,OAAOqD,SAA8B,OAIzF,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK2C,EAAa3C,MACR,eAAiB2C,EAAa1C,KAAO,IACrC,gCAKlB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAS7E,UAAWD,EAAQgI,SACxB,kBAAC,IAAD,+OAGoE,IAChE,uBAAG1G,KAAK,kHAAR,WAEK,IANT,iBAUJ,kBAAC,IAAD,CAAU6G,SAAS,YAAnB,0BAEA,kBAAC,IAAD,CACIC,YAAa,kBACbC,WAAY,SAAA3K,GAAC,OAAIiK,EAAQjK,EAAE8D,OAA4BqD,WAG/D,kBAAC3C,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWsG,OAAO,QAAQC,QAAS,kBAnFvD,WACI,IAAMC,EAAoB,CACtBC,SAAUnB,EAAa3C,MACvB+D,OAAQtB,EACRuB,YAAanB,EACb5C,KAAM0C,EAAa1C,MAEvBoC,EAASwB,GA4EgDI,IAAgB7I,UAAWD,EAAQ6H,UAA5E,2B,8BCtITkB,K,gFAAf,mCAAAC,EAAA,0DAESC,OAAeC,SAFxB,wBAGcC,EAAO,IAAIC,KAAMH,OAAeC,UAH9C,kBAMmBD,OAAeC,SAASG,SAN3C,cAOYC,QAAQC,IAAI,yBAPxB,kBASmBJ,GATnB,mGAecF,OAAeE,KAf7B,wBAiBcA,EAAQF,OAAeE,KAC7BG,QAAQC,IAAI,2BAlBpB,kBAmBeJ,GAnBf,eAuBcK,EAAW,IAAIJ,KAAKK,UAAUC,aAAa,yBAC3CP,EAAO,IAAIC,KAAKI,GACtBF,QAAQC,IAAI,gDAzBpB,kBA0BeJ,GA1Bf,0D,sBAgEO,IAAMQ,GAAkB,WAC3B,IAAIpM,SAAQ,SAACC,EAASoM,GAClB,IACIX,OAAOY,oBAAoB,QAAQ,kBAAMrM,EAAQuL,SACnD,MAAOe,GACLF,EAAOE,QAqBJC,GAhBC,kBACZ,IAAIxM,SAAQ,SAACC,EAASoM,GAEU,aAAxBI,SAASC,YAEThB,OAAOiB,SAASC,SAIpB,IACIlB,OAAOmB,iBAAiB,QAAQ,kBAAM5M,EAAQuL,SAChD,MAAOe,GACLF,EAAOE,Q,oBCxFNO,GAAiB,6CA6CjBC,GAAmB,UAzCL,CACvB,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,8CAGwB,CAAC,0BAIG,CAAmDD,KAEtEE,GAAmB,UAJJ,CAAC,0BAUtB,SAASC,GAAyBC,GACrC,OACIH,GAAoBI,SAASD,EAAWE,gBAAkBJ,GAAoBG,SAASD,EAAWE,e,aCrD7FC,GAAb,WAOI,WACIC,EACAC,EACAC,EACAC,EACAC,GACD,0BAZHJ,cAYE,OAXFC,aAWE,OAVFC,0BAUE,OATFC,4BASE,OARFC,WAQE,EACEC,KAAKL,SAAWA,EAChBK,KAAKJ,QAAUA,EACfI,KAAKH,qBAAuBA,EAC5BG,KAAKF,uBAAyBA,EAC9BE,KAAKD,MAAQA,EAlBrB,wDAwBQ,IAFA,IAAIE,EAAoB,IAAIC,KAAU,GAE7B7C,EAAI,EAAGA,EAAI2C,KAAKH,qBAAqBM,OAAQ9C,IAClD4C,EAAoBA,EAAkBG,KAAKJ,KAAKH,qBAAqBxC,GAAG,IAG5E,IAAMgD,EAAWL,KAAKM,oBAEtB,OAAON,KAAKJ,QACPQ,KAAKH,GACLG,KAAKC,GACLE,YAjCb,oCAqCQ,OAAO,IAAIL,KAAUF,KAAKQ,YAAYD,YArC9C,oCAyCQ,OAAO,IAAIL,KAAUF,KAAKM,qBAAqBG,SAAS,KAzChE,sCA6CQ,OAAO,IAAIP,KAAUF,KAAKU,uBAAuBD,SAAS,KA7ClE,0CAkDQ,OAAOT,KAAKF,uBAAuBa,QAC/B,SAACC,EAAgBC,GAAjB,OAA2DD,EAAIR,KAAKS,EAAM,MAC1E,IAAIX,KAAU,MApD1B,4CA0DQ,OAAOF,KAAKH,qBAAqBc,QAC7B,SAACC,EAAgBC,GAAjB,OAA2DD,EAAIR,KAAKS,EAAM,MAC1E,IAAIX,KAAU,QA5D1B,K,yCCsBMY,GADoB,IAAIZ,KAAU,6BACea,MAAM,IAAIb,KAAU,MAAMc,IAAI,IAAId,KAAU,QAQ5F,SAAee,GAAtB,qC,gDAAO,WAAyBhD,EAAYiD,GAArC,4BAAApD,EAAA,6DAECqD,EAAM,6DAEND,IACAC,EAAMD,GAEJE,EAAOnD,EAAKoD,IAAIC,SAASC,YAAYJ,GAPxC,SAQqBlD,EAAKoD,IAAIG,cAR9B,cAQGC,EARH,gBAUuBxD,EAAKoD,IAAIK,SAASC,KAAKR,EAAKM,EAAU,GAAI,kBAVjE,0BAUoFG,MAAM,GAAvFC,EAAM,KAVT,KAWGC,EAAMC,sBAAWF,GACjBG,EAAYC,uBAAYC,qBAAUC,oBAASf,GAAOU,EAAIM,EAAGN,EAAIO,EAAGP,EAAIQ,IACpEC,EAAmB,KAAOC,KAAUR,UAAUS,SAAST,EAAUU,QAAQ,KAAM,KAblF,kBAeIH,GAfJ,6C,sBAwBA,SAAeI,GAAtB,qC,gDAAO,WAAgC1E,EAAY2E,GAA5C,kBAAA9E,EAAA,6DAEuB,EAFvB,SAGc8E,EAASC,cAAc,SAAU,CAC9CC,UAFsB,IAFvB,cAGGC,EAHH,gBAOuB1Q,QAAQ2Q,IAC9BD,EAAG/Q,IAAH,yCAAO,WAAMQ,GAAN,UAAAsL,EAAA,+EACIzL,QAAQ2Q,IAAI,CAAC3Q,QAAQC,QAAQE,EAAEyQ,cAAehF,EAAKoD,IAAI6B,eAAe1Q,EAAE2Q,oBAD5E,2CAAP,wDARD,cAOGC,EAPH,yBAaI/Q,QAAQ2Q,IACXI,EAAYpR,IAAZ,yCAAgB,WAAMQ,GAAN,sBAAAsL,EAAA,6DAENuF,EAAY7Q,EAAE,GACd8Q,EAAY9Q,EAAE,GAHR,SAKoBH,QAAQC,QAAQ2L,EAAKoD,IAAIkC,SAASF,EAAUG,cALhE,cAKNC,EALM,OAMNC,EAAOD,EAAkBE,UAAUvI,WAN7B,kBAOL,CACHiG,IAAKiC,EAAUjC,IACf5D,SAAU6F,EAAU7F,SACpBmG,KAAMN,EAAUM,KAChBrE,WAAY+D,EAAU/D,WACtBsE,QAASR,EAAUG,YACnBG,UAAWD,EACXI,UAAWT,EAAUU,KACrBV,UAAWA,EAAUA,UACrBF,gBAAiBE,EAAUjC,OAhBnB,2CAAhB,yDAdD,4C,sBAyCA,SAAS4C,GAAmBC,GAE/B,OAAIA,GAKO9E,GAIf,SAAS+E,GAAkBC,EAAqBC,GAE5C,IAAMC,EAAY,IAAInE,KAAUoE,aAAmBH,EAAS1G,WAAWsD,MAAMqD,GAM7E,OAHgC,IAAIlE,KAAUqE,KAAUC,QAAQL,EAAS9C,IAAIjG,WAAY,UAAU2F,MAC/F,IAAIb,KAAUmE,IAKtB,SAASI,GAAwBC,EAAuBN,GACpD,OAAOM,EAAS/D,QACZ,SAACC,EAAgBjH,GAAjB,OAAiDiH,EAAIR,KAAK8D,GAAkBvK,EAAOyK,MACnF,IAAIlE,KAAU,IAItB,SAASyE,GAAyBf,EAAiBgB,EAA0BR,GACzE,IAAMS,EAAeX,GAAkBN,EAAMQ,GAC7C,OAAOtD,GAA6BC,MAAM8D,GAAc7D,IAAI4D,GAsCzD,SAASE,GAAkBxL,EAAiB6K,GAC/C,IAAMY,EAAe,IAAIrF,GAAQpG,EAAS,IAAI4G,KAAU,GAAI,GAAI,GAAI,IAE9D8E,EAAsBb,EAAS/G,QAAO,SAAAC,GAAC,OAAIA,EAAEyG,UAAUrE,gBAAkBnG,EAAQmG,iBAEvFsF,EAAahF,MAAQiF,EAOrB,IALA,IAAMZ,EAAkB,IAAIlE,KAzJF,QA4JpB+E,EAAeR,GAAwBN,EAAUC,GAE9C/G,EAAI,EAAGA,EAAI2H,EAAoB7E,OAAQ9C,IAAK,CAEjD,IAAM6H,EAAaP,GAAyBK,EAAoB3H,GAAI4H,EAAcb,GAGlFW,EAAanF,QAAUmF,EAAanF,QAAQQ,KAAK8E,GAK7C5F,GAAyB0F,EAAoB3H,GAAGkC,aAChDyF,EAAoB3H,GAAGkC,aAAeJ,IAEtC4F,EAAalF,qBAAqBsF,KAAK,CACnCH,EAAoB3H,GAAGkC,WACvB2F,EAAWnE,MAAM,IAAIb,KF/LN,QEsM3B,GAAIZ,GAAyBhG,GAGzB,IAFA,IAAM8L,EAjEd,SAA6B9L,EAAiB6K,GAK1C,IAHA,IAAMkB,EAAuB,GACvBC,EAAYnB,EAAS/G,QAAO,SAAA5K,GAAC,OAAIA,EAAE+M,WAAWE,gBAAkBnG,EAAQmG,iBAErEpC,EAAI,EAAGA,EAAIiI,EAAUnF,OAAQ9C,IAClCgI,EAAQF,KAAKG,EAAUjI,IAG3B,OAAOgI,EAwDaE,CAAoBjM,EAAS6K,GAEpC9G,EAAI,EAAGA,EAAI+H,EAAQjF,OAAQ9C,IAEhC0H,EAAajF,uBAAuBqF,KAAK,CACrCC,EAAQ/H,GAAGuG,KACXe,GAAyBS,EAAQ/H,GAAI4H,EAAcb,GAAiBrD,MAChE,IAAIb,KF9MO,QEmN3B,OAAO6E,EAOJ,SAASS,GAAgBzF,GAC5B,IAAI0F,EAAW,IAAIvF,KAAU,GAC7B,GAAIH,EAAMI,OAAS,EACf,IAAK,IAAI9C,EAAI,EAAGA,EAAI0C,EAAMI,OAAQ9C,IAAK,CACnC,IAAMqI,EAAa,IAAIxF,KAAUH,EAAM1C,GAAGgE,IAAIjG,YAC9CqK,EAAWA,EAASrF,KAAKsF,GAGjC,OAAOnB,KAAUC,QAAQiB,EAASlF,UAAW,SAQ1C,SAAeoF,GAAtB,mC,gDAAO,WAA2BC,GAA3B,0BAAA9H,EAAA,sEAEgBe,KAFhB,aAEGZ,EAFH,kBAKiBC,MALjB,iCAOwBD,EAAKoD,IAAIG,cAPjC,cAOOF,EAPP,OAQOuE,EAAczM,EAAS0M,IAR9B,UAe2B7H,EAAKoD,IAAI0E,IAAIC,iBAfxC,eAeOC,EAfP,OAgBOC,EAAmBC,GAA2BP,GAAoBK,GAGlErD,EAAW,IAAI3E,EAAKoD,IAAI+E,SAASP,EAAiC,OAApBK,GAA4BA,GAnBjF,kBAqBQ,CACHjI,KAAMA,EACNqD,SAAUA,EACV+E,SAAUzD,IAxBf,cA2BO,IAAInQ,MAAM,4CA3BjB,6C,sBAmCA,SAAe6T,GAAtB,mC,gDAAO,WAAkCD,GAAlC,gBAAAvI,EAAA,sEAC4BuI,EAASE,QAAQC,gBAAgBC,OAD7D,cACGC,EADH,yBAEIA,GAFJ,4C,sBASA,SAAeC,GAAtB,mC,gDAAO,WAAoCN,GAApC,gBAAAvI,EAAA,sEAC8BuI,EAASE,QAAQK,kBAAkBH,OADjE,cACGI,EADH,yBAEIA,GAFJ,4C,sBAYA,SAAeC,GAAtB,uC,gDAAO,WAA4BC,EAAoBzN,EAAiB+M,GAAjE,oBAAAvI,EAAA,2DAECiJ,EAAQrJ,QAAU,IAAIvB,KAAG,IAAM4K,EAAQtJ,UAAY,GAFpD,sBAGO,IAAIhL,MAAM,6BAHjB,WAOG8M,EAAayE,GAAmB+C,EAAQpJ,aAAa8B,iBAExCnG,EAThB,sBAUO,IAAI7G,MAAM,iCAVjB,WAYC8M,GAAerB,KAAK8I,MAAMC,UAAU1H,GAZrC,sBAaO,IAAI9M,MAAM,yCAbjB,cAiBGyU,EAAehJ,KAAK8I,MAAMG,MAAMJ,EAAQrJ,OAAQ,SAClD0D,EAAO,GAlBR,UAqBGiF,EAASE,QACV3C,KAAKmD,EAAQtJ,SAAU8B,GACvB6H,KAAK,CACFrD,KAAMzK,EACNK,MAAOuN,IAEVG,GAAG,mBAAmB,SAACvF,GACpBV,EAAOU,KA5BZ,WA+BU,KAATV,EA/BD,uBAgCO,IAAI3O,MAAM,0DAhCjB,iCAkCI2O,GAlCJ,6C,8NC1QDrO,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACToU,SAAU,CACNhT,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1C2E,SAAU,WACVwK,SAAU,OACV/T,UAAW,KAEfgU,YAAa,CACTpU,gBAAiB,WAErBqU,GAAI,CACArU,gBAAiB,UACjBsD,QAAS,GAEbgR,aAAc,CACVC,UAAW,UAEfC,QAAS,CACLxU,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1ChE,MAAO,QAEXyT,YAAa,CACTnU,cAAe,SACfiU,UAAW,SACXG,aAAc,eAiEpBC,GAAwC,SAAC,GAAiC,IAA/B9B,EAA8B,EAA9BA,SAAUlI,EAAoB,EAApBA,KAAM3E,EAAc,EAAdA,QACvDxE,EAAU/B,KAIVmV,EAAgBC,uBAAY,WAM9B,OAJ+C,IAA7BC,OAAOjC,EAASxC,WAJlB,MAMewC,EAAS1I,WAGzC,CAAC0I,IAEEkC,EAAoBF,uBAAY,WAElC,IAAMG,EAAUJ,KAAmBjS,KAAKsS,MACxC,MAAO,CACHC,KAAMhO,KAAKC,MAAM6N,EAAO,OACxBG,MAAOjO,KAAKC,MAAO6N,EAAO,KAAuB,IACjDI,QAASlO,KAAKC,MAAO6N,EAAU,IAAO,GAAM,IAC5CK,QAASnO,KAAKC,MAAO6N,EAAU,IAAQ,OAE5C,CAACJ,IAvBuE,EAyBzChM,oBAAS,GAzBgC,oBAyBpE0M,EAzBoE,KAyBzDC,EAzByD,OA0BvC3M,mBAAqBmM,KA1BkB,oBA0BpES,EA1BoE,KA0BxDC,EA1BwD,OA2BxC7M,oBAAS,GA3B+B,oBA2BpE8M,EA3BoE,KA2B1DC,EA3B0D,OA4B3C/M,oBAAS,GA5BkC,oBA4BpEgN,EA5BoE,KA4BzDC,EA5ByD,KA8BrEC,EAAcjB,sBAAW,wBAAC,mCAAArK,EAAA,6DAEtBuL,EAAQpT,KAAKsS,MAGbe,EAAyC,IAA7BlB,OAAOjC,EAASxC,WAE5B4F,EAAaD,EAlCH,MAkCenD,EAAS1I,SAPZ,SAUFQ,EAAKoD,IAAImI,WAAWrD,EAASvC,MAV3B,cAUtB6F,EAVsB,OAc5BR,EAFuC,MAAhBQ,GAZK,kBAerBJ,EAAQE,GAfa,2CAgB7B,CAACpD,EAAUlI,IAGdyL,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,uBAAA9L,EAAA,6DACzBiL,EAAcV,KADW,KAEzBQ,EAFyB,SAENO,IAFM,6EAG1B,KAEH,OAAO,WACHS,cAAcF,MAEnB,CAACtB,EAAmBe,IAGvBM,qBAAU,WACNX,EAAcV,KACde,IAAc7W,KAAKsW,KACpB,CAACR,EAAmBe,IAiCvB,OACI,oCACI,kBAACxR,EAAA,EAAD,KACI,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,EAAGqW,WAAW,UACnC,kBAAC5S,EAAA,EAAD,CAAMG,MAAI,EAAC0S,GAAI,GACX,kBAACjS,EAAA,EAAD,KACI,6CAAmBqO,EAASvC,MAC5B,qCACYW,KAAUC,QAAQ2B,EAAS9E,IAAK,SAD5C,YAC+D8E,EAAS1I,SADxE,SAGC0I,EAAS5G,aAAeJ,GACrB,0CAAgBgH,EAAS5G,YAEzB,4CAEH2J,EACG,oCACI,kBAACc,GAAA,EAAD,OAGJ,oCACMpB,EAkBEI,EACA,qDAEA,0DApBA,kBAAC9R,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,GACrB,kBAACyD,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAIyR,EAAWN,KAAf,WAEJ,kBAACtR,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAIyR,EAAWL,MAAf,YAEJ,kBAACvR,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAIyR,EAAWJ,QAAf,cAEJ,kBAACxR,EAAA,EAAD,CAAMG,MAAI,GACN,2BAAIyR,EAAWH,QAAf,cAEJ,kBAACzR,EAAA,EAAD,CAAMG,MAAI,GACN,wCAY5B,kBAACH,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC4S,GAAA,EAAD,CAAyBlV,UAAWD,EAAQiT,aACvCiB,EACG,kBAAC,KAAD,CAAclV,MAAM,aACpB8U,EACA,kBAACsB,GAAA,EAAD,CAASrW,MAAM,kBAAkBsW,aAAW,UACxC,kBAACC,GAAA,EAAD,CACIC,KAAK,MACLF,aAAW,SACX5M,QAAS,kBAtFzC4L,GAAW,QACXlL,EAAKoD,IACAiJ,gBAAgB,CACbvG,KAAMzK,EACNiR,GAAIpE,EAASvC,KACbjK,MAAO,MAEV6Q,OAAM,SAAA5L,GACHR,QAAQC,IAAIO,MAEf6L,SAAQ,WAELxM,EAAKoD,IACAmI,WAAWrD,EAASvC,MACpBrR,MAAK,SAAAkX,GAIFR,EAFuC,MAAhBQ,MAI1Be,OAAM,SAAAE,GACHtM,QAAQC,IAAIqM,MAEfD,SAAQ,WACLtB,GAAW,UA+DKrV,MAAM,WAEN,kBAAC,KAAD,QAIR,kBAAC,KAAD,CAAUA,MAAM,kBAUjC6W,GA3NkC,SAAC,GAAkC,IAAhC1M,EAA+B,EAA/BA,KAAMqD,EAAyB,EAAzBA,SAAU6C,EAAe,EAAfA,SAC1DrP,EAAU/B,KAD+D,EAE/CmJ,mBAAsB,IAFyB,oBAExE0O,EAFwE,KAE5DC,EAF4D,OAGzC3O,oBAAS,GAHgC,oBAGxE4O,EAHwE,KAGzDC,EAHyD,KAU/E,OALArB,qBAAU,WACNmB,EAAU1G,EAAS/G,QAAO,SAAAC,GAAC,OAAIA,EAAEyG,YAAcxC,EAAS,OACxDyJ,GAAa,KACd,CAAC5G,EAAU7C,IAGV,yBAAKvM,UAAWD,EAAQ8S,cACnBkD,EACG,kBAACE,GAAA,EAAD,MAEA,oCACKJ,EAAWzK,OAAS,EACjB,oCACI,0CACA,4BAAKqF,GAAgBoF,GAArB,eACA,kBAACnT,EAAA,EAAD,CAAM1C,UAAWD,EAAQwS,SAAU2D,UAAW,8BAC1C,wBAAIlW,UAAWD,EAAQ4S,aACnB,wBAAI3S,UAAWD,EAAQ6S,IACnB,kBAACuD,GAAA,EAAD,iBAAyBN,EAAWzK,OAApC,UACA,kBAAC3I,EAAA,EAAD,MACCoT,EAAW5Y,KAAI,SAAAmZ,GAAS,OACrB,yBAAKxT,IAAKwT,EAAU9H,WAChB,kBAAC,GAAD,CAAY8C,SAAUgF,EAAWlN,KAAMA,EAAM3E,QAASgI,EAAS,KAC/D,kBAAC9J,EAAA,EAAD,cAQxB,oCACI,wCACA,yDC1FtBzE,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACToU,SAAU,CACNhT,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1C2E,SAAU,WACVwK,SAAU,OACV/T,UAAW,KAEfgU,YAAa,CACTpU,gBAAiB,WAErBqU,GAAI,CACArU,gBAAiB,UACjBsD,QAAS3D,EAAMQ,QAAQ,EAAG,IAE9BmU,aAAc,CACVC,UAAW,UAEfC,QAAS,CACLxU,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1ChE,MAAO,aA4DJ8W,GAvDiC,SAAC,GAAkB,IAAhBjH,EAAe,EAAfA,SACzCrP,EAAU/B,KAD8C,EAE9BmJ,mBAAsB,IAFQ,oBAEvD0O,EAFuD,KAE3CC,EAF2C,KAQ9D,OAJAnB,qBAAU,WACNmB,EAAU1G,KACX,CAACA,IAGA,yBAAKpP,UAAWD,EAAQ8S,cACpB,oCACKgD,EAAWzK,OAAS,EACjB,oCACI,4CACA,4BAAKqF,GAAgBoF,GAArB,eACA,kBAACnT,EAAA,EAAD,CAAM1C,UAAWD,EAAQwS,SAAU2D,UAAW,8BAC1C,wBAAIlW,UAAWD,EAAQ4S,aACnB,wBAAI3S,UAAWD,EAAQ6S,IACnB,kBAACuD,GAAA,EAAD,kBAA0BN,EAAWzK,OAArC,UACA,kBAAC3I,EAAA,EAAD,MACCoT,EAAW5Y,KAAI,SAAAmZ,GAAS,OACrB,oCACI,kBAACvT,EAAA,EAAD,CAAUD,IAAKwT,EAAUvH,MACrB,kBAAC9L,EAAA,EAAD,KACI,6CAAmBqT,EAAUvH,MAC7B,mDAAyBuH,EAAUtH,SACnC,qCACYU,KAAUC,QAAQ2G,EAAU9J,IAAK,SAD7C,WAC+D,IAC1D8J,EAAU1N,SAFf,SAIC0N,EAAU5L,aAAeJ,GACtB,0CAAgBgM,EAAU5L,YAE1B,8CAIZ,kBAAC/H,EAAA,EAAD,cAQxB,oCACI,wCACA,yDC/DxB,SAAS6T,GAAS/P,GAAuB,IAC7BjD,EAAqCiD,EAArCjD,SAAUsB,EAA2B2B,EAA3B3B,MAAO2R,EAAoBhQ,EAApBgQ,MAAUC,EADC,aACSjQ,EADT,8BAGpC,OACI,kBAACvF,EAAA,EAAD,eACIuB,UAAU,MACVkU,KAAK,WACLC,OAAQ9R,IAAU2R,EAClB1Y,GAAE,8BAAyB0Y,GAC3BI,kBAAA,yBAAmCJ,IAC/BC,GAEH5R,IAAU2R,GAAS,kBAACK,GAAA,EAAD,CAAKC,EAAG,GAAIvT,IAK5C,SAASwT,GAAUP,GACf,MAAO,CACH1Y,GAAG,kBAAD,OAAoB0Y,GACtB,gBAAgB,uBAAhB,OAAwCA,IAIhD,ICtCKQ,GDsCC/Y,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACT4U,QAAS,CACLxU,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1ChE,MAAO,aAsDJyX,GAhDmC,SAAC,GAAkC,IAAhC9N,EAA+B,EAA/BA,KAAMqD,EAAyB,EAAzBA,SAAU6C,EAAe,EAAfA,SAC3DrP,EAAU/B,KACVE,EAAQ+Y,eAFkE,EAGtDC,IAAM/P,SAAS,GAHuC,oBAGzEvC,EAHyE,KAGlEuS,EAHkE,KAahF,OACI,oCACI,kBAAC,EAAD,CAAajV,SAAS,MAClB,yBAAKlC,UAAWD,EAAQgT,SACpB,kBAACqE,GAAA,EAAD,CAAQlP,SAAS,SAASnJ,MAAM,WAC5B,kBAACsY,GAAA,EAAD,CACIzS,MAAOA,EACP0S,SAfH,SAACC,EAA+BC,GACjDL,EAASK,IAeWC,eAAe,UACfC,UAAU,UACVzW,QAAQ,YACRmU,aAAW,mBAEX,kBAACuC,GAAA,EAAD,eAAKhT,MAAM,iBAAoBmS,GAAU,KACzC,kBAACa,GAAA,EAAD,eAAKhT,MAAM,iBAAoBmS,GAAU,OAGjD,kBAAC,KAAD,CACIc,KAA0B,QAApB1Z,EAAM2Z,UAAsB,YAAc,IAChDtB,MAAO3R,EACPkT,cAxBM,SAACvB,GACvBY,EAASZ,KAyBO,kBAACD,GAAD,CAAU1R,MAAOA,EAAO2R,MAAO,EAAGwB,IAAK7Z,EAAM2Z,WACzC,kBAAC,GAAD,CAAazI,SAAUA,KAE3B,kBAACkH,GAAD,CAAU1R,MAAOA,EAAO2R,MAAO,EAAGwB,IAAK7Z,EAAM2Z,WACzC,kBAAC,GAAD,CAAc3O,KAAMA,EAAMqD,SAAUA,EAAU6C,SAAUA,U,0BCvF/E2H,O,uBAAAA,I,iBAAAA,I,cAAAA,Q,KAML,IA4HeiB,GA5HiC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,QAAS9I,EAAe,EAAfA,SAC7DoE,EAAM7P,MAASC,MAEf0P,EAAoB,WACtB,IAAM6E,EAAYxU,IAAOsU,GAAWG,UAAY5E,EAAI4E,UAGhDC,EAAa3P,mBAASuP,EAAUK,KAAK9E,IAGrC2E,EAAY,IACZE,EAAa3P,mBAASwP,EAAQI,KAAK9E,KAGvC,IAAI+E,EAAuB,CACvB9E,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GAab,OAVgBjQ,IAAOuU,GAASE,UAAY5E,EAAI4E,UAElC,IACVG,EAAW,CACP9E,KAAM4E,EAAW5E,OACjBC,MAAO2E,EAAW3E,QAClBC,QAAS0E,EAAW1E,UACpBC,QAASyE,EAAWzE,YAGrB2E,GAGLC,EAAe,WACjB,IAAML,EAAYxU,IAAOsU,GAAWG,UAAY5E,EAAI4E,UACpD,OAAID,EAAY,EACLpB,GAAU0B,SACVN,GAAa,KAAOxU,IAAOuU,GAASE,UAAY5E,EAAI4E,UAAY,GAChErB,GAAU2B,MAEV3B,GAAU4B,KAzCyD,EA6ClDxR,mBAAqBmM,KA7C6B,oBA6C3EiF,EA7C2E,KA6CjEK,EA7CiE,OA8ChDzR,mBAASqR,KA9CuC,oBA8C3EK,EA9C2E,KA8ChE/E,EA9CgE,OA+C1C3M,mBAAS,KA/CiC,oBA+C3E2R,EA/C2E,KA+C7DC,EA/C6D,KAiD5EC,EAAY,yCAAG,6BAAAjQ,EAAA,sDACjB,IACUkQ,EAAgBxI,GAAgBrB,GACtC2J,EAAgBE,GAClB,MAAOtD,GACLtM,QAAQQ,MAAM8L,GALD,2CAAH,qDAqBlB,OAZAhB,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,uBAAA9L,EAAA,6DACzB6P,EAAYtF,KACZQ,EAAa0E,KAFY,SAGnBQ,IAHmB,2CAI1B,KAEH,OAAO,WACHlE,cAAcF,OAIlBiE,IAAc9B,GAAU4B,IAEpB,oCACI,kBAAC,GAAD,KACI,yBAAK3Y,UAAU,QACX,kBAACmC,EAAA,EAAD,CAAMC,WAAS,EAAC1D,QAAS,EAAG2D,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACLuW,IAAc9B,GAAU0B,SACrB,kBAACzX,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,MAAnC,yBAIA,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,MAAnC,wBAKR,kBAACJ,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKiW,EAAS9E,MACd,oCAEJ,kBAACtR,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKiW,EAAS7E,OACd,qCAEJ,kBAACvR,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKiW,EAAS5E,SACd,uCAEJ,kBAACxR,EAAA,EAAD,CAAMG,MAAI,GACN,4BAAKiW,EAAS3E,SACd,2CASpB,oCACI,kBAAC,GAAD,KACI,kBAAC5S,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,sBAGA,kBAACxB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,uBACyBsW,EADzB,WAWdI,GAAyB,SAAC,GAAkB,IAAhB5V,EAAe,EAAfA,SAQxBvD,EAPY9B,aAAW,SAAAC,GAAK,MAAK,CACnCkE,UAAW,CACPP,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,GAC7BD,OAAQP,EAAMQ,QAAQ,OAIdV,GAEhB,OACI,oCACI,kBAACiE,EAAA,EAAD,CAAWC,SAAS,KAAKlC,UAAWD,EAAQqC,WACvCkB,K,8GC3BF6V,GAjG+B,SAAC,GAAwB,IAAtB/J,EAAqB,EAArBA,SAAUlG,EAAW,EAAXA,KAgBjDnJ,EAfY9B,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTib,YAAa,CACTtG,UAAW,SACXjR,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,IAEjC2a,OAAQ,CACJta,MAAO+B,GAEXwY,YAAa,CACTzX,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,QAKzBV,GAhBkD,EAiBlCmJ,mBAAkB,IAAIwD,GAAQ,GAAI,IAAIQ,KAAU,GAAI,GAAI,GAAI,KAjB1B,oBAiB3DoO,EAjB2D,KAiBjDC,EAjBiD,OAkBtCrS,mBAAS,GAlB6B,oBAkB3DsS,EAlB2D,KAkBnDC,EAlBmD,OAmBhCvS,oBAAS,GAnBuB,oBAmB3DgN,EAnB2D,KAmBhD6B,EAnBgD,OAoBb7O,oBAAS,GApBI,oBAoB3DwS,EApB2D,KAoBvCC,EApBuC,OAqBnBzS,oBAAS,GArBU,oBAqB3D0S,EArB2D,KAqB1CC,EArB0C,KAuBlEnF,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,+BAAA9L,EAAA,6DACzB2Q,ELzCkB,QKwCO,SAEFxQ,EAAKoD,IAAIG,cAFP,OAEnBF,EAFmB,OAGnBwN,EAAahK,GAAkBxD,EAAS,GAAI6C,GAClDoK,EAAYO,GAEZ/D,GAAa,GANY,2CAO1B,KAEH,OAAO,WACHlB,cAAcF,OAItB,IAAMoF,EACF,kBAAC,KAAD,CACItB,MAAO,EACPC,IAAK,IAAIxN,KAAUoO,EAASU,eAAeC,WAC3CC,SAAU,EACVzR,SAAU,EACV0R,UAAU,MAIlB,OACI,yBAAKpa,UAAWD,EAAQqZ,aACpB,+CACCjF,EACG,oCACI,kBAAC8B,GAAA,EAAD,OAEJsD,EAASvO,MAAMI,OAAS,GAAKmO,EAASxO,uBAAuBK,OAAS,EACtE,oCACI,wBAAIpL,UAAWD,EAAQsZ,QAASW,EAAhC,iBACA,8CAAoBT,EAASvO,MAAMI,OAAnC,YACA,4EACmDqO,EADnD,QAEI,uBAAGpY,KAAK,8FAAR,OAFJ,KAOA,uDAA6BkY,EAAS1O,QAAQa,SAAS,GAAvD,qBACA,kBAACjJ,EAAA,EAAD,MACA,mDACA,kBAAC,IAAD,CAAS1D,MAAM,UAAUyJ,QAAS,kBAAMoR,GAAuB,KAC3D,kBAAC,IAAD,KAAWL,EAASxO,uBAAuBK,OAA3C,WAEJ,kBAAC,IAAD,iDAAoDmO,EAASc,cAA7D,QAEA,kBAAC,IAAD,CAAYC,OAAQX,EAAoBY,aAAc,kBAAMX,GAAuB,KAC/E,kBAAC,GAAD,CAAcY,KAAMjB,KAExB,6BACA,kBAAC,IAAD,6BACA,kBAAC,IAAD,CAASxa,MAAM,UAAUyJ,QAAS,kBAAMsR,GAAoB,KACxD,kBAAC,IAAD,KAAWP,EAASzO,qBAAqBM,OAAzC,iBAEJ,kBAAC,IAAD,UAAamO,EAASkB,gBAAtB,QAEA,kBAAC,IAAD,CAAYH,OAAQT,EAAiBU,aAAc,kBAAMT,GAAoB,KACzE,kBAAC,GAAD,CAAcU,KAAMjB,KAExB,6BACA,kBAAC,GAAD,CAAUrQ,KAAMA,KAGpB,wBAAIlJ,UAAWD,EAAQsZ,QAAvB,sCAWVqB,GAAwC,SAAC,GAAc,IAAZF,EAAW,EAAXA,KAC7C,OACI,oCACI,kBAAC,IAAD,KACKA,EAAKzP,uBAAuBK,OAAS,EAClC,oCACI,kBAAC,IAAD,mBACCoP,EAAKzP,uBAAuB9N,KAAI,SAACqL,GAAD,OAC7B,kBAAC,IAAD,CAAS1F,IAAK0F,EAAE,GAAIjH,KArHxB,gCAqHgDiH,EAAE,GAAIhH,IAAI,sBAAsBC,OAAO,UAC9E+G,EAAE,QAKf,kBAAC,IAAD,yBAOdqS,GAAwC,SAAC,GAAc,IAAZH,EAAW,EAAXA,KAC7C,OACI,oCACI,kBAAC,IAAD,KACKA,EAAK1P,qBAAqBM,OAAS,EAChC,oCACI,kBAAC,IAAD,oBACCoP,EAAK1P,qBAAqB7N,KAAI,SAACqL,GAAD,OAC3B,kBAAC,IAAD,CAAS1F,IAAK0F,EAAE,GAAIjH,KA1IxB,gCA0IgDiH,EAAE,GAAIhH,IAAI,sBAAsBC,OAAO,UAC9E+G,EAAE,QAKf,kBAAC,IAAD,0BAUdsS,GAAiC,SAAC,GAAc,IAAZ1R,EAAW,EAAXA,KAChClL,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTkb,OAAQ,CACJta,MAAO+B,GAEXwY,YAAa,CACTuB,WAAY3c,EAAMQ,QAAQ,GAC1BqH,WAAY,OACZC,YAAa,OACb9D,SAAU,QAEd4Y,aAAc,CACVjZ,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,IAEjC8C,KAAM,CACFjC,MAAO,OACP0T,aAAc,SACd1U,gBAAiBL,EAAMsU,QAAQC,WAAWlP,OAE9CwX,OAAQ,CACJpZ,YAAazD,EAAMQ,QAAQ,SArBU,EA0BfyI,oBAAS,GA1BM,oBA0B1CgN,EA1B0C,KA0B/B6B,EA1B+B,OA2Bb7O,mBAAS,IA3BI,oBA2B1C6T,EA3B0C,KA2B9BC,EA3B8B,OA4Bf9T,mBAAS,IA5BM,oBA4B1C+T,EA5B0C,KA4B/BC,EA5B+B,OA6BzBhU,oBAAS,GA7BgB,oBA6B1CiU,EA7B0C,KA6BpCC,EA7BoC,KA+B3CC,EAAe,yCAAG,iCAAAvS,EAAA,sEACCmD,GAAUhD,GADX,cACdqS,EADc,OAEhBC,EAAS,GACS,kBAAXD,IACPJ,EAAaI,GAEPP,EAAaS,aAAmBF,EAAO5N,QAAQ,KAAM,KAC3D6N,EAASR,GAEbhF,GAAa,GATO,kBAUbwF,GAVa,2CAAH,qDAgBfzb,EAAU/B,IAEhB,OACI,oCACI,kBAAC,IAAD,CAAYsc,OAAQnG,EAAWhI,QAAS,sBACxC,kBAAC,IAAD,CACIpN,MAAM,UACN2c,KAAK,QACL1b,UAAWD,EAAQuZ,YACnB9Q,QAAO,wBAAE,uBAAAO,EAAA,6DACLiN,GAAa,GADR,KAELiF,EAFK,SAEeK,IAFf,8EAJb,qBAWCN,EACG,oCACI,kBAAC,EAAD,CAAa9Y,SAAS,MAClB,yBAAKlC,UAAWD,EAAQ+a,cACpB,oFACA,kBAAC1Z,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAM,oCAAsC2Z,EAC5C1Z,IAAI,sBACJC,OAAO,UAEP,wBAAIvB,UAAWD,EAAQsZ,QAAS2B,IAEpC,kBAACtY,EAAA,EAAD,CAAMH,UAAU,MAAMvC,UAAWD,EAAQyB,MACrC,kBAACqB,EAAA,EAAD,CAAUC,QAAM,EAAC0F,QAlC1B,WACf6S,GAASD,KAkCmB,kBAACO,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC5Y,EAAA,EAAD,CAAcC,QAAQ,wBACrBoY,EAAO,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAE7B,kBAACQ,GAAA,EAAD,CAAUC,GAAIT,EAAMU,QAAQ,OAAOC,eAAa,GAC5C,kBAAC/a,EAAA,EAAD,CAAYhB,UAAWD,EAAQsZ,QAAS6B,QAM5D,OC5PVld,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACToU,SAAU,CACNhT,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1C2E,SAAU,WACVwK,SAAU,OACV/T,UAAW,KAEfgU,YAAa,CACTpU,gBAAiB,WAErBqU,GAAI,CACArU,gBAAiB,UACjBsD,QAAS,GAEb/C,MAAO,CACHgU,UAAW,SACXjR,QAAS3D,EAAMQ,QAAQ,EAAG,EAAG,SA0DnCsd,GAA0D,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC/D,OACI,oCACI,kBAACpZ,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,4BAAKkZ,EAAWrR,UAChB,2BAAIqR,EAAWlR,uBAAuBK,OAAtC,oCACA,2BAAI6Q,EAAW5B,cAAf,4BAGR,kBAAC5X,EAAA,EAAD,QAKGyZ,GApE0B,SAAC,GAAkB,IAAhB9M,EAAe,EAAfA,SAClCrP,EAAU/B,KADuC,EAEXmJ,mBAAoB,IAFT,oBAEhDgV,EAFgD,KAEhCC,EAFgC,KA2BvD,OAJAzH,qBAAU,WACNyH,EApBJ,SAA+BhN,GAU3B,OARuB/E,GAAoBhC,QAAO,SAAA9D,GAAO,OAAIA,IAAY6F,MAGtCnN,KAAI,SAAAqL,GACnC,OAAOyH,GAAkBzH,EAAG8G,MAIbiN,MAAK,SAACtT,EAAGuT,GAAJ,OACpBvT,EAAEgC,uBAAuBK,OAASkR,EAAEvR,uBAAuBK,QACpD,EACDrC,EAAEgC,uBAAuBK,OAASkR,EAAEvR,uBAAuBK,OAC3D,EACA,KAKQmR,CAAsBnN,MACzC,CAACA,IAGA,oCACI,kBAAC,EAAD,CAAalN,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYhB,UAAWD,EAAQjB,MAAOmC,QAAQ,MAA9C,2BAGA,kBAACyB,EAAA,EAAD,CAAMH,UAAU,MAAMvC,UAAWD,EAAQwS,SAAU2D,UAAW,8BAC1D,wBAAIlW,UAAWD,EAAQ4S,aACnB,wBAAI3S,UAAWD,EAAQ6S,IACnB,kBAACuD,GAAA,EAAD,kBAA0B9L,GAAoBe,OAAS,EAAvD,gBACA,kBAAC3I,EAAA,EAAD,MACC0Z,EAAelf,KAAI,SAAAqL,GAAC,OACjB,kBAAC,GAAD,CAAwB1F,IAAK0F,EAAEsC,SAAUqR,WAAY3T,aCnCrFkU,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IASMC,GAAwB,WAC1B,IAAMvJ,EAAM7P,MACPC,MACAwU,UAEL,OADYvU,GAAiBuU,WACf5E,GAiJHwJ,G,oDA7IX,WAAYzW,GAAmB,IAAD,+BAC1B,cAAMA,IAeV0W,mBAhB8B,IAmB9BC,kBAnB8B,wBAmBV,6BAAAnU,EAAA,sEACQ6H,GAAY,aADpB,cACVuM,EADU,OAEhB,EAAKC,SAASD,GAGTnU,OAAeC,SAASqJ,IACxBtJ,OAAeC,SAASqJ,GAAG,kBAAmB,EAAK+K,qBANxC,gBASmB,EAAKC,MAAMpU,KAAKoD,IAAI0E,IAAIC,iBAT3C,yBASAC,YATA,WASXkM,SATW,gBAahB,EAAKH,cAAgBpI,aAAY,WAC7B,EAAK0I,cAAc/f,MAAK,WACpB,EAAK4f,SAAS,CAAEjJ,WAAW,SAEhC,KAjBa,4CAnBU,EAuC9BqJ,qBAAuB,WACnB1I,cAAc,EAAKmI,eACnBvT,MAzC0B,EA4C9B+T,UAAY,WACR,MAAkC,SAA3B,EAAKH,MAAMpM,aA7CQ,EAiD9BmM,oBAAsB,WAElBrU,OAAOiB,SAASC,QAAO,IAnDG,EAsD9BqT,YAtD8B,wBAsDhB,6BAAAxU,EAAA,+EAGiB6E,GAAiB,EAAK0P,MAAMpU,KAAM,EAAKoU,MAAMhM,UAH9D,OAGA3B,EAHA,OAKN,EAAKyN,SAAS,CAAEM,cAAe/N,IALzB,gDAON,EAAKyN,SAAS,CAAEvT,MAAK,OACrBR,QAAQC,IAAR,MARM,yDAtDgB,EAkE9BT,aAlE8B,yCAkEf,WAAO8U,GAAP,UAAA5U,EAAA,6DACX,EAAKqU,SAAS,CAAEQ,cAAc,IADnB,kBAGD7L,GAAa4L,EAAc,EAAKL,MAAM/Q,SAAS,GAAI,EAAK+Q,MAAMhM,UAH7D,OAIPkL,KAAMqB,QAAN,8BAAqCF,EAAahV,OAAlD,oBAAoEgV,EAAajV,SAAjF,WAJO,gDAMP8T,KAAM3S,MAAM,KAAExD,YACdgD,QAAQC,IAAR,MAPO,QAUX,EAAK8T,SAAS,CAAEQ,cAAc,IAVnB,yDAlEe,sDAG1B,EAAKN,MAAQ,CACTpU,KAAM,GACNqD,SAAU,CAAC,IACX+E,SAAU,GACV6C,WAAW,EACXjD,YAAa,GACb0M,cAAc,EACdF,cAAe,GACf7T,MAAO,KACPiU,kBAAkB,GAZI,E,sDAgF1B,OACI,kBAAC,IAAD,KACI,kBAAChe,EAAD,MACA,kBAAC,IAAD,KArGgB,WAC5B,IAAM0T,EAAM7P,MACPC,MACAwU,UAGL,OAFc1U,GAAmB0U,WAEjB5E,EAgGCuK,GACG9S,KAAKqS,MAAMnJ,UACP,kBAAC,IAAD,CAAYmG,QAAQ,EAAMnO,QAAS,oDAEnC,oCACKlB,KAAKqS,MAAMM,aACR,kBAAC,IAAD,CACItD,OAAQrP,KAAKqS,MAAMM,aACnBzR,QAAS,8BAEb,KAEJ,kBAAC,EAAD,CAAajK,SAAS,MAClB,kBAAC,GAAD,CACIgW,QAASrU,GACToU,UAAWvU,GACX0L,SAAUnE,KAAKqS,MAAMI,gBAExBX,MAA2B9R,KAAKwS,YAC7B,oCACI,kBAAChb,EAAA,EAAD,MACA,kBAAC,GAAD,CACI2M,SAAUnE,KAAKqS,MAAMI,cACrBxU,KAAM+B,KAAKqS,MAAMpU,QAGzB,MAER,kBAAC,GAAD,CAAiBkG,SAAUnE,KAAKqS,MAAMI,gBACrCX,KAA0B,KACvB,kBAAC,GAAD,CAAc/V,MAAM,MAAMC,SAAUgE,KAAKpC,aAActI,YAzK7E,2sBA4KkB,kBAAC,GAAD,CACI2I,KAAM+B,KAAKqS,MAAMpU,KACjBqD,SAAUtB,KAAKqS,MAAM/Q,SACrB6C,SAAUnE,KAAKqS,MAAMI,iBAKjC,oCACI,kBAAC,EAAD,CAAaxb,SAAS,MAClB,kBAAC,GAAD,CACIgW,QAASrU,GACToU,UAAWvU,GACX0L,SAAUnE,KAAKqS,MAAMI,kBAKrC,kBAAC,EAAD,Y,GAxIUxG,IAAM8G,W,4OChCpCxB,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IAAM9e,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACToU,SAAU,CACNhT,MAAO,OACP2C,SAAU,OACV3D,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1C2E,SAAU,WACVwK,SAAU,OACV9T,OAAQ,KAGZ+T,YAAa,CACTpU,gBAAiB,WAErBqU,GAAI,CACArU,gBAAiB,UACjBsD,QAAS,GAEbgR,aAAc,CACVC,UAAW,UAEfC,QAAS,CACLxU,gBAAiBL,EAAMsU,QAAQC,WAAWlP,MAC1ChE,MAAO,QAEX0e,OAAQ,CACJ/e,QAAS,UAEbgf,aAAc,CACVnf,MAAOof,KAAM,KACbjW,SAAU,WACVkW,IAAK,GACLC,KAAM,GACNC,OAAQ,GAEZC,WAAY,CACRzL,UAAW,SACXiC,WAAY,SACZyJ,eAAgB,SAChB/f,OAAQ,QAEZggB,cAAe,CACXhgB,OAAQP,EAAMQ,QAAQ,SAuInBggB,GArHsB,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,YAAaC,EAA+D,EAA/DA,SAA+D,IAArDC,oBAAqD,MAAtC,QAAsC,EAA7B3N,EAA6B,EAA7BA,YAAajE,EAAgB,EAAhBA,UAC1FlN,EAAU/B,KACV8gB,EAAYC,mBAAQ,WACtB,OAAOC,KAA8B/R,KACtC,CAACA,IAJ4G,EAKtE9F,mBAAS,GAL6D,oBAKzG8X,EALyG,KAK1FC,EAL0F,OAMtE/X,mBAAS,GAN6D,oBAMzGgY,EANyG,KAM1FC,EAN0F,OAO1EjY,oBAAS,GAPiE,oBAOzGkY,EAPyG,KAO3FC,EAP2F,OAQpEnY,oBAAS,GAR2D,oBAQzGoY,EARyG,KAQxFC,EARwF,OASlFrY,mBAAS,IATyE,oBASzGsY,EATyG,KAShGC,EATgG,OAUpFvY,mBAAgC,IAVoD,oBAUzGwY,EAVyG,KAUjGC,EAViG,KAY1GC,EAAgBzM,sBAAW,wBAAC,+BAAArK,EAAA,6DAExB+W,EAAWnB,EAAY1hB,KAAI,SAAA8iB,GAE7B,OAAOf,KACHe,EAAEC,KACFD,EAAE3R,gBAAgB6R,QAClBF,EAAE9S,UAAUgT,QACZF,EAAErX,SAASrC,WACX0Z,EAAEnb,MAAMyB,YACVgG,QAGA6T,EAAiBJ,EAAS7iB,IAAT,yCAAa,WAAMY,GAAN,gBAAAkL,EAAA,sEAETiW,KAA0BJ,EAAU/gB,GAF3B,cAE1BsiB,EAF0B,yBAGzBA,GAHyB,2CAAb,uDAbO,KAmB9BP,EAnB8B,SAmBdtiB,QAAQ2Q,IAAIiS,GAnBE,6EAoB/B,CAACvB,EAAaC,IA6BjB,OA1BAjK,qBAAU,WACNkL,IAAgBnK,SAAQ,WACpB8J,GAAiB,QAEtB,CAACK,IAGJlL,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,iCAAA9L,EAAA,sEACLiW,KAA6BJ,EAAUE,GAAW,GAD7C,cACnBsB,EADmB,OACoD5U,QAAQ,GAC/E6U,EAAYC,WAAWF,GAAMG,eAAe,MAFzB,SAGFvB,KAAuCJ,GAHrC,cAGnB4B,EAHmB,OAIzBd,EAAWW,GACXnB,EAAiBsB,EAASvB,eAC1BG,EAAiBoB,EAASrB,eAC1BE,GAAgBC,GAAc,GAPL,UASnBO,IATmB,4CAU1B,KAGH,OAAO,WACH/K,cAAcF,OAKlB,6BACI,kBAAC5T,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,cACgBsc,GAGfW,GACG,kBAACze,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,IAAIC,MAAM,UAAhD,kBACoBid,EAAU,IACR,UAAjBZ,EAA2B,MAAQ,OAI5C,kBAACnc,EAAA,EAAD,CAAM1C,UAAWD,EAAQwS,SAAU2D,UAAW,8BAC1C,wBAAIlW,UAAWD,EAAQ4S,aACnB,wBAAI3S,UAAWD,EAAQ6S,IAClByM,GAAgBE,EACb,yBAAKvf,UAAWD,EAAQwe,YACpB,kBAACtI,GAAA,EAAD,OAEJ0I,EAAYvT,OAAS,EACrB,oCACI,kBAAC+K,GAAA,EAAD,sBAA8BwI,EAAYvT,OAA1C,UACA,kBAAC3I,EAAA,EAAD,MAECkc,EAAY1hB,KAAI,SAACQ,EAAG6K,GAAJ,OACb,yBAAK1F,IAAKnF,EAAE2Q,gBAAgB6R,SACxB,kBAAC,GAAD,CACIQ,UAAWhjB,EACXmhB,SAAUA,EACVC,aAAcA,EACd3N,YAAaA,EACb+N,cAAeA,EACfE,cAAeA,EACfuB,UAAWf,EAAOrX,UAMlC,oCACI,kBAAC6N,GAAA,EAAD,kCACA,kBAAC1T,EAAA,EAAD,MACA,yBAAKzC,UAAWD,EAAQwe,YACpB,kBAACvd,EAAA,EAAD,gEACA,kBAACA,EAAA,EAAD,kCAuB9B2f,GAAiC,SAAC,GAQjC,IAAD,EAPFF,EAOE,EAPFA,UACA7B,EAME,EANFA,SACAC,EAKE,EALFA,aACA3N,EAIE,EAJFA,YACA+N,EAGE,EAHFA,cACAE,EAEE,EAFFA,cACAuB,EACE,EADFA,UAEM3gB,EAAU/B,KAEV4iB,EAAU7B,mBAAQ,WACpB,OAAOC,KACHyB,EAAUT,KACVS,EAAUrS,gBAAgB6R,QAC1BQ,EAAUxT,UAAUgT,QACpBQ,EAAU/X,SAASrC,WACnBoa,EAAU7b,MAAMyB,YAClBgG,OACH,CAACoU,IAXF,EAc0CtZ,oBAAS,GAdnD,oBAcK0Z,EAdL,KAcqBC,EAdrB,OAgBsC3Z,oBAAS,GAhB/C,oBAgBK4Z,EAhBL,KAgBmBC,EAhBnB,OAiBoC7Z,mBAAmB,IAjBvD,oBAiBK8Z,EAjBL,KAiBkBC,EAjBlB,OAkBoC/Z,mBAAmB,IAlBvD,oBAkBKga,EAlBL,KAkBkBC,EAlBlB,OAqBsCja,oBAAS,GArB/C,oBAqBKka,EArBL,KAqBmBC,EArBnB,OAsBsCna,oBAAS,GAtB/C,oBAsBKoa,EAtBL,KAsBmBC,EAtBnB,KAsDIC,EAAc,kBAAMR,EAAY7V,OAAS+V,EAAY/V,QAAU+T,GAC/DuC,EAAc,kBAAMT,EAAY7V,OAAS+V,EAAY/V,QAAU6T,GAkBrEtK,qBAAU,WAEF+L,KAnDY,SAACiB,GACjB,IAAMC,EAAWD,EAAOE,QAAQC,SAChCZ,EAAeU,GACf,IAAMG,EAAUJ,EAAOI,QAAQD,SAC/BV,EAAeW,GAgDXC,CAAYtB,GAGRG,GAAgBC,GAAkB,GAClCJ,EAAUuB,SAAS7J,WAAa2I,GAAcC,GAAgB,MAEvE,CAACN,EAAWK,EAAcF,IAE7B,IAlOiBqB,EARGC,EAAaC,EA0O3BC,EAAa,WACf,OAAI3B,IAAce,IACP,kBAAC,KAAD,WACca,IAAd5B,EACA,kBAAC,KAAD,MACAA,IAAcgB,IACd,kBAAC,KAAD,MAEJ,kBAAC,KAAD,OAGX,OACI,oCACI,kBAAC,IAAD,CAAYpH,OAAQ+G,EAAc9G,aAAc,kBAAM+G,GAAgB,KAClE,kBAAC,IAAD,KACI,kBAAC,IAAD,wBACCL,EAAY7V,OAAS,EAClB6V,EAAYhkB,KAAI,SAAAslB,GAAS,OACrB,kBAAC,IAAD,CAAS3f,IAAK2f,GACV,kBAAC,IAAD,KAAWA,OAInB,kBAAC,IAAD,KACI,kBAAC,IAAD,wBAKhB,kBAAC,IAAD,CAAYjI,OAAQiH,EAAchH,aAAc,kBAAMiH,GAAgB,KAClE,kBAAC,IAAD,KACI,kBAAC,IAAD,uBACCL,EAAY/V,OAAS,EAClB+V,EAAYlkB,KAAI,SAAAslB,GAAS,OACrB,kBAAC,IAAD,CAAS3f,IAAK2f,GACV,kBAAC,IAAD,KAAWA,OAInB,kBAAC,IAAD,KACI,kBAAC,IAAD,uBAKhB,kBAAC1f,EAAA,EAAD,KACI,kBAAC8Y,GAAA,EAAD,KACI,kBAAC6G,GAAA,EAAD,KACsB,UAAjB3D,EAA2B,yBAAK3e,IAAKuiB,KAAWriB,IAAI,KAAQ,yBAAKF,IAAKwiB,KAAWtiB,IAAI,OAG9F,kBAAC2C,EAAA,EAAD,KACI,kBAAC/B,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,KAAKlC,MAAM,eAA9C,sBA9RIojB,EA+RkC1B,EAAUrS,gBAAgB6R,QA/R/CmC,EA+RwD,EA9RrFD,EAAI/W,QAAUgX,EACPD,EAGJA,EAAItV,MAAM,EAAGuV,GAAO,QA4RX,kBAACphB,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,KAAKjB,UAAWD,EAAQke,OAAQlf,MAAM,eAAzE,SACW,IACU,QAAhBmS,EAAA,UACQ1B,KAAUC,QAAQgR,EAAU7b,MAAMyB,WAAY,SADtD,mBAEQsc,KAA6BlC,EAAU7b,MAAMyB,YAFrD,SAFL,QAzRC6b,EA8RoBzB,EAAU/X,SAASwR,WA5RjDgI,EADW,OA6RkD7b,WALpD,SAQCqa,GACG,oCACI,6BACA,kBAAC1f,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,KAAKjB,UAAWD,EAAQke,OAAQlf,MAAM,eAAzE,aACeigB,KAAsB,IAAI7T,KAAUuV,EAAU/X,OAAOtC,aAAamF,UAAW,IACtE,UAAjBqT,EAA2B,MAAQ,QAKhD,6BACA,kBAAC7d,EAAA,EAAD,CAAYuB,UAAU,IAAItB,QAAQ,QAAQjB,UAAWD,EAAQke,OAAQlf,MAAM,eAA3E,aACe6hB,EAAQX,SAEvB,6BACA,kBAACjf,EAAA,EAAD,CACIuB,UAAU,IACVtB,QAAQ,QACRjB,UAAWD,EAAQke,OACnBlf,MAAO2hB,EAAY,UAAY,SAE9BA,EACKA,EAAUuB,SAAS7J,UACf,mBACA,gCACJ,uBAETsI,GACG,oCACI,kBAACrL,GAAA,EAAD,CAAYtW,MAAM,UAAUwD,UAAU,OAAOiG,QAAS,kBAAM8Y,GAAgB,KACxE,kBAACsB,GAAA,EAAD,CACI7jB,MAAM,YACN8jB,aAAc5B,EAAY7V,OAC1B0X,UAAQ,EACRC,IAAK,IACL/iB,UAAWD,EAAQ0e,cACnBuE,aAAc,CACVC,SAAU,MACVC,WAAY,SAGhB,kBAAC,KAAD,QAIR,kBAAC7N,GAAA,EAAD,CAAYtW,MAAM,UAAUwD,UAAU,OAAOiG,QAAS,kBAAMgZ,GAAgB,KACxE,kBAACoB,GAAA,EAAD,CACI7jB,MAAM,YACN8jB,aAAc1B,EAAY/V,OAC1B0X,UAAQ,EACRC,IAAK,IACL/iB,UAAWD,EAAQ0e,cACnBuE,aAAc,CACVC,SAAU,MACVC,WAAY,SAGhB,kBAAC,KAAD,UAOpB,kBAAChO,GAAA,EAAD,KACI,6BACI,kBAACG,GAAA,EAAD,CACIC,KAAK,MACLF,aAAW,UACX5M,QAAS,WA/JR,IAAC3K,OAgKgBykB,IAAd5B,GAA4BgB,KAhK9B7jB,EAkKyB+iB,EAjK3Ca,KAAiBC,MACjBV,GAAgB,GAChBhC,KACuBJ,EAAU/gB,GAC5BL,MAAK,SAAAuP,GACF1D,QAAQC,IAAI,kCAAoCyD,EAAIkT,YAEvDxK,OAAM,SAAAhY,GACH+e,KAAM3S,MAAMpM,GACZ4L,QAAQC,IAAI7L,QApCL,SAAC0lB,GACpBrC,GAAkB,GAClBJ,OAAY4B,EACZ,IAAMc,EAAQpE,KACVmE,EAAMnD,KACNmD,EAAM/U,gBAAgB6R,QACtBkD,EAAMlW,UAAUgT,QAChBkD,EAAMza,SAASrC,WACf8c,EAAMve,MAAMyB,YAEVgd,EAASrE,KAAyBoE,EAAM/W,MAE9C2S,KAC0BJ,EAAUwE,EAAcC,GAC7C7lB,MAAK,SAAAuP,GACF1D,QAAQC,IAAI,aAAe8Z,EAAM/W,KAAO,gCAAkCU,EAAIkT,YAEjFxK,OAAM,SAAAhY,GACH+e,KAAM3S,MAAMpM,GACZ4L,QAAQC,IAAI7L,MAwKU6lB,CAAe7C,IAGzB1hB,MAAM,UACNsG,SACIwb,IAAc,UACdH,SADc,aACd,EAAWuB,SAAS7J,YACpB2I,GACCL,IAAce,KAGnB,kBAACY,EAAD,OAEHxB,GAAkBE,EACf,kBAAC9K,GAAA,EAAD,CAAkByF,KAAM,GAAI1b,UAAWD,EAAQme,eAC/C,QAIhB,kBAACzb,EAAA,EAAD,QC3aZ+Z,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,I,IA8OAyG,G,oDA1OX,WAAYhd,GAAY,IAAD,+BACnB,cAAMA,IAqBV0W,mBAtBuB,IAyBvBC,kBAzBuB,wBAyBH,mCAAAnU,EAAA,+EAEY6H,GAAY,cAFxB,cAENuM,EAFM,OAGZ,EAAKC,SAASD,GAHF,SAIY6B,KAA+BA,KAAwBwE,OAJnE,cAINC,EAJM,OAKZ,EAAKrG,SAAS,CAAEwB,SAAU6E,IAGrBza,OAAeC,SAASqJ,IACxBtJ,OAAeC,SAASqJ,GAAG,kBAAmB,EAAK+K,qBAT5C,iBAYuB,EAAKC,MAAMpU,KAAKoD,IAAI0E,IAAIC,iBAZ/C,iCAYIC,YAZJ,WAYPkM,SAZO,0BAeO7L,GAAmB,EAAK+L,MAAMhM,UAfrC,eAeNoS,EAfM,iBAgBS9R,GAAqB,EAAK0L,MAAMhM,UAhBzC,QAgBNqS,EAhBM,OAkBZ,EAAKvG,SAAS,CAAEwG,YAAaF,EAAMG,cAAeF,IAlBtC,kDAoBZ,EAAKvG,SAAS,CAAEvT,MAAM,EAAD,KACrBR,QAAQC,IAAR,MArBY,QAwBhB,EAAK2T,cAAgBpI,aAAY,WAC7B,EAAK0I,cAAc/f,MAAK,WACpB,EAAK4f,SAAS,CAAEjJ,WAAW,SAEhC,KA5Ba,0DAzBG,EAwDvBsJ,UAAY,WACR,MAAkC,SAA3B,EAAKH,MAAMpM,aAzDC,EA4DvBsM,qBAAuB,WACnB1I,cAAc,EAAKmI,eACnBvT,MA9DmB,EAkEvB2T,oBAAsB,WAElBrU,OAAOiB,SAASC,QAAO,IApEJ,EAuEvBqT,YAvEuB,wBAuET,+BAAAxU,EAAA,+EAGkB6E,GAAiB,EAAK0P,MAAMpU,KAAM,EAAKoU,MAAMhM,UAH/D,OAGAwS,EAHA,OAKF,EAAKxG,MAAMrQ,YACL8W,EAAa,EAAKC,iBACxB,EAAK5G,SAAS,CAAE6G,WAAYF,KAGhC,EAAK3G,SAAS,CAAEM,cAAeoG,IAVzB,gDAYN,EAAK1G,SAAS,CAAEvT,MAAK,OACrBR,QAAQC,IAAR,MAbM,yDAvES,EAwFvB4a,aAAe,WACN,EAAK5G,MAAMrQ,WACZf,GACI,EAAKoR,MAAMpU,KADN,kJAIHib,eAAyB,KAE1B3mB,MAAK,SAAA4mB,GACF/a,QAAQC,IAAI,WAAa8a,GACzB,EAAKhH,SAAS,CAAEnQ,UAAWmX,OAE9B3O,OAAM,SAAAhY,GACH+e,KAAM3S,MAAMpM,EAAE0O,QAAQ9F,YACtBgD,QAAQC,IAAI7L,OAtGL,EA8GvBumB,eAAiB,WAab,OAZkB,EAAK1G,MAAMI,cAAcrV,QAAO,SAAAC,GAAC,OAAIA,EAAEyG,YAAc,EAAKuO,MAAM/Q,SAAS,MAChEtP,KAAI,SAAA4R,GAC3B,IAAMwV,EAASrF,KACXsF,KAAaC,SACb1V,EAAKT,gBACL,EAAKkP,MAAMrQ,UACX,EAAKuX,gBAAgB3V,EAAKnG,UAAUrC,WACpCwI,EAAKvC,IAAIjG,YAEb,OAAO2Y,KAA4BqF,OAxHpB,EA8HvBG,gBAAkB,SAAC9b,GAEf,OADkB,MACXA,GAhIY,EAmIvBG,aAnIuB,yCAmIR,WAAO8U,GAAP,gBAAA5U,EAAA,yDACX,EAAKqU,SAAS,CAAEQ,cAAc,IADnB,SAGF,EAAKN,MAAMrQ,UAHT,gCAIsBf,GACrB,EAAKoR,MAAMpU,KADmB,kJAIhCib,eAAyB,KARxB,OAIGM,EAJH,OAWH,EAAKrH,SAAS,CAAEnQ,UAAWwX,IAXxB,uBAcD1S,GAAa4L,EAAc,EAAKL,MAAM/Q,SAAS,GAAI,EAAK+Q,MAAMhM,UAd7D,OAePkL,KAAMqB,QAAN,8BAAqCF,EAAahV,OAAlD,oBAAoEgV,EAAajV,SAAjF,WAfO,kDAiBP8T,KAAM3S,MAAM,KAAEsC,QAAQ9F,YACtBgD,QAAQC,IAAR,MAlBO,QAqBX,EAAK8T,SAAS,CAAEQ,cAAc,IArBnB,0DAnIQ,sDAGnB,EAAKN,MAAQ,CACTpU,KAAM,GACN0V,SAAU,GACVrS,SAAU,CAAC,IACX+E,SAAU,GACV6C,WAAW,EACXjD,YAAa,GACb0M,cAAc,EACdF,cAAe,GACfuG,WAAY,GACZpa,MAAO,KACPiU,kBAAkB,EAClB7Q,UAAW,GACX4W,cAAe,IACfD,YAAa,KAjBE,E,sDA2Jb,IAAD,OACL,OACI,kBAAC,IAAD,KACI,kBAAC9jB,EAAD,MACA,kBAAC,IAAD,KACI,oCACKmL,KAAKqS,MAAMnJ,UACR,kBAAC,IAAD,CAAYmG,QAAQ,EAAMnO,QAAS,oDAEnC,oCACKlB,KAAKqS,MAAMM,cACR,kBAAC,IAAD,CACItD,OAAQrP,KAAKqS,MAAMM,aACnBzR,QAAS,8BAIhBlB,KAAKwS,YACF,kBAAC,EAAD,CAAavb,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,qEAKJ,oCACI,kBAAC,EAAD,CAAaN,SAAS,MAClB,kBAAC,GAAD,CACI+V,UAAWtU,IAAO+gB,KAAKC,SAAS1Z,KAAKqS,MAAMuG,gBAC3C3L,QAASvU,IAAO+gB,KAAKC,SAAS1Z,KAAKqS,MAAMsG,cACzCxU,SAAUnE,KAAKqS,MAAMI,iBAI7B,kBAAC,GAAD,CACI1W,MAAM,MACNC,SAAUgE,KAAKpC,aACftI,YAtO9B,ysBAuO8B2G,OAAK,IAGT,kBAAC,EAAD,CAAahF,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,6BAGCyI,KAAKqS,MAAMrQ,UACR,kBAAC,GAAD,CACI0R,YAAa1T,KAAKqS,MAAM2G,WACxBrF,SAAU3T,KAAKqS,MAAMsB,SACrB1N,YAAY,MACZ2N,aAAa,QACb5R,UAAWhC,KAAKqS,MAAMrQ,YAG1B,oCACI,kBAAChL,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWsG,OAAO,QAAQC,QAAS,kBAAM,EAAK0b,iBAA9C,gCAQhB,kBAAC,GAAD,CACIhb,KAAM+B,KAAKqS,MAAMpU,KACjBqD,SAAUtB,KAAKqS,MAAM/Q,SACrB6C,SAAUnE,KAAKqS,MAAMI,mBAO7C,kBAAC,EAAD,Y,GArOWxG,IAAM8G,W,iCCRtB4G,GAlDyB,SAAC,GAAsC,IAApC3M,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,QAAS2M,EAAe,EAAfA,SACrDrR,EAAM7P,MAASC,MACfkhB,EAAwB1R,uBAC1B,SAAC2R,GACOF,GAAUA,EAASE,KAE3B,CAACF,IAGCtM,EAAWwG,mBAAQ,WACrB,IAAM5G,EAAYxU,IAAOsU,GAAWG,UAAY5E,EAAI4E,UAGhDC,EAAa3P,mBAASuP,EAAUK,KAAK9E,IAGrC2E,EAAY,IACZE,EAAa3P,mBAASwP,EAAQI,KAAK9E,KAGvC,IAAIwR,EAAwB,CACxBvR,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GAGPL,EAAU5P,IAAOuU,GAASE,UAAY5E,EAAI4E,UAWhD,OATI7E,EAAU,IACVyR,EAAY,CACRvR,KAAM4E,EAAW5E,OACjBC,MAAO2E,EAAW3E,QAClBC,QAAS0E,EAAW1E,UACpBC,QAASyE,EAAWzE,YAG5BkR,EAAsBvR,EAAU,GACzByR,IACR,CAACxR,EAAKyE,EAAWC,EAAS4M,IAE7B,OACI,oCACI,2BACKvM,EAAS9E,KADd,SAC0B8E,EAAS7E,MADnC,UACiD6E,EAAS5E,QAD1D,YAC4E4E,EAAS3E,QADrF,cC0GGqR,GAvHqB,SAAC,GAA4D,IAA1D7V,EAAyD,EAAzDA,SAAU8V,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAAsB,EACtDje,mBAAS,IAD6C,oBACrFke,EADqF,KACxEC,EADwE,OAE1Dne,oBAAS,GAFiD,oBAErFoe,EAFqF,KAE1EC,EAF0E,OAG1Dre,oBAAS,GAHiD,oBAGrF0M,EAHqF,KAG1E4R,EAH0E,KAStFC,EAAatS,uBACf,SAACvE,GACG,IAAM8W,EAAY9W,EAAK+W,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyBZ,KAC3E,OAAIQ,EAAkBhD,KAA6BgD,EAAU/gB,MAAM4G,WAAWA,UAClE,MAEhB,CAAC2Z,IAmBL,OAhBAxQ,qBAAU,WACN,GAAwB,IAApBvF,EAAShE,OACTka,EAAe,QACZ,CACH,IAAIU,EAAW,IAAI7a,KAAU,GAC7BiE,EAAS6W,SAAQ,SAAA3d,GACb,IAAMqd,EAAYrd,EAAEsd,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyBZ,KACpEQ,IACAK,EAAWA,EAAS3a,KAAK,IAAIF,KAAUwa,EAAU/gB,MAAM4G,gBAI/D8Z,EAAe3C,KAA6BqD,GAAUxa,cAE3D,CAAC4D,EAAUiW,EAAaF,IAGvB,oCACI,kBAAC,IAAD,CAAU7K,OAAQiL,EAAWhL,aAAc,kBAAMiL,GAAa,KAC1D,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,6BACA,kBAAC,IAAD,CAAYvlB,KAAK,OACb,kBAAC,IAAD,CAAWuI,QAAS,kBAAMgd,GAAa,KAAvC,YAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,4CACA,kBAAC,IAAD,uBAEJ,oCACKpW,EAAShE,OAAS,GAAKia,EACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKjW,EAASnS,KAAI,SAAAQ,GAAC,OACX,kBAAC,IAAD,CAASmF,IAAKnF,EAAEyoB,MACZ,kBAAC,IAAD,KACI,iDAAuBzoB,EAAEyoB,MACzB,8CAAoBR,EAAWjoB,GAA/B,QACCA,EAAE0oB,OAAOC,UACN,oCACI,kDAAwB3oB,EAAE0oB,OAAOE,cAChCxS,EACG,qDAEA,oCACI,kBAAC,GAAD,CACIoE,UAAWtU,IAAO+gB,KAAKjnB,EAAE0oB,OAAOG,YAChCpO,QAASvU,IACJ+gB,KAAKjnB,EAAE0oB,OAAOG,YACdC,IAAInB,EAAiB,QAC1BP,SAAU,SAAC2B,GAAD,OAAgBf,EAAae,MAE3C,6CAKZ,yDAGPtB,GACG,kBAAC,IAAD,CACIhf,KAAK,UACLjG,KAAK,MACLuI,QAAS,kBAhFnCqG,EAgFsDpR,OA/EpEynB,GAAUA,EAASrW,IADN,IAACA,GAiF0BxJ,UAAWwO,GAJf,gBAcpB,kBAAC,IAAD,oEAMhB,kBAACsB,GAAA,EAAD,CAASrW,MAAM,oBAAoBsW,aAAW,eAC1C,kBAAC,IAAD,CAAS5M,QAAS,kBAAMgd,GAAa,KACjC,kBAAC,IAAD,CAAS/kB,KAAM4kB,EAAcxW,KAAOF,KAAM5P,MAAOsmB,EAAc,UAAY,YAC1EA,EACG,kBAAC,IAAD,KAAWA,EAAX,eAEA,oCACI,kBAAC,IAAD,iCACA,kBAAC,IAAD,CAAYoB,KAAK,iB,sBC3HvCzoB,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACTuoB,WAAY,CACR7kB,QAAS3D,EAAMQ,QAAQ,EAAG,GAC1BqW,WAAY,UAEhB4R,YAAa,CACT5R,WAAY,SACZ7V,QAAS,OACTsf,eAAgB,SAChB5f,OAAQ,QAEZuN,QAAS,CACLya,UAAW,aAEfC,SAAU,CACNhoB,cAAe,eAyDZioB,GApDyB,SAAC,GAAgD,IAA9CzN,EAA6C,EAA7CA,OAAQlN,EAAqC,EAArCA,QAAS4a,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,OACjEjnB,EAAU/B,KADoE,EAE9CmJ,oBAAS,GAFqC,oBAE7E8f,EAF6E,KAE9DC,EAF8D,KAcpF,OACI,oCACI,kBAAC1jB,EAAA,EAAD,CAAOC,UAAW,EAAGzD,UAAWD,EAAQ2mB,YACpC,kBAAC1lB,EAAA,EAAD,CAAYuB,UAAU,KAAKtB,QAAQ,MAC9BoY,EADL,KAGA,yBAAKrZ,UAAWD,EAAQ4mB,aACnBK,EACG,0BAAMhnB,UAAWD,EAAQoM,SAAUA,GAEnC,kBAACnL,EAAA,EAAD,CACIuB,UAAU,KACVtB,QAAS8lB,GAAgC,KACzC/mB,UAAWD,EAAQoM,SAElBA,GAIT,yBAAKnM,UAAWD,EAAQ8mB,UACpB,kBAAC1R,GAAA,EAAD,CAASrW,MAAM,eAAesW,aAAW,QACrC,kBAACC,GAAA,EAAD,CAAYtW,MAAM,UAAUwD,UAAU,OAAOiG,QAAS,WA9B1E2e,UAAUC,UAAUC,UAAUlb,GAAS3O,MACnC,WACI0pB,GAAa,MAEjB,SAASvR,GACLtM,QAAQQ,MAAM,+BAAgC8L,QA0B9B,kBAAC,KAAD,WAMpB,kBAAC,IAAD,CACI2E,OAAQ2M,EACR1M,aAAc,kBAAM2M,GAAa,IACjC/a,QAAQ,8BACRzD,SAAU,QCxEpB1K,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACTmpB,QAAS,CACLC,UAAW,aACXxhB,WAAY,OACZC,YAAa,OACbnH,cAAe,SACf2oB,UAAW,SACX7oB,UAAW,OACXuD,SAAU,IACVulB,UAAW,SAEfC,cAAe,CACXH,UAAW,aACXxhB,WAAY,OACZC,YAAa,OACbnH,cAAe,SACf2oB,UAAW,SACXC,UAAW,SAEfE,SAAU,CACNzf,SAAU,WACVrG,QAAS3D,EAAMQ,QAAQ,IAE3BkpB,WAAW,eACN1pB,EAAMiB,YAAYC,GAAG,MAAQ,CAC1B8I,SAAU,WACV2f,MAAO,EACPzJ,IAAK,SA4DN0J,GAtD2B,SAAC,GAAsD,IAApDvjB,EAAmD,EAAnDA,QAAS6K,EAA0C,EAA1CA,SAAU8V,EAAgC,EAAhCA,SAAUE,EAAsB,EAAtBA,gBAChErlB,EAAU/B,KAD4E,EAEjEmJ,mBAAS,IAFwD,oBAErF4gB,EAFqF,KAE3EC,EAF2E,OAGxD7gB,oBAAS,GAH+C,oBAGrF8gB,EAHqF,KAGxEC,EAHwE,KAW5F,OANAvT,qBAAU,WACNwT,aAAY5jB,GAAS/G,MAAK,SAAA4qB,GACtBJ,EAAOI,QAEZ,CAAC7jB,IAGA,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBACIrE,IAAK6nB,EACL/nB,UAAWD,EAAQunB,QACnBlnB,IAAI,GACJioB,MAAOJ,EAAc,GAAK,CAAE/oB,QAAS,QACrCopB,OAAQ,kBAAMJ,GAAa,MAE9BD,EAAc,KACX,kBAAC,IAAD,CAAWjoB,UAAWD,EAAQ2nB,eAC1B,kBAAC,IAAD,CAAiBa,UAAQ,KAIjC,kBAAC,IAAD,qEACA,kBAACpmB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAAC0S,GAAI,GAAIwT,GAAI,GACnB,kBAAC,IAAD,6BAEJ,kBAACrmB,EAAA,EAAD,CAAMG,MAAI,EAAC0S,GAAI,GAAIwT,GAAI,EAAGxoB,UAAWD,EAAQ4nB,UACzC,yBAAK3nB,UAAWD,EAAQ6nB,YACpB,kBAAC,GAAD,CACIxY,SAAUA,EACV+V,cAAe5gB,EACf2gB,SAAUA,EACVE,gBAAiBA,QAOrC,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAgB/L,OAAO,eAAelN,QAAS5H,Q,mBC3D7DvG,GAAYC,aAAW,kBACzBE,YAAa,CACT2E,OAAQ,CACJgQ,UAAW,eAKvB0J,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAOf,IAmZe2L,GAnZ0B,SAAC,GAA+B,IAA7BvX,EAA4B,EAA5BA,YAAa0N,EAAe,EAAfA,SAC/C7e,EAAU/B,KAEV0qB,EAAiBxX,IAAgByX,YAAmBC,QAAU7jB,GAAeC,GAHf,EAKzCmC,mBAAS,IALgC,oBAK7D0hB,EAL6D,KAKnDC,EALmD,OAMjC3hB,mBAAS,IANwB,oBAM7D4hB,EAN6D,KAM/CC,EAN+C,OAQhC7hB,mBAAqB,CAAExC,MAAO,GAAIC,MAAO,EAAGC,KAAM,IARlB,oBAQ7D0C,EAR6D,KAQ/CC,EAR+C,OASrCL,mBAAS,IAT4B,oBAS7D8hB,EAT6D,KAShDC,EATgD,OAUlC/hB,mBAAS,IAVyB,oBAU7D8F,EAV6D,KAUlDiX,EAVkD,OAW1B/c,mBAAqB,IAXK,oBAW7DgiB,EAX6D,KAW9CC,EAX8C,OAYhBjiB,mBAAuC,IAZvB,oBAY7DkiB,EAZ6D,KAYzCC,EAZyC,OAapCniB,mBAAkD,CAC9EoiB,WAAW,EACXpd,QAAS,KAfuD,oBAa7DgI,EAb6D,KAalDC,EAbkD,OAoBpCjN,qBApBoC,oBAoB7DqiB,EApB6D,KAoBnDC,EApBmD,OAqBtBtiB,qBArBsB,oBAqB7DuiB,EArB6D,KAqB5CC,EArB4C,OAsB1BxiB,mBAAS,IAtBiB,oBAsB7DyiB,EAtB6D,KAsB9CC,GAtB8C,QAuB1B1iB,mBAAS,IAvBiB,sBAuB7D2iB,GAvB6D,MAuB9CC,GAvB8C,SAwBlC5iB,oBAAS,GAxByB,sBAwB7Doe,GAxB6D,MAwBlDC,GAxBkD,SA0BlCre,mBAAS,KA1ByB,sBA0B7D6iB,GA1B6D,MA0BlDC,GA1BkD,MA6B9DC,GAAWnL,mBAAQ,WACrB,OAAOoL,eAA2B,KACnC,IAEGC,GAAahX,uBACf,SAACiX,EAAaC,GAOV,GAAsB,qBAAXA,IAA2BC,MAAM5F,SAAS0F,MALnCG,EAKqDH,EAJ/C,IAAII,OAAO,qBACZC,KAAKF,IAGiD,CACzE,IAAMG,EAAWC,KAAoBrjB,EAAa3C,MAAOqI,EAAWiE,GAC9D2Z,EAAOlG,SAAS0F,GAChBS,EAAWR,EAAO1E,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyB4E,EAASpmB,WACrF,MAAwB,qBAAbumB,IAGJA,EAASlmB,MAAQimB,EAAO,GAAc,IAATA,GAEpC,OAAO,EAdX,IAAkBL,IAiBtB,CAACvd,EAAW1F,EAAa3C,MAAOsM,IAG9B6Z,GAAUhM,mBAAQ,WACpB,IACI,GAAwB,qBAAbyK,IAA6Be,MAAM5F,SAASqF,MAAeI,GAAWJ,GAAWR,GAAW,CACnG,IAAMqB,EAAOlG,SAASqF,IAChBgB,EAAWJ,KAAyBpB,EAAUvc,EAAW1F,EAAa3C,MAAOsM,EAAa2Z,GAGhG,OAFArF,IAAa,GACbmE,EAAmBqB,EAASC,kBACrBD,EAASE,eAEtB,MAAOvV,GACLtM,QAAQC,IAAIqM,GACZ6G,KAAM3S,MAAM8L,EAAIxJ,SAEpB,MAAO,QACR,CAAC6d,GAAW/c,EAAW1F,EAAa3C,MAAOsM,EAAasY,EAAUY,KA4C/De,GAAa,yCAAG,mCAAApiB,EAAA,0DACd2gB,EADc,6BAGY,KAAlBE,EAHM,sBAIA,IAAIlsB,MAAM,qCAJV,cAMV0W,EAAW,CAAEmV,WAAW,EAAMpd,QAAS,uCACjCif,EAAaR,KACf3d,EACA2d,KAA4BrjB,EAAa3C,OACzCsM,GAGEma,EAAmBT,KACrBlB,EACAE,EACAwB,EACAla,GAGJ7H,QAAQC,IAAI,4BAA8B+hB,GAE1CtB,GAAiBsB,GAEXC,EAAOpa,IAAgByX,YAAmBC,QAAU,UAAY,UAxB5D,UAyBegC,KAA6BS,EAAkBC,GAzB9D,QAyBJC,EAzBI,OA0BVliB,QAAQC,IAAI,gBAAkBiiB,GAC9B/O,KAAMqB,QAAQ,4BAA8B0N,GA3BlC,kDA6BV/O,KAAM3S,MAAM,KAAEsC,SACd9C,QAAQC,IAAR,MA9BU,yBAgCV8K,EAAW,CAAEmV,WAAW,EAAOpd,QAAS,KAhC9B,6EAAH,qDAsCbqf,GAAqB,WACvB/B,OAAYnH,GACZqH,OAAmBrH,GACnBuH,GAAiB,IACjBI,GAAa,KACbF,GAAiB,IACjBvE,IAAa,IAGXE,GAAatS,uBAAY,WAC3B,GAAIoW,EAAU,CACV,IAAM7D,EAAY6D,EAAS5D,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyBkD,KAC/E,GAAItD,EAAW,OAAOiF,KAAyBjF,EAAU/gB,MAAM4G,WAAWA,UAE9E,MAAO,MACR,CAACge,EAAUP,IAERwC,GAAsBrY,sBAAW,wBAAC,+BAAArK,EAAA,sDAC9B2iB,EAAiBxa,IAAgByX,YAAmBC,QAAU,UAAY,UAE1E+C,EAA0B,GAGhCjD,EAAezrB,IAAf,yCAAmB,WAAO2uB,EAAKrV,GAAZ,sBAAAxN,EAAA,6DACT8iB,EAAajB,KAAoBgB,EAAIhnB,MAAOqI,EAAWiE,GAAa3M,QAD3D,SAKKqmB,KAA6BiB,EAAYH,GAL9C,OAKT1gB,EALS,OAMT8gB,EAAc,MAAeF,EAAIhnB,MAEjCqf,EAAajZ,EAAM/N,KAAI,SAAAqL,GACzB,IAAMyjB,EAAUzjB,EAAEsd,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyB8F,KAEtE,GAAIE,EACA,OAAO/M,KACHsF,KAAa0H,QACb,KAAO1jB,EAAE4d,KACT,KAAOjZ,EACP6e,EAAYzlB,WACZ0lB,EAAQnnB,MAAMyB,YAGlB,MAAM,IAAI3I,MAAM,kDAKpBurB,IAAgB4C,GAAcD,EAAIhnB,QAAU2C,EAAa3C,OACzD0kB,EAAsBte,GAK1BiZ,EAAWgC,SAAQ,SAAAxoB,GAEf,IAAMwuB,EAAejN,KAA4BvhB,GAEjDkuB,EAAYvb,KAAK6b,MAKjBN,EAAYvgB,OAAS+d,EAAc/d,QAAUmL,IAAUmS,EAAetd,OAAS,GAC/Ege,EAAiBuC,GAzCN,2CAAnB,yDANoC,2CAkDrC,CAAC1e,EAAWiE,EAAa+X,EAAaP,EAAgBS,EAAe5hB,EAAa3C,QA4BrF,OA1BA+P,qBAAU,WAEN,GAAI1H,GAAoC,IAAvB1F,EAAa3C,MAAa,CACvC,IAAMwmB,EAAaR,KAAoBrjB,EAAa3C,MAAOqI,EAAWiE,GACtEgY,EAAQkC,EAAW7mB,SACnBknB,KAAsBhW,OAAM,SAAAhY,GACxB+e,KAAM3S,MAAMpM,SAGrB,CAACguB,GAAqBlkB,EAAa3C,MAAOsM,EAAajE,IAG1D0H,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,uBAAA9L,EAAA,sDACzBkE,GACIwe,KAAsBhW,OAAM,SAAAhY,GACxB+e,KAAM3S,MAAMpM,MAHK,2CAK1B,KAGH,OAAO,WACHqX,cAAcF,OAKlB,6BACKqU,GACG,kBAAC,GAAD,CACI1kB,QAAS0kB,EACT7Z,SAAUia,EACVnE,SAnJO,SAACrW,GAEpBob,IAAyB,GAAXpb,EAAKwb,KAAWhkB,YAC9BojB,EAAY5a,IAiJAuW,gBAAiB7d,EAAa3C,QAItC,kBAAC,IAAD,CAAY0V,OAAQnG,EAAUoV,UAAWpd,QAASgI,EAAUhI,UAC5D,kBAAC,IAAD,CAAUmO,OAAQiL,GAAWhL,aAAc,kBAAMiR,OAC7C,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,+BACA,kBAAC,IAAD,CAAYvrB,KAAK,OACb,kBAAC,IAAD,CAAWuI,QAAS,kBAAMgjB,OAA1B,YAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,mFAGA,kBAAC,IAAD,qBAEJ,kBAAC,IAAD,KACKhC,GACG,oCACI,kBAAC,IAAD,KACI,uCAAaA,EAAStD,MACtB,0CAAgBR,KAAhB,SAEHoE,GACG,kBAAC,GAAD,CAAgBzQ,OAAO,4BAA4BlN,QAAS2d,GAAe9C,QAAM,IAEjF,oCACI,kBAAC,GAAD,CAAgB3N,OAAO,WAAWlN,QAAS4e,GAAS/D,QAAM,IAC1D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU9e,SAAS,WAAnB,4BAC6B,kBAAC,IAAD,CAASnJ,MAAM,UAAf,MAE7B,kBAAC,IAAD,CACIoJ,YAAY,wBACZvD,MAAOglB,EACP/iB,YAAa,SAAApJ,GAAC,OAAIosB,GAAiBpsB,EAAEyuB,OAAOtnB,WAGpD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUsD,SAAS,YAAnB,mBACA,kBAAC,IAAD,CACIC,YAAaqhB,EAASa,IAAIhkB,WAAa,YACvC+B,WAAY,SAAA3K,GACR,IAAM0uB,EAAa1uB,EAAE8D,OAA4BqD,MACjDqlB,GAAakC,IAEjBptB,MAAOqrB,GAAWJ,GAAWR,GAAY,UAAY,aAMrE,kBAAC,IAAD,CACInkB,WAAYykB,KAAkBM,GAAWJ,GAAWR,GACpDhhB,QAAS,kBAAM2iB,OAFnB,4BAYpB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,uHAIA,kBAAC,IAAD,wBAGJ,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAgB9R,OAAO,UAAUlN,QAASye,KAAkBV,KAC5D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUhiB,SAAS,WAAnB,mBACA,kBAAC,IAAD,CACItD,MAAOmkB,EACP5gB,YAAY,oBACZtB,YAAa,SAAApJ,GAAC,OAAIurB,EAAWvrB,EAAEyuB,OAAOtnB,WAI9C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIuD,YAAY,8CACZvD,MAAOikB,EACPhiB,YAAa,SAAApJ,GAAC,OAAIqrB,EAAOrrB,EAAEyuB,OAAOtnB,WAG1C,kBAAC,IAAD,CAAUsD,SAAS,WAAnB,iBACA,kBAAC,IAAD,KACI,kBAAC,GAAD,CACIzB,SAAUzB,GACV8B,SAAU,SAACrJ,GAAD,OACN+J,EACIxC,GAAkBqD,QACd,SAAAC,GAAC,OAAIA,EAAE1D,QAAYnH,EAAE8D,OAAOqD,SAC9B,OAId,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK2C,EAAa3C,MACR,eAAiB2C,EAAa1C,KAAO,IACrC,gCAIlB,yBAAK7E,UAAWD,EAAQ+C,QACpB,kBAAC,IAAD,CAAW0F,QA3Sd,WACb,IACI,IAAKjB,IAAiBwhB,IAAiBF,EAAU,MAAM,IAAInrB,MAAM,iCAEjE,IAAKktB,KAA2B7B,EAAc7X,GAC1C,MAAM,IAAIxT,MAAM,sCACpB,IAAM0uB,EAAOxB,KAAkBV,GAE/B,IAAImC,UAAwBD,EAAMrD,EAAcF,GAc5C,MAAM,IAAInrB,MAAM,qBAbhB,IAAM0mB,EAAMwG,KAAqB7B,EAAcF,EAAUuD,EAAMlb,GAC/D7H,QAAQC,IAAI,CAAE8iB,OAAMrD,eAAcF,WAAUzE,QAC5CF,EAAaE,GAEb,IAAMkI,EAAO1B,KAAoBrjB,EAAa3C,MAAOwf,EAAKlT,GAE1D,GAA4B,kBAAjBob,EAAK/nB,QAGZ,MAAM,IAAI7G,MAAM,8BAFhBwrB,EAAQoD,EAAK/nB,SAIjBiY,KAAMqB,QAAQ,oCAMlBrB,KAAMqB,QAAQ,oCAChB,MAAOpgB,GACL4L,QAAQC,IAAI7L,GACZ+e,KAAM3S,MAAMpM,EAAE0O,WA8Q4B9G,WAAY4H,GAA1C,2BAMZ,kBAAC,EAAD,CAAa/K,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,6BAGCyK,GAAoC,IAAvB1F,EAAa3C,MACvB,kBAAC,GAAD,CACI+Z,YAAawK,EACbvK,SAAUA,EACV1N,YAAY,MACZ2N,aAAa,QACb5R,UAAWA,IAGf,oCACI,kBAAChL,EAAA,EAAD,KACI,kBAACjB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,kC,qBCra5Bga,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IAAM9e,GAAYC,aAAW,kBACzBE,YAAa,CACT2E,OAAQ,CACJgQ,UAAW,eA6SRyZ,GAxSqB,SAAC,GAA+B,IAA7Brb,EAA4B,EAA5BA,YAAa0N,EAAe,EAAfA,SAC1C7e,EAAU/B,KAEVwuB,EAActb,IAAgByX,YAAmBC,QAAU,cAAgB,cAE3EF,EAAiBxX,IAAgByX,YAAmBC,QAAU7jB,GAAeC,GALpB,EAO3BmC,mBAAqB,CAAExC,MAAO,GAAIC,MAAO,EAAGC,KAAM,IAPvB,oBAOxD0C,EAPwD,KAO1CC,EAP0C,OAQhCL,mBAAS,IARuB,oBAQxD8hB,EARwD,KAQ3CC,EAR2C,OASrB/hB,mBAAqB,IATA,oBASxDgiB,EATwD,KASzCC,EATyC,OAUXjiB,mBAAuC,IAV5B,oBAUxDkiB,EAVwD,KAUpCC,EAVoC,OAczBniB,mBAASqlB,GAdgB,oBAcxDC,EAdwD,KAc3CC,EAd2C,OAe/BvlB,mBAAkD,CAC9EoiB,WAAW,EACXpd,QAAS,KAjBkD,oBAexDgI,EAfwD,KAe7CC,EAf6C,OAmB7BjN,mBAAS,IAnBoB,oBAmBxD8F,EAnBwD,KAmB7CiX,EAnB6C,KAqBzDyI,EAAkB,WACpB,OAAIplB,EAAa3C,OAAS,EACf,CAAEgoB,OAAO,EAAOzgB,QAAS,kCAG7B,CAAEygB,OAAO,EAAMzgB,QAAS,gBAgG7Bsf,EAAsBrY,sBAAW,wBAAC,+BAAArK,EAAA,sDAC9B2iB,EAAiBxa,IAAgByX,YAAmBC,QAAU,UAAY,UAE1E+C,EAA0B,GAGhCjD,EAAezrB,IAAf,yCAAmB,WAAO2uB,EAAKrV,GAAZ,sBAAAxN,EAAA,6DACT8iB,EAAajB,KAAoBgB,EAAIhnB,MAAOqI,EAAWiE,GAAa3M,QAD3D,SAKKqmB,KAA6BiB,EAAYH,GAL9C,OAKT1gB,EALS,OAMf3B,QAAQC,IAAI,mCACNwiB,EAAc,MAAeF,EAAIhnB,MAEjCqf,EAAajZ,EAAM/N,KAAI,SAAAqL,GACzB,IAAMyjB,EAAUzjB,EAAEsd,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyB8F,KAEtE,GAAIE,EACA,OAAO/M,KACHsF,KAAa0H,QACb,KAAO1jB,EAAE4d,KACT,KAAOjZ,EACP6e,EAAYzlB,WACZ0lB,EAAQnnB,MAAMyB,YAGlB,MAAM,IAAI3I,MAAM,kDAKpBurB,IAAgB4C,GAAcD,EAAIhnB,QAAU2C,EAAa3C,OACzD0kB,EAAsBte,GAK1BiZ,EAAWgC,SAAQ,SAAAxoB,GAEf,IAAMwuB,EAAejN,KAA4BvhB,GAEjDkuB,EAAYvb,KAAK6b,MAKjBN,EAAYvgB,OAAS+d,EAAc/d,QAAUmL,IAAUmS,EAAetd,OAAS,GAC/Ege,EAAiBuC,GA1CN,4CAAnB,yDANoC,2CAmDrC,CAAC1e,EAAWiE,EAAa+X,EAAaP,EAAgBS,EAAe5hB,EAAa3C,QA6BrF,OA3BA+P,qBAAU,WAEN,GAAI1H,GAAagc,EAAa,CAC1B,IAAMmC,EAAaR,KAAoBrjB,EAAa3C,MAAOqI,EAAWiE,GACtEgY,EAAQkC,EAAW7mB,SAEvB0I,GACIwe,IAAsBhW,OAAM,SAAAhY,GACxB+e,KAAM3S,MAAMpM,QAErB,CAACguB,EAAqBlkB,EAAa3C,MAAOsM,EAAajE,EAAWgc,IAGrEtU,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,uBAAA9L,EAAA,sDACzBkE,GACIwe,IAAsBhW,OAAM,SAAAhY,GACxB+e,KAAM3S,MAAMpM,MAHK,2CAK1B,KAGH,OAAO,WACHqX,cAAcF,OAKlB,6BACKqU,GACG,kBAAC,GAAD,CACI1kB,QAAS0kB,EACT7Z,SAAUia,EACVnE,SA3FO,SAACrW,GAEpBxF,QAAQC,IAAIuF,IA0FAuW,gBAAiB7d,EAAa3C,QAGtC,kBAAC,IAAD,CAAY0V,OAAQnG,EAAUoV,UAAWpd,QAASgI,EAAUhI,UAC5D,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,0GAEO,8BAAOqgB,GAFd,wDAEuF,IACnF,uBAAGnrB,KAAK,8CAA8CC,IAAI,sBAAsBC,OAAO,UAAvF,aAHJ,6CAM+C,IAC3C,uBACIxC,MAAM,UACNsC,KAAK,4HACLC,IAAI,sBACJC,OAAO,UAJX,QAOK,IAdT,eAiBA,kBAAC,IAAD,sBAGJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU2G,SAAS,WAAnB,mBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUA,SAAS,YAAnB,sBACA,kBAAC,IAAD,CACIC,YAAaqkB,EACb3lB,YAAa,SAAApJ,GAAC,OAAIivB,EAAejvB,EAAEyuB,OAAOtnB,WAIlD,kBAAC,IAAD,CAAUsD,SAAS,WAAnB,iBACA,kBAAC,IAAD,KACI,kBAAC,GAAD,CACIzB,SAAUiiB,EACV5hB,SAAU,SAACrJ,GAAD,OACN+J,EACIkhB,EAAergB,QAAO,SAAAC,GAAC,OAAIA,EAAE1D,QAAYnH,EAAE8D,OAAOqD,SAA8B,OAI5F,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK2C,EAAa3C,MACR,eAAiB2C,EAAa1C,KAAO,IACrC,gCAIlB,yBAAK7E,UAAWD,EAAQ+C,QACpB,kBAAC,IAAD,CAAW0F,QAAS,kBApMd,WAGtB,GAFA4L,EAAW,CAAEmV,WAAW,EAAMpd,QAAS,wBAElCwgB,IAAkBC,MAMnB,OALApQ,KAAM3S,MAAM8iB,IAAkBxgB,cAC9BiI,EAAW,CACPmV,WAAW,EACXpd,QAAS,KAKjB0gB,KAAclG,YAAY,CACtBmG,KAAML,EACNtgB,QAASye,KACTmC,KAAM7b,IAAgByX,YAAmBC,QAAU,MAAQ,YAE1DprB,MAAK,SAAAuP,GACF,IACI,IAAIA,EAAI8Q,QAUJ,MAAM,IAAIngB,MAAMqP,EAAIigB,QAAQnjB,OAT5BR,QAAQC,IAAIyD,EAAIigB,SAEhB,IAAMC,EAAUrC,KAAqB7d,EAAIigB,QAAQzoB,QAASwI,EAAIigB,QAAQE,UAAW,cACjFhJ,EAAa+I,GAEb,IAAM7B,EAAaR,KAAoBrjB,EAAa3C,MAAOqoB,EAAS/b,GAEpEgY,EAAQkC,EAAW7mB,SAIvB6P,EAAW,CACPmV,WAAW,EACXpd,QAAS,KAEbqQ,KAAMqB,QAAQ,oCAChB,MAAOpgB,GACL+e,KAAM3S,MAAMpM,EAAE4I,YACdgD,QAAQC,IAAI7L,OAGnBiY,SAAQ,WACLtB,EAAW,CACPmV,WAAW,EACXpd,QAAS,QAwJqBghB,IAAqB9nB,SAA0B,KAAhB4jB,GAAzD,2BAMZ,kBAAC,EAAD,CAAa/mB,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,6BAGCyK,EACG,kBAAC,GAAD,CACI0R,YAAawK,EACbvK,SAAUA,EACV1N,YAAY,MACZ2N,aAAa,QACb5R,UAAWA,IAGf,oCACI,kBAAChL,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWsG,OAAO,QAAQC,QAAS,kBAhQhC,WACvB,IAAM4jB,EAAO,4CACbhY,EAAW,CAAEmV,WAAW,EAAMpd,QAAS,uBAElCc,GAED4f,KAAclG,YAAY,CACtBmG,KAAML,EACNtgB,QAASigB,EACTW,KAAM7b,IAAgByX,YAAmBC,QAAU,MAAQ,YAE1DprB,MAAK,SAAAuP,GAEF,IACI,IAAIA,EAAI8Q,QASJ,MAAM,IAAIngB,MAAMqP,EAAIigB,QAAQnjB,OAR5B,IAAMojB,EAAUrC,KACZ7d,EAAIigB,QAAQzoB,QACZwI,EAAIigB,QAAQE,UACZd,EACAlb,GAEJgT,EAAa+I,GAInB,MAAOxvB,GACL+e,KAAM3S,MAAMpM,EAAE4I,YACdgD,QAAQC,IAAI7L,OAGnBiY,SAAQ,WACLtB,EAAW,CACPmV,WAAW,EACXpd,QAAS,QA+NoCihB,KAAzC,kC,gCC5S5B5Q,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IAAM9e,GAAYC,aAAW,kBACzBE,YAAa,CACT2E,OAAQ,CACJgQ,UAAW,eA2WRua,GAtWqB,SAAC,GAA+B,IAA7Bnc,EAA4B,EAA5BA,YAAa0N,EAAe,EAAfA,SAC1C7e,EAAU/B,KAEVwuB,EAActb,IAAgByX,YAAmBC,QAAU,cAAgB,cAE3EF,EAAiBxX,IAAgByX,YAAmBC,QAAU7jB,GAAeC,GALpB,EAO3BmC,mBAAqB,CAAExC,MAAO,GAAIC,MAAO,EAAGC,KAAM,IAPvB,oBAOxD0C,EAPwD,KAO1CC,EAP0C,OAQhCL,mBAAS,IARuB,oBAQxD8hB,EARwD,KAQ3CC,EAR2C,OASrB/hB,mBAAqB,IATA,oBASxDgiB,EATwD,KASzCC,EATyC,OAUXjiB,mBAAuC,IAV5B,oBAUxDkiB,EAVwD,KAUpCC,EAVoC,OAWnCniB,qBAXmC,oBAWxDmmB,EAXwD,KAWhDC,EAXgD,OAezBpmB,mBAASqlB,GAfgB,oBAexDC,EAfwD,KAe3CC,EAf2C,OAgB/BvlB,mBAAkD,CAC9EoiB,WAAW,EACXpd,QAAS,KAlBkD,oBAgBxDgI,EAhBwD,KAgB7CC,EAhB6C,OAoB7BjN,mBAAS,IApBoB,oBAoBxD8F,EApBwD,KAoB7CiX,EApB6C,KAsBzDyI,EAAkB,WACpB,OAAIplB,EAAa3C,OAAS,EACf,CAAEgoB,OAAO,EAAOzgB,QAAS,kCAG7B,CAAEygB,OAAO,EAAMzgB,QAAS,gBAG7BqhB,EAAiB,yCAAG,mCAAAzkB,EAAA,8DACPuZ,IAAXgL,EADkB,0CAGGG,KAAgBC,SAHnB,cAGRC,EAHQ,OAIRC,EAAM,IAAIC,KAAOF,GACvBJ,EAAUK,GALI,kBAMPA,GANO,qCAQI,wBAAd,KAAEzhB,QARQ,uBASJ,IAAIzO,MAAJ,MATI,eAWd2L,QAAQC,IAAR,MACAD,QAAQC,IAAI,4CAZE,oBAcOwkB,KAAaJ,SAdpB,eAcJC,EAdI,OAeJC,EAAM,IAAIC,KAAOF,GACvBJ,EAAUK,GAhBA,kBAiBHA,GAjBG,yCAmBVvkB,QAAQC,IAAR,MACM,IAAI5L,MAAJ,MApBI,yDAwBX4vB,GAxBW,kEAAH,qDA4BjBS,EAAU,yCAAG,uBAAAhlB,EAAA,yDACVkE,EADU,wBAEXmH,EAAW,CAAEmV,WAAW,EAAMpd,QAAS,uBAF5B,kBAKWqhB,IALX,cAMHQ,mBAAmBvB,EAAa,CAAErmB,OAAQ,SAAU5I,MAAK,SAAAywB,GACzD/J,EAAa+J,EAAOhhB,cAPjB,gDAUPuP,KAAM3S,MAAM,KAAIsC,SAChB9C,QAAQC,IAAR,MAXO,yBAaP8K,EAAW,CACPmV,WAAW,EACXpd,QAAS,KAfN,4EAAH,qDAqBVghB,EAAiB,yCAAG,iCAAApkB,EAAA,yDACjB4jB,IAAkBC,MADD,uBAElBpQ,KAAM3S,MAAM8iB,IAAkBxgB,SAFZ,iCAMtBiI,EAAW,CAAEmV,WAAW,EAAMpd,QAAS,uBANjB,kBASAqhB,IATA,cASZI,EATY,iBAWGA,EAAII,mBAAmBvB,EAAa,CAAErmB,OAAQ,SAXjD,QAWZ6nB,EAXY,OAYZ7C,EAAaR,KAAoBrjB,EAAa3C,MAAOqpB,EAAOhhB,UAAWiE,GAC7E7H,QAAQC,IAAI2kB,EAAOhhB,WACnBiX,EAAa+J,EAAOhhB,WACpBic,EAAQkC,EAAW7mB,SACnBiY,KAAMqB,QAAQ,oCAhBI,kDAkBlBrB,KAAM3S,MAAM,KAAIsC,SAChB9C,QAAQC,IAAR,MAnBkB,yBAqBlB8K,EAAW,CACPmV,WAAW,EACXpd,QAAS,KAvBK,6EAAH,qDA4BjB+hB,EAAc,yCAAG,WAAOrf,GAAP,oCAAA9F,EAAA,yDACnBqL,EAAW,CAAEmV,WAAW,EAAMpd,QAAS,0BAGN,qBAD3Bif,EAAaR,KAAoBrjB,EAAa3C,MAAOqI,EAAWiE,IAChDid,OAJH,0CAOOX,IAPP,cAOLI,EAPK,gBAUYhD,KAA0B/b,EAAKqX,KAAM,WAVjD,cAULkI,EAVK,OAaLC,EAAW1F,eAAsB2F,QAAQF,GAAUG,eACzC,EAGVC,EAAOZ,EAAIa,iBAAiBL,GAjBvB,UAmBSR,EAAIc,4BAA4B,CAEhDjmB,OAAQ,CAAC,CAAC+lB,EAPE,EAOapD,EAAW+C,OAAQQ,OAAQtoB,SAAS,OAAQ,OACrEuoB,kBAAmB,CAACnC,GAEpBoC,gBAAiBzD,EAAWuD,OAAQtoB,SAAS,OAC7CyoB,OAAQT,EACRU,YAAapG,eAAsBqG,YACnCC,SAAU,EACVC,yBAA0Bb,IA5BnB,eAmBLc,EAnBK,OA+BX9lB,QAAQC,IAAI6lB,GA/BD,UAkCgBvE,KACvBgD,EACAnB,EACAvb,EACAkd,EACAhD,EACAne,GAxCO,eAkCLmiB,EAlCK,OA4CLC,EAAkB1G,UAAiB2G,WAAW,CAAEC,QAASre,EAAase,YAAY,IACnFviB,UACCwiB,EAAgB9G,YAAmB+G,MAAM,CAAEC,OAAQN,EAAiBE,QAASre,IAC9E3M,QACO,IAhDD,UAkDYqmB,KACnBwE,EACAle,EACAyX,eAAsB2F,QAAQF,GAC9BhD,EAAW+C,OAAQQ,OACnB/D,KAA4BrjB,EAAa3C,OACzC6qB,EARQ,KAhDD,QAkDLG,EAlDK,OA4DLC,EAAcD,EAAS3P,QAC7B5W,QAAQC,IAAIumB,GA7DD,kDA+DXrT,KAAM3S,MAAM,KAAIsC,SAChB9C,QAAQC,IAAR,MAhEW,yBAkEX8K,EAAW,CACPmV,WAAW,EACXpd,QAAS,KApEF,6EAAH,sDA0Edsf,EAAsBrY,sBAAW,wBAAC,+BAAArK,EAAA,sDAC9B2iB,EAAiBxa,IAAgByX,YAAmBC,QAAU,UAAY,UAE1E+C,EAA0B,GAGhCjD,EAAezrB,IAAf,yCAAmB,WAAO2uB,EAAKrV,GAAZ,sBAAAxN,EAAA,6DACT8iB,EAAajB,KAAoBgB,EAAIhnB,MAAOqI,EAAWiE,GAAa3M,QAD3D,SAIKqmB,KAA6BiB,EAAYH,GAJ9C,OAIT1gB,EAJS,OAKf3B,QAAQC,IAAI,mCACNwiB,EAAc,MAAeF,EAAIhnB,MAEjCqf,EAAajZ,EAAM/N,KAAI,SAAAqL,GACzB,IAAMyjB,EAAUzjB,EAAEsd,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyB8F,KAEtE,GAAIE,EACA,OAAO/M,KACHsF,KAAa0H,QACb,KAAO1jB,EAAE4d,KACT,KAAOjZ,EACP6e,EAAYzlB,WACZ0lB,EAAQnnB,MAAMyB,YAGlB,MAAM,IAAI3I,MAAM,kDAKpBurB,IAAgB4C,GAAcD,EAAIhnB,QAAU2C,EAAa3C,OACzD0kB,EAAsBte,GAK1BiZ,EAAWgC,SAAQ,SAAAxoB,GAEf,IAAMwuB,EAAejN,KAA4BvhB,GAEjDkuB,EAAYvb,KAAK6b,MAKjBN,EAAYvgB,OAAS+d,EAAc/d,QAAUmL,IAAUmS,EAAetd,OAAS,GAC/Ege,EAAiBuC,GAzCN,4CAAnB,yDANoC,2CAkDrC,CAAC1e,EAAWiE,EAAa+X,EAAaP,EAAgBS,EAAe5hB,EAAa3C,QA6BrF,OA3BA+P,qBAAU,WAEN,GAAI1H,GAAagc,EAAa,CAC1B,IAAMmC,EAAaR,KAAoBrjB,EAAa3C,MAAOqI,EAAWiE,GACtEgY,EAAQkC,EAAW7mB,SAEvB0I,GACIwe,IAAsBhW,OAAM,SAAAhY,GACxB+e,KAAM3S,MAAMpM,QAErB,CAACguB,EAAqBlkB,EAAa3C,MAAOsM,EAAajE,EAAWgc,IAGrEtU,qBAAU,WACN,IAAMC,EAAWC,YAAW,wBAAC,uBAAA9L,EAAA,sDACzBkE,GACIwe,IAAsBhW,OAAM,SAAAhY,GACxB+e,KAAM3S,MAAMpM,MAHK,2CAK1B,KAGH,OAAO,WACHqX,cAAcF,OAKlB,6BACKqU,GACG,kBAAC,GAAD,CACI1kB,QAAS0kB,EACT7Z,SAAUia,EACVnE,SAAUgJ,EACV9I,gBAAiB7d,EAAa3C,QAGtC,kBAAC,IAAD,CAAY0V,OAAQnG,EAAUoV,UAAWpd,QAASgI,EAAUhI,UAC5D,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,0GAEO,8BAAOqgB,GAFd,wDAEuF,IACnF,uBACInrB,KAAK,uFACLC,IAAI,sBACJC,OAAO,UAHX,aAHJ,6CAU+C,IAC3C,uBACIxC,MAAM,UACNsC,KAAK,4HACLC,IAAI,sBACJC,OAAO,UAJX,QAOK,IAlBT,eAqBA,kBAAC,IAAD,sBAGJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU2G,SAAS,WAAnB,mBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUA,SAAS,YAAnB,sBACA,kBAAC,IAAD,CACIC,YAAaqkB,EACb3lB,YAAa,SAAApJ,GAAC,OAAIivB,EAAejvB,EAAEyuB,OAAOtnB,WAIlD,kBAAC,IAAD,CAAUsD,SAAS,WAAnB,iBACA,kBAAC,IAAD,KACI,kBAAC,GAAD,CACIzB,SAAUiiB,EACV5hB,SAAU,SAACrJ,GAAD,OACN+J,EACIkhB,EAAergB,QAAO,SAAAC,GAAC,OAAIA,EAAE1D,QAAYnH,EAAE8D,OAAOqD,SAA8B,OAI5F,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK2C,EAAa3C,MACR,eAAiB2C,EAAa1C,KAAO,IACrC,gCAIlB,yBAAK7E,UAAWD,EAAQ+C,QACpB,kBAAC,IAAD,CAAW0F,QAAS,kBAAM2kB,KAAqB9nB,SAA0B,KAAhB4jB,GAAzD,2BAMZ,kBAAC,EAAD,CAAa/mB,SAAS,MAClB,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,6BAGCyK,EACG,kBAAC,GAAD,CACI0R,YAAawK,EACbvK,SAAUA,EACV1N,YAAY,MACZ2N,aAAa,QACb5R,UAAWA,IAGf,oCACI,kBAAChL,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWsG,OAAO,QAAQC,QAAS,kBAAMulB,MAAzC,kCCnX5BvR,KAAMC,UAAU,CACZvU,SAAU,YACVwU,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,IAGf,IAAM9e,GAAYC,aAAW,SAAAC,GAAK,OAC9BC,YAAa,CACT2J,UAAW,CACP9B,YAAa9H,EAAMQ,QAAQ,GAC3BC,UAAW,GACXC,OAAQ,OACRC,cAAe,UAEnBkJ,QAAS,CACLhC,WAAY,OACZC,YAAa,aAKV,SAAS8pB,KACpB,IAAM/vB,EAAU/B,KADuB,EAGHmJ,mBAAwB4oB,KAAcC,MAHnC,oBAGhCC,EAHgC,KAGpBC,EAHoB,OAKP/oB,mBAAqB,IALd,oBAKhCyX,EALgC,KAKtBuR,EALsB,OAMPhpB,mBAG7B,CACCoiB,WAAW,EACXpd,QAAS,KAX0B,oBAMhCgI,EANgC,KAMrBC,EANqB,KA+DvCO,qBAAU,WACNP,EAAW,CACPmV,WAAW,EACXpd,QAAS,gCAGb6S,KACyBA,KAAwBwE,OAC5ChmB,MAAK,SAAAC,GACF0yB,EAAY1yB,GACZ4L,QAAQC,IAAI,iCAEfmM,OAAM,SAAAE,GACH6G,KAAM3S,MAAM8L,GACZtM,QAAQC,IAAIqM,MAEfD,SAAQ,WACLtB,EAAW,CACPmV,WAAW,EACXpd,QAAS,UAGtB,IAEH,IAvCqBikB,EAuCfC,EAA2B,WAC7B,OAAQJ,GACJ,QACA,KAAKF,KAAcC,KACf,OAAO,KACX,KAAKD,KAAcO,IACf,OAAO,kBAAC,GAAD,CAAiBpf,YAAayX,YAAmB4H,QAAS3R,SAAUA,IAC/E,KAAKmR,KAAcS,OACf,OAAO,kBAAC,GAAD,CAAYtf,YAAayX,YAAmB4H,QAAS3R,SAAUA,IAC1E,KAAKmR,KAAcU,OACf,OAAO,kBAAC,GAAD,CAAYvf,YAAayX,YAAmB4H,QAAS3R,SAAUA,MAIlF,OACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYtE,OAAQnG,EAAUoV,UAAWpd,QAASgI,EAAUhI,UAC5D,kBAACrM,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaoC,SAAS,MAClB,6BACI,kBAAClB,EAAA,EAAD,CAAYC,QAAQ,KAAKsB,UAAU,KAAKC,MAAM,UAA9C,oCAGA,kBAACxB,EAAA,EAAD,CAAYC,QAAQ,QAAQsB,UAAU,KAAKC,MAAM,UAAjD,aACe,IACX,kBAACpB,EAAA,EAAD,CACIrC,MAAM,UACNsC,KAAK,4HACLC,IAAI,sBACJC,OAAO,UAEP,yBAAKrB,IAAK8H,KAAgB5H,IAAI,GAAGJ,UAAWD,EAAQ+H,eAIhE,kBAACuoB,EAAD,MAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,2CACA,kBAAC,IAAD,iBAGJ,kBAAC,IAAD,KAmBI,kBAAC,IAAD,CAASvtB,QAAM,EAAC0F,QAAS,WA5FjD0nB,EAAcH,KAAcO,MA4F0CjrB,UAvGrD+qB,EAuG2EL,KAAcO,IAtGnGL,IAAeG,IAuGM,kBAAC,IAAD,CAAS3vB,KAAMiwB,KAASzwB,KAAK,UAC7B,kBAAC,IAAD,wBAKhB,kBAAC,EAAD,S,0MCvMd0wB,GAA+B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAChD,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAgBD,GACfC,EAAU5zB,KAAI,SAACqL,EAAGiO,GAAJ,OACX,kBAAC,IAAD,CAAepQ,WAAYmC,EAAErD,IAAKrC,IAAK2T,GACnC,kBAAC,IAAD,CAASzT,QAAM,EAACopB,QAAM,EAAC7mB,SAAUiD,EAAEjD,UAC/B,kBAAC,IAAD,CAASnF,IAAKoI,EAAE7H,KAAMR,KAAK,UAC3B,kBAAC,IAAD,KAAWqI,EAAExJ,cA4DtBgyB,GApDY,WACvB,OACI,oCACI,kBAAC,IAAD,CAASC,UAAU,QACf,kBAAC,IAAD,gBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAe5qB,WAAW,cACtB,kBAAC,IAAD,CAASrD,QAAM,EAACopB,QAAM,GAClB,kBAAC,IAAD,CAAShsB,IAAK8wB,KAAU/wB,KAAK,UAC7B,kBAAC,IAAD,gBAKZ,kBAAC,GAAD,CAAa2wB,WAAW,iBAAiBC,UAAW5sB,KACpD,kBAAC,GAAD,CAAa2sB,WAAW,kBAAkBC,UAAWrsB,KACrD,kBAAC,GAAD,CAAaosB,WAAW,iBAAiBC,UAAWtrB,KAEpD,kBAAC,IAAD,KACI,kBAAC,IAAD,uBACA,uBAAGlE,KAAMhB,EAAeiB,IAAI,sBAAsBC,OAAO,UACrD,kBAAC,IAAD,CAASuB,QAAM,EAACopB,QAAM,GAClB,kBAAC,IAAD,CAAShsB,IAAK+wB,KAAShxB,KAAK,UAC5B,kBAAC,IAAD,kBAGR,uBAAGoB,KAAMhB,EAAgBiB,IAAI,sBAAsBC,OAAO,UACtD,kBAAC,IAAD,CAASuB,QAAM,EAACopB,QAAM,GAClB,kBAAC,IAAD,CAAShsB,IAAKgxB,KAAUjxB,KAAK,UAC7B,kBAAC,IAAD,mBAGR,uBAAGoB,KAAMhB,EAAeiB,IAAI,sBAAsBC,OAAO,UACrD,kBAAC,IAAD,CAASuB,QAAM,EAACopB,QAAM,GAClB,kBAAC,IAAD,CAAShsB,IAAKixB,KAASlxB,KAAK,UAC5B,kBAAC,IAAD,kBAGR,uBAAGoB,KAAMhB,EAAciB,IAAI,sBAAsBC,OAAO,UACpD,kBAAC,IAAD,CAASuB,QAAM,EAACopB,QAAM,GAClB,kBAAC,IAAD,CAAShsB,IAAKkxB,KAAQnxB,KAAK,UAC3B,kBAAC,IAAD,sBCzBjBoxB,GApBO,WAClB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcN,UAAU,OAAOO,KAAK,MAChC,kBAAC,GAAD,MAEA,kBAAC,IAAD,CAAiBzzB,GAAG,OAAO0qB,UAAQ,GAC/B,kBAAC,IAAD,CAAOgJ,OAAK,EAACzE,KAAK,aAAavqB,UAAW0D,KAC1C,kBAAC,IAAD,CAAO6mB,KAAK,mBAAmBvqB,UAAWya,KAC1C,kBAAC,IAAD,CAAO8P,KAAK,uBAAuBvqB,UAAWghB,KAC9C,kBAAC,IAAD,CAAOuJ,KAAK,uBAAuBvqB,UAAWutB,KAC9C,kBAAC,IAAD,CAAOyB,OAAK,EAACzE,KAAK,IAAI0E,OAAQ,kBAAM,kBAAC,IAAD,CAAUhc,GAAG,uBC3BrDic,QACa,cAA7BzoB,OAAOiB,SAASynB,UAEiB,UAA7B1oB,OAAOiB,SAASynB,UAEhB1oB,OAAOiB,SAASynB,SAASC,MAAM,2D,0BCFvC3oB,OAAOsI,SAAWtI,OAAOsI,UAAY,GACrCtI,OAAOE,KAAOF,OAAOE,MAAQ,GAE7B,IAAMhL,GAAQ0zB,aAAe,CACzBlyB,WAAY,CACRmyB,WAAY,CACR,YACA,gBACA,qBACA,WACA,SACA,SACA,SACA,YACA,YACA,aACA,kBACFC,KAAK,MAEXtf,QAAS,CACLxP,QAAS,CACLkB,KAAM,UACN6tB,MAAO,UACPC,KAAM,cAKlBC,IAAST,OACL,kBAAC,KAAD,CAAkBtzB,MAAOA,IACrB,kBAAC,GAAD,OAEJ6L,SAASmoB,eAAe,SDkFpB,kBAAmB/K,WACnBA,UAAUgL,cAAcC,MAAM50B,MAAK,SAAA60B,GAC/BA,EAAaC,iB,oBErIzBv1B,EAAOC,QAAU,IAA0B,0C,oo+ECmB9Bu1B,EAAU,yBAMhB,SAAepK,EAAtB,kC,4CAAO,WAA2BqK,GAA3B,6BAAAzpB,EAAA,6DAA+C2S,EAA/C,+BAAsD,IAAtD,KACY+W,IADZ,SAEOC,MAAM,0CAAD,OAA2ChX,EAA3C,YAAmDA,EAAnD,uBAAsE8W,IAAch1B,MAAK,SAAAuP,GAAG,OACnGA,EAAI4lB,UAHT,0BACGC,EADH,KACgBC,gBADhB,kCAOID,GAPJ,4C,sBAgBA,SAAeE,EAAtB,oC,4CAAO,WAAoCvuB,EAAiBgrB,GAArD,mBAAAxmB,EAAA,6DACGgqB,EADH,mCACiD,YAAZxD,EAAwB,GAAK,WADlE,uBAC2FhrB,EAD3F,iBAEsBmuB,MAAMK,GAF5B,8BAEkCC,OAFlC,YAEGjmB,EAFH,QAGKtC,SAAS,2BAHd,sBAIO,IAAI/M,MAAM,2BAJjB,cAOGu1B,EAAoCC,KAAKjrB,MAAM8E,GAPlD,kBAQIkmB,GARJ,6C,sBAoDA,SAAeE,EAAtB,oC,4CAAO,WAAiCC,EAAc7D,GAA/C,mBAAAxmB,EAAA,6DACGgqB,EADH,4CAC8CxD,EAD9C,YACyD6D,GADzD,SAGsBV,MAAMK,GAH5B,8BAGkCC,OAHlC,YAGGjmB,EAHH,QAKKtC,SAAS,QALd,sBAMO,IAAI/M,MAAMqP,GANjB,cASGsmB,EAAgCH,KAAKjrB,MAAM8E,GAT9C,kBAUIsmB,EAAM7Y,KAAK8Y,QAVf,6C,sBAkBA,SAAeC,EAAtB,oC,4CAAO,WAAoCF,EAAe9D,GAAnD,mBAAAxmB,EAAA,6DACGgqB,EADH,mCACiD,YAAZxD,EAAwB,GAAK,WADlE,mBAEemD,MAAMK,EAAK,CACzBS,OAAQ,OACRC,KAAMJ,EACNK,QAAS,CACL,eAAgB,sDANrB,cAEG3mB,EAFH,gBASwBA,EAAIimB,OAT5B,UASGW,EATH,OAUE5mB,EAAI6mB,KAAMD,EAAalpB,SAAS,SAVlC,sBAWO,IAAI/M,MAAM,yCAA2Ci2B,GAX5D,cAcHtqB,QAAQC,IAAIqqB,GAdT,kBAgBIA,GAhBJ,6C,sBA0BA,SAASE,EAAmBtvB,EAAiBgrB,GAChD,IAEI,OADA5G,UAAkBmL,eAAevvB,EAASgrB,IACnC,EACT,MAAO9xB,GACL,OAAO,GAUR,SAASs2B,EAAkB9mB,EAAmBsiB,GACjD,IACI5G,SAAiBqL,cAAcC,EAAOjlB,KAAK/B,EAAW,OAAQ,CAAEsiB,QAASA,IADzE,IAGQhrB,EAAYokB,WAAmB+G,MAAM,CAAEC,OAAQsE,EAAOjlB,KAAK/B,EAAW,OAAQsiB,QAASA,IAAvFhrB,QACR,GAAuB,kBAAZA,IAAyBsvB,EAAmBtvB,EAASgrB,GAC5D,MAAM,IAAI7xB,MAAM,sBAGpB,OAAO,EACT,MAAOD,GACL,OAAO,GAsCR,SAASy2B,EAAiBC,GAE7B,IAAMC,EAAc,IAAIjpB,IAAU,IAAIkpB,IAAI,IAAIlpB,IAAU,IAExD,GAAuB,kBAAZgpB,GAA2C,kBAAZA,EAAsB,CAC5D,IAAMG,EAA6B,kBAAZH,EAAuBxP,SAASwP,GAAWA,EAClE,GAAI5J,MAAM+J,GACN,MAAM,IAAI52B,MAAM,kCAEpB,GAAI42B,EAAU,EACV,MAAM,IAAI52B,MAAM,qCAIxB,OAAO,IAAIyN,IAAUgpB,GAASloB,IAAImoB,GA0D/B,SAASG,EAAahwB,EAAiB2oB,EAA4B9gB,EAAamjB,GACnF,IAAMjE,EAAOiE,GAtGV,SAA+BhrB,GAGlC,IAGIiwB,EAEJ,GAAI,IAAI/J,OAAJ,YALgB,CAAC,IAAK,IAAK,OAKCqH,KAAK,KAAjC,MAA0CpH,KAAKnmB,GAE/CiwB,EAAiB7L,WAAmBC,YAEjC,KAAI,IAAI6B,OAAJ,YAPS,CAAC,IAAK,IAAK,MAAO,KAOCqH,KAAK,KAAjC,MAA0CpH,KAAKnmB,GAItD,MAAM,IAAI7G,MAAM,2BAHhB82B,EAAiB7L,WAAmB4H,QAMxC,IAAKsD,EAAmBtvB,EAASiwB,GAC7B,MAAM,IAAI92B,MAAM,2BAEpB,OAAO82B,EAgF0BC,CAAsBlwB,GAGjD0oB,EAAUZ,UAAyBjgB,EAAK7H,EAAS2oB,GAOvD,GALyBvE,WAAmB+G,MAAM,CAC9CC,OAAQsE,EAAOjlB,KAAKie,EAAS,OAC7BsC,QAASjE,IACV/mB,UAEsBA,EACrB,MAAM,IAAI7G,MAAM,oCAAsC6G,GAE1D,OAAO0oB,EAQJ,SAASyH,EAAoBjhB,GAEhC,IAAKJ,OAAOshB,UAAUlhB,KAAUJ,OAAOuhB,SAASnhB,GAC5C,MAAM,IAAI/V,MAAM,oDAAsD+V,GAE1E,IACMohB,EAAgBC,IAAMC,OAAO,CAAEC,OADhB,IACwBvhB,IAC7C,GAAIohB,EAAgB,MAEhB,MAAM,IAAIn3B,MAAM,4CAEpB,OAAOm3B,EAWJ,SAASI,EAAcC,EAAsBL,EAAuBtF,GAEvE,GAAIsF,EAAgB,EAChB,MAAM,IAAIn3B,MAAM,8CAEpB,IAAK2V,OAAOshB,UAAUE,KAAmBxhB,OAAOuhB,SAASC,GACrD,MAAM,IAAIn3B,MAAM,yDAA2Dm3B,GAE/E,GAAIA,EAAgB,MAEhB,MAAM,IAAIn3B,MAAM,4CAGpB,IAAKq2B,EAAkBmB,EAAc3F,GACjC,MAAM,IAAI7xB,MAAM,sBAGpB,IAAMy3B,EAAelB,EAAOjlB,KA9EzB,SAAwB/B,EAAmBsiB,GAK9C,OAJmB5G,SAAiBqL,cAAcC,EAAOjlB,KAAK/B,EAAW,OAAQ,CAC7EuiB,YAAY,EACZD,QAASA,IAEKtiB,UAAU5G,SAAS,OAyEJ+uB,CAAeF,EAAc3F,GAAU,OAExE,OAAO5G,SAAiB0M,QACpB,oBACE1M,SAAiB2M,OAAOP,OAAOF,GAAexuB,SAAS,OADzD,sEAIE8uB,EAAa9uB,SAAS,OAJxB,mCAOKkvB,OACA5nB,QAAQ,OAAQ,MAWtB,SAAS6nB,EAAYC,EAAkBxoB,EAAmBsiB,GAE7D,GAAIA,IAAY5G,WAAmBC,UAC3B6M,EAAW,KAAOA,EAAW,IAC7B,MAAM,IAAI/3B,MAAM,qDAIxB,OAAOirB,WAAmB2D,KAAK,CAC3BiD,QAASA,EACTpB,OAAQ,CACJQ,OAAQsG,EAAchoB,EAAWynB,EAAoBe,GAAWlG,MAerE,SAAemG,EAAtB,8C,4CAAO,WACHC,EACApG,EACAjF,EACAc,EACAyJ,EACAe,EACAvL,GAPG,IASMwL,EAGA/B,EAZN,qBAAA/qB,EAAA,yDAYM+qB,EAZN,SAYqBvvB,GACpB,OAAOokB,UAAkBmL,eAAevvB,EAASgrB,IAJ5CsG,EATN,SASe3P,GACd,OAAO+N,EAAOjlB,KAAKkX,EAAM,OAAO4P,aAMhCjB,EAAgB,GAhBjB,sBAiBO,IAAIn3B,MAAM,0CAjBjB,YAmBC2sB,EAAM,GAnBP,sBAoBO,IAAI3sB,MAAM,4CApBjB,UAsBE2V,OAAOshB,UAAUE,IAAmBxhB,OAAOuhB,SAASC,GAtBtD,sBAuBO,IAAIn3B,MAAM,yDAA2Dm3B,GAvB5E,UAyBExhB,OAAOshB,UAAUtK,IAAShX,OAAOuhB,SAASvK,GAzB5C,uBA0BO,IAAI3sB,MAAM,8CAAgD2sB,GA1BjE,WA4BG0L,EAAU,IACZzL,EAAO0L,KAAKD,GAASnxB,MAAQylB,EAAM,GA7BpC,uBA8BO,IAAI3sB,MAAJ,gDAAmD4sB,EAAO0L,KAAKD,GAASnxB,MAAxE,aA9BP,eAkCGqxB,EAAK,IAAItN,eACZuN,QAAU,EACbD,EAAGE,SAASN,EAASvL,EAAO8L,SAAUL,EAASlB,GAC/CoB,EAAGI,UAAUvC,EAAe8B,GAAmBtL,EAAO0L,KAAKD,GAASnxB,MAAQylB,GAEtEiM,EAAW3N,cAAsBqG,YACjC9D,EAAgB+K,EAAGM,iBAAiB,EAAGnL,EAAYkL,GAxCtD,KAyCe3N,SAAiBuE,UAzChC,UAyCuDyI,EAAO/oB,KAAKse,GAzCnE,4BAyCmFoL,EAAhFpJ,EAzCH,KAyC0C6H,OAzC1C,wBA2CGyB,EAAkB7N,WAAmB2D,KAAK,CAC5CiD,UACApB,OAAQ,CACJoB,UACAZ,OAAQvD,EACRqL,MAAO9N,SAAiB+N,QAAQ,CAACxJ,OAEtCuJ,iBAC4BxC,GAnD5B,iBAoDCgC,EAAGU,eAAe,EAAGH,GApDtB,8BAsDO,IAAI94B,MAAM,0BAtDjB,iCAyDIu4B,GAzDJ,6C,sBAqEA,SAAShL,EACZ2L,EACA3pB,EACA1F,EACAgoB,EACAsH,GAEA,IAAMlM,EAAW6K,EAAYjuB,EAAc0F,EAAWsiB,GAC9ChrB,EAAYokB,WAAmB+G,MAAM,CAAEC,OAAQsE,EAAOjlB,KAAK/B,EAAW,OAAQsiB,YAA9EhrB,QAER,GAAuB,qBAAZA,EACP,MAAM,IAAI7G,MAAM,yDAGpB,IAAMotB,EAAW8L,EAAgBhR,KAAKC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,uBAAyB4E,EAASpmB,WAE9F,GAAwB,qBAAbumB,EACP,MAAM,IAAIptB,MAAM,+BAGpB,GAAIotB,EAASlmB,MAAQiyB,EAAQ,EACzB,MAAM,IAAIn5B,MAAJ,gDAAmDotB,EAASlmB,MAA5D,aAEV,GAAIiyB,GAAS,EACT,MAAM,IAAIn5B,MAAM,uCAGpB,IAAM0tB,EAAa6J,EAAchoB,EAAWynB,EAAoBntB,GAAegoB,GAEzEZ,EAAShG,UAAkBmL,eAAevvB,EAASgrB,GAEnD0G,EAAK,IAAItN,cACfsN,EAAGC,QAAU,EACbD,EAAGE,SAASlC,EAAOjlB,KAAK4nB,EAAgB1Q,KAAM,OAAO4P,UAAW,EAL/C,GAMjBG,EAAGI,UAAU1H,EAAQ7D,EAASlmB,MAAQiyB,GAEtC,IAAMP,EAAW3N,cAAsBqG,YAGvC,MAAO,CACH9D,cAHkB+K,EAAGM,iBAAiB,EAAGnL,EAAYkL,GAAUjwB,SAAS,OAIxE4kB,iBAAkBgL,EAClBtL,YAYD,SAASmM,EACZC,EACAnN,EACAwB,EACAmE,GAEA,GAAsB,KAAlB3F,EACA,MAAM,IAAIlsB,MAAM,qCAEpB,IAAMs5B,EAAe/C,EAAOjlB,KAAK4a,EAAcjc,QAAQ,IAAK,IAAK,OAE3Duf,EAAYvE,SAAiBuE,UAAU6H,OAAOiC,EAAcrO,cAAsBqG,aAClFwH,EAAkB7N,WAAmB2D,KAAK,CAC5CiD,QAASA,EACTpB,OAAQ,CACJoB,QAASA,EACTZ,OAAQvD,EACRqL,MAAO9N,SAAiB+N,QAAQ,CAACxJ,OAEtCuJ,MAMH,OAJAM,EAAWJ,eAAe,EAAGH,GAETO,EAAW9W,QAwE5B,IAAMgX,EAAc,uCAAG,WAC1BC,EACApK,EACAyC,EACA4H,EACA/L,EACAne,GAN0B,iBAAAlE,EAAA,6DAQpBslB,EAAW1F,cAAsB2F,QAAQ6I,GAAW5I,eACpD6I,EAAWF,EAAUzI,iBAAiB0I,EAAW9I,GACvC,EAVU,kBAYnB,CACHkB,UACAtiB,UAAWgnB,EAAOjlB,KAAK/B,EAAW,OAElCL,KAAK,WAAD,4BAAE,WAAOP,EAAcgrB,GAArB,uBAAAtuB,EAAA,6DACFM,QAAQC,IAAI,wBAA0B+C,EAAKhG,SAAS,QADlD,SAG+B6wB,EAAUI,oBAAoB,CAE3D7uB,OAAQ,CAAC,CAAC2uB,EAXN,EAWyBhM,EAAW+C,OAAQQ,OAAQtoB,SAAS,OAAQ,OACzEuoB,kBAAmB,CAAC9B,GAEpB+B,gBAAiBzD,EAAWuD,OAAQtoB,SAAS,OAC7CyoB,OAAQT,EACRkJ,mBAAoB,EACpBxI,YAAapG,cAAsBqG,cAXrC,cAGIwI,EAHJ,OAcFnuB,QAAQC,IAAIkuB,GACZnuB,QAAQC,IAAI+C,EAAKhG,SAAS,OAASgxB,GAfjC,cAgBwBG,EAhBxB,GAgBKC,EAhBL,KAiBIC,EACErJ,EACO4F,EAAOjlB,KAAKyoB,EAAiB,OAEjCxD,EAAO0D,OAAO,CACjB1D,EAAOjlB,KAAKyoB,EAAiB,OAC7BxD,EAAOjlB,KAAK,KAAM,SAGpB4oB,EAAUjP,SAAiBuE,UAAU2K,OAAOH,GA1BhD,kBA2BKE,EAAQ1K,WA3Bb,4CAAF,qDAAC,KAhBiB,2CAAH,kE,4CCxlB3BnwB,EAAOC,QAAU,IAA0B,6C,8dCa/B86B,E,wGAUL,SAASC,EAAWC,GACvB,GAAIA,EAAMC,oBAAoB,IAAI9sB,IAAU,IACxC,OAAO,IAAIA,IAAU,GAEzB,IAAM+sB,EAAiB,IAAI/sB,IAAU,IAAIkpB,IAAI,IAAIlpB,IAAU,KAC3D,OAAO6sB,EAAMG,UAAUD,I,SAffJ,O,iBAAAA,I,iBAAAA,I,gBAAAA,M,KAqBL,IAAMM,EAAe,IAAIC,eAOzB,SAAeC,EAAtB,kC,4CAAO,WAAmC/I,GAAnC,mBAAAxmB,EAAA,sDACCwvB,EAAW,GACTC,EAAQz6B,OAAO06B,OAAOC,GAAkB9sB,QAAO,SAACmB,EAAD,OAAQyrB,EAAR,EAAQA,MAAR,mBAAC,eAAiCzrB,GAAQyrB,KAAU,IAFtG,KAIKjJ,EAJL,cAKMuI,EAAaa,MALnB,SAQMb,EAAatU,MARnB,QAWMsU,EAAac,KAXnB,uBAMKL,EAAW,sBANhB,mCASKA,EAAW,+BAThB,mCAaKA,EAAW,wBAbhB,oCAiBGM,EAAa,IAAIC,aAAWP,GAjB/B,UAmBUQ,aAAWrL,OAAO,CAC3BnkB,SAAUsvB,EACVL,MAAM,2BACCA,GADF,IAGD,mBAAoB,WACpB,oBAAqB,YAErBQ,QAAS,iBACTC,KAAM,eACNC,cAAe,qBACfC,MAAO,aACPC,eAAgB,wBAGpBC,WAAY,CAAEC,OAAQ,CAAEC,MAAO,kBAlChC,sF,sBA0CA,SAAShqB,EAAmB7G,GAC/B,OAAIA,EAAW,GACJ,EACAA,EAAW,IACX,GACAA,EAAW,IACX,IACAA,EAAW,IACX,IAEA,KAaR,SAAS8wB,EACZjK,EACAnhB,EACAnB,EACAvE,EACA9D,GAoBA,OAlBkB,IAAI60B,SAClBrB,EACA,CACIpY,KAAM0Z,KACNtrB,gBAAiB,OACjBnB,UAAW0sB,WACXjxB,SAAUkxB,MACVh1B,MAAOi1B,QAEX,CACI7Z,KAAMuP,EACNnhB,gBAAiBA,EACjBnB,UAAW,IAAI0sB,WAASvB,EAAcnrB,EAAW,KACjDvE,SAAU,IAAIkxB,MAAIxB,EAAc1vB,GAChC9D,MAAO,IAAIi1B,OAAKzB,EAAcxzB,KAsBnC,SAAek1B,EAAtB,sC,4CAAO,WAAoC/G,EAAiBtS,EAAmBsZ,GAAxE,iBAAAhxB,EAAA,yDACiC,qBAAzBgqB,EAAIkD,GAAG+D,cADf,sBAEO,IAAIt8B,MAAM,0CAFjB,cAKGu8B,EAAiBlH,EAAIkD,GAAG+D,cAAcE,QAAQzZ,EAAU0Z,QAASJ,GALpE,SAOkBE,EAAe5nB,OAPjC,cAOG+nB,EAPH,yBASIA,GATJ,4C,sBAgBA,SAAS3e,EAAmBxO,GAE/B,IASMotB,EAAclW,cATA,SAACmW,GAEjB,IADA,IAAM9e,EAAS,GACNlT,EAAI,EAAGA,EAAIgyB,EAAUlvB,OAAQ9C,GAAK,EACvCkT,EAAOpL,KAAKuU,SAAS2V,EAAUC,OAAOjyB,EAAG,GAAI,KAEjD,OAAO,IAAIkyB,WAAWhf,GAImBif,CAAYxtB,EAAUU,QAAQ,KAAM,KAAM,KAGvF,OADqBwW,gBAA2BkW,EAAa,GAU1D,SAAeK,EAAtB,sC,4CAAO,WAAiC3H,EAAiB4H,EAAsBC,GAAxE,mBAAA7xB,EAAA,sEAC6BgqB,EAAI8H,MAAMC,OAAOC,QAAQJ,GADtD,uBACWlb,EADX,EACKjF,KACJ4F,EAAO,IAAIjV,IAAUsU,EAAQub,KAAK30B,YAClCu0B,IACAxa,EAAO2X,EAAW,IAAI5sB,IAAUsU,EAAQub,KAAK30B,cAJ9C,kBAMI+Z,GANJ,4C,sBAaA,SAAe6a,EAAtB,kC,4CAAO,WAA2ClI,GAA3C,iBAAAhqB,EAAA,kEAEoBsK,OAFpB,SAE2C0f,EAAI8H,MAAMb,cAAc7a,gBAFnE,0BAEoF9Y,WAAjF60B,EAFH,KAE2BvW,SAF3B,qBAIoBtR,OAJpB,SAI2C0f,EAAI8H,MAAMb,cAAc/a,gBAJnE,0BAIoF5Y,WAAjF80B,EAJH,KAI2BxW,SAJ3B,kCAMI,CACHxF,cAAe+b,EACfjc,cAAekc,IARhB,6C,sBAiBA,SAAeC,EAAtB,oC,4CAAO,WAAiCrI,EAAiBnS,GAAlD,iBAAA7X,EAAA,yDACiC,qBAAzBgqB,EAAIkD,GAAG+D,cADf,sBAEO,IAAIt8B,MAAM,0CAFjB,cAKGu8B,EAAiBlH,EAAIkD,GAAG+D,cAAcqB,MAAMza,GAL/C,SAOkBqZ,EAAe5nB,OAPjC,cAOG+nB,EAPH,yBASIA,GATJ,4C,sBAmBA,SAAekB,EAAtB,oC,4CAAO,WAA8BvI,EAAiBnS,GAA/C,yBAAA7X,EAAA,sEAEkBgqB,EAAI8H,MAAMb,cAAcra,OAAOiB,GAFjD,OAEGya,EAFH,OAKG7gB,EAAc,CAChB+gB,OAAQ,CAEJvb,KAAMqb,EAAMG,IAAI,UAAUA,IAAI,QAC9BptB,gBAAiBitB,EAAMG,IAAI,UAAUA,IAAI,oBACzCvuB,UAAWouB,EAAMG,IAAI,UAAUA,IAAI,cACnC9yB,SAAU2yB,EAAMG,IAAI,UAAUA,IAAI,YAClC52B,MAAOy2B,EAAMG,IAAI,UAAUA,IAAI,UAEnC3Z,QAASwZ,EAAMG,IAAI,WACnBzZ,QAASsZ,EAAMG,IAAI,WACnB7yB,OAAQ0yB,EAAMG,IAAI,UAClBvZ,SAAUoZ,EAAMG,IAAI,aAjBrB,MAoByBz9B,OAAO09B,QAAQjhB,EAAK+gB,QApB7C,uEAuBsB,qBAHP32B,EApBf,OAwBuB,yEAAlBA,EAAMqb,SACY,uEAAlBrb,EAAMqb,QAzBX,8CA2BYqC,GA3BZ,2DA+BI9H,GA/BJ,6C,sBAsCA,SAASkhB,EAAiBC,GAE7B,IAAMN,EAAQM,EASd,MARwB,CACpB3b,KAAMqb,EAAMG,IAAI,QAChBptB,gBAAiBitB,EAAMG,IAAI,mBAC3BvuB,UAAWouB,EAAMG,IAAI,aACrB9yB,SAAU2yB,EAAMG,IAAI,YACpB52B,MAAOy2B,EAAMG,IAAI,UAYlB,SAASI,EAAchb,GAE1B,IADA,IAAImZ,EAAQ5V,kBACC,CAGT,KAFaA,cAAyB0X,oBAAUjb,EAASmZ,IAEhD,GAAK,GAIV,OAAOA,EAHPA,EAAQ5V,mB,gCC3Rb,IAAK4L,EA+BA+L,EAUAxX,EAtDZ,oE,SAaYyL,O,mBAAAA,I,mBAAAA,I,aAAAA,I,gBAAAA,M,cA+BA+L,O,iBAAAA,I,mBAAAA,I,iBAAAA,I,kBAAAA,M,cAUAxX,O,qBAAAA,I,wBAAAA,M","file":"static/js/main.f635c6bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plasm-logo.e814f1e5.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_a.c31d8b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/ld_logo_b.5a855f2c.png\";","module.exports = __webpack_public_path__ + \"static/media/plasm-icon.cee6d05f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dusty-icon.acfa536a.svg\";","module.exports = __webpack_public_path__ + \"static/media/home-outline.5d4dea4a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-twitter.27ff8f62.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-discord.fee2b0c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-telegram.ed1ca736.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-github.01fb3515.svg\";","var map = {\n\t\"./ion-action-sheet-controller_8.entry.js\": [\n\t\t2792,\n\t\t43\n\t],\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t2793,\n\t\t44\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t2794,\n\t\t45\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t2795,\n\t\t24\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t2796,\n\t\t25\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t2797,\n\t\t11\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t2798,\n\t\t12\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t2799,\n\t\t46\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t2800,\n\t\t47\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t2801,\n\t\t48\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t2802,\n\t\t49\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t2803,\n\t\t81\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t2804,\n\t\t82\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t2805,\n\t\t50\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t2806,\n\t\t51\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t2807,\n\t\t52\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t2808,\n\t\t53\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t2809,\n\t\t54\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t2810,\n\t\t55\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t2811,\n\t\t56\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t2812,\n\t\t57\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t2813,\n\t\t83\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t2814,\n\t\t20\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t2815,\n\t\t21\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t2816,\n\t\t58\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t2817,\n\t\t59\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t2818,\n\t\t84\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t2819,\n\t\t39\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t2820,\n\t\t40\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t2821,\n\t\t60\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t2822,\n\t\t61\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t2823,\n\t\t62\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t2824,\n\t\t63\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t2825,\n\t\t64\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t2826,\n\t\t65\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t2827,\n\t\t26\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t2828,\n\t\t27\n\t],\n\t\"./ion-menu_4-ios.entry.js\": [\n\t\t2829,\n\t\t18\n\t],\n\t\"./ion-menu_4-md.entry.js\": [\n\t\t2830,\n\t\t19\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t2831,\n\t\t14\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t2832,\n\t\t15\n\t],\n\t\"./ion-nav_5.entry.js\": [\n\t\t2833,\n\t\t13\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t2834,\n\t\t16\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t2835,\n\t\t17\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t2836,\n\t\t66\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t2837,\n\t\t67\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t2838,\n\t\t32\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t2839,\n\t\t33\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t2840,\n\t\t68\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t2841,\n\t\t69\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t2842,\n\t\t41\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t2843,\n\t\t42\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t2844,\n\t\t37\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t2845,\n\t\t38\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t2846,\n\t\t85\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t2847,\n\t\t70\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t2848,\n\t\t28\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t2849,\n\t\t29\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t2850,\n\t\t71\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t2851,\n\t\t72\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t2852,\n\t\t34\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t2853,\n\t\t35\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t2854,\n\t\t86\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t2855,\n\t\t87\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t2856,\n\t\t73\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t2857,\n\t\t88\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t2858,\n\t\t89\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t2859,\n\t\t74\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t2860,\n\t\t75\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t2861,\n\t\t36\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t2862,\n\t\t76\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t2863,\n\t\t77\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t2864,\n\t\t78\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t2865,\n\t\t30\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t2866,\n\t\t31\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t2867,\n\t\t22\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t2868,\n\t\t23\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t2869,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1218;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t2873,\n\t\t98\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1220;\nmodule.exports = webpackAsyncContext;","module.exports = __webpack_public_path__ + \"static/media/ethereum_logo.802c6eac.svg\";","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { IonHeader, IonButtons, IonMenuButton, IonToolbar, IonTitle } from '@ionic/react';\nimport plasmLogo from '../resources/plasm-logo.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        grow: {\n            flexGrow: 1,\n        },\n        navbar: {\n            backgroundColor: 'black',\n        },\n        logoIcon: {\n            margin: theme.spacing(1),\n            maxHeight: 45,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        title: {\n            color: 'white',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        sectionDesktop: {\n            display: 'none',\n            [theme.breakpoints.up('md')]: {\n                display: 'flex',\n            },\n        },\n        sectionMobile: {\n            display: 'flex',\n            [theme.breakpoints.up('md')]: {\n                display: 'none',\n            },\n        },\n        listItem: {\n            width: '100%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            fontWeight: theme.typography.fontWeightRegular,\n        },\n    }),\n);\n\nexport default function Navbar() {\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonHeader className={classes.navbar}>\n                <IonToolbar color=\"black\">\n                    <IonButtons slot=\"start\">\n                        <IonMenuButton className={classes.title} />\n                        <img className={classes.logoIcon} src={plasmLogo} alt=\"\" />\n                    </IonButtons>\n                    <IonTitle className={classes.title}>Plasm Network</IonTitle>\n                </IonToolbar>\n            </IonHeader>\n        </>\n    );\n}\n","export const Links = {\n    docs: 'https://docs.plasmnet.io',\n    blog: 'https://medium.com/stake-technologies',\n    twitter: 'https://twitter.com/Plasm_Network',\n    github: 'https://github.com/staketechnologies/Plasm',\n    telegram: 'https://t.me/PlasmOfficial',\n    discord: 'https://discordapp.com/invite/Dnfn5eT',\n    email: 'info@stake.co.jp',\n    home: 'https://stake.co.jp/',\n    plasmHome: 'https://plasmnet.io/',\n};\n\nexport const SponsorLinks = {\n    cryptoEconomicsLab: 'https://www.cryptoeconomicslab.com/',\n    parityTechnologies: 'https://www.parity.io/',\n    web3Foundation: 'https://web3.foundation/',\n    longhash: 'https://longhash.co.jp/en/',\n    universityOfTokyo: 'https://www.u-tokyo.ac.jp/en/index.html',\n    connect: 'https://www.blockchain.t.u-tokyo.ac.jp/',\n    parityBuilders: 'https://builders.parity.io/',\n    acala: 'https://acala.network/',\n};\n\nexport const BlogLinks = {\n    lockdropIntroduction: 'https://medium.com/stake-technologies/plasm-lockdrop-introduction-54614592a13',\n};\n\nexport const AppLinks = {\n    plasmnetIo: 'https://apps.plasmnet.io/',\n    polkadotNetwork: 'https://telemetry.polkadot.io/#list/Plasm%20Testnet%20v3',\n    joinLockdrop: 'https://lockdrop.plasmnet.io',\n    inkPlayground: 'https://ink-playground.com/',\n};\n\nexport const Whitepaper = [\n    {\n        description: 'English',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/en.pdf',\n        icon: `sticky note outline`,\n    },\n    {\n        description: 'Japanese',\n        link: 'https://github.com/stakedtechnologies/plasmdocs/blob/master/wp/jp.pdf',\n        icon: `sticky note outline`,\n    },\n];\n\nexport const Community = [\n    {\n        description: 'Discord',\n        link: Links.discord,\n        icon: 'discord',\n    },\n    {\n        description: 'Telegram',\n        link: Links.telegram,\n        icon: 'telegram',\n    },\n];\n\nexport const Company = [\n    {\n        description: 'Home',\n        link: Links.home,\n    },\n    {\n        description: 'Contact us',\n        link: `mailto:${Links.email}`,\n    },\n];\n\nexport const Products = [\n    {\n        description: 'Plasm',\n        link: 'https://github.com/staketechnologies/Plasm',\n    },\n    {\n        description: 'Plasm Portal Sites',\n        link: 'https://github.com/staketechnologies/apps',\n    },\n    {\n        description: 'Plasm Lockdrop',\n        link: 'https://github.com/staketechnologies/lockdrop-ui',\n    },\n    {\n        description: 'Plasm documentations',\n        link: 'https://github.com/staketechnologies/plasmdocs',\n    },\n    {\n        description: 'Plasm homepage',\n        link: 'https://github.com/staketechnologies/plasmnet.io',\n    },\n];\n\nexport const Collaboration = [\n    {\n        description: 'Substrate Builders Program',\n        link: 'https://builders.parity.io/',\n    },\n    {\n        description: 'Web3 foundation grants program',\n        link: 'https://web3.foundation/',\n    },\n];\n\nexport const Blogs = [\n    {\n        description: 'Medium',\n        link: Links.blog,\n    },\n];\n\nexport const Discussions = [\n    {\n        link: Links.discord,\n        className: 'discord',\n    },\n    {\n        link: Links.telegram,\n        className: 'telegram',\n    },\n    {\n        link: Links.twitter,\n        className: 'twitter',\n    },\n    {\n        link: Links.github,\n        className: 'github',\n    },\n];\n","export const ThemeColors = {\n    darkGrey: '#383838',\n    lightGrey: '#999999',\n    white: '#ffffff',\n    black: '#000000',\n    darkBlue: '#2C3E50',\n    orange: '#FF5838',\n    darkRed: '#5c0f0f',\n    blue: '#4C8DFF',\n    lightBlue: '#56ccf2',\n};\n\nexport const ThemeFontFamily = {\n    logo: 'sans',\n    paragraph: 'not sans',\n};\n\nconst colors = {\n    transparent: 'rgba(0, 0, 0, 0)',\n    footerTransparent: 'rgba(0, 0, 0, 0.12)',\n    navy: '#1d417f',\n    ceruleanBlue: '#102e83',\n    blue: '#2179ee',\n    lightBlue: '#56ccf2',\n    periwinkle: '#D4D3E9',\n    teal: '#00FFD1',\n    green: '#28D24E',\n    crimson: '#DC143C',\n    red: '#D22828',\n    lightRed: '#ED0257',\n    coral: '#ff6759',\n    pink: '#FF17E8',\n    gold: '#f0b95b',\n    yellow: '#FFC700',\n    purple: '#7537ef',\n    lightPurple: '#56408B',\n    darkPurple: 'rgba(10, 7, 82, 0.75)',\n    softPurple: '#9795C5',\n    white: '#ffffff',\n    creamWhite: '#f4f5f7',\n    black: '#000000',\n    grey: '#333333',\n    lightGrey: 'grey',\n    softGrey: '#1D1B4D',\n    slaty: '#797992',\n    lavender: '#e5e5f8',\n    rat: '#cecddc',\n};\n\nconst secondaryColors = {\n    grey10: '#f3f4f8',\n    grey20: '#e1e5eb',\n    grey30: '#c2c6cc',\n    grey40: '#9ea2a8',\n    grey50: '#686c73',\n    grey60: '#30363d',\n    blue10: '#ade7ff',\n    blue20: '#61bcff',\n    blue30: '#2179ee',\n    blue40: '#1f4ab4',\n    blue50: '#1d2064',\n    green10: '#b5ffcb',\n    green20: '#5dffa3',\n    green30: '#00cc9a',\n    green40: '#219a8a',\n    green50: '#183f51',\n    purple10: '#dec7ff',\n    purple20: '#a673ff',\n    purple30: '#7537ef',\n    purple40: '#4e23b6',\n    purple50: '#2d1b64',\n    coral10: '#ffc6b3',\n    coral20: '#ff8e75',\n    coral30: '#ff6759',\n    coral40: '#eb312a',\n    coral50: '#7b1e30',\n    gold10: '#ffedc2',\n    gold20: '#ffda8b',\n    gold30: '#f0b95b',\n    gold40: '#e5a229',\n    gold50: '#6a4a24',\n};\n\nconst breakpoints = ['31.25em', '43.75em', '46.875em'];\nconst fontSizes = ['1.2rem', '1.4rem', '1.6rem', '1.8rem', '2.4rem', '2.8rem', '3.2rem', '4.0rem', '4.8rem', '6.4rem'];\nconst space = ['0', '.4rem', '.8rem', '1.2rem', '1.6rem', '2.0rem', '3.2rem', '4.8rem', '6.4rem', '9.6rem'];\n\nconst font =\n    'Work Sans, sans-serif, -apple-system, BlinkMacSystemFont,\"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\"Droid Sans\", \"Helvetica Neue\";-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n\nexport interface StyleClosetTheme {\n    breakpoints: string[];\n    fontSizes: string[];\n    space: string[];\n    colors: { [key in keyof typeof colors]: string };\n    secondaryColors: { [key in keyof typeof secondaryColors]: string };\n    font: string;\n}\n\nexport const theme: StyleClosetTheme = {\n    breakpoints,\n    fontSizes,\n    space,\n    colors,\n    secondaryColors,\n    font,\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport { Company, Products, Collaboration, Blogs, Community } from '../data/links';\nimport Divider from '@material-ui/core/Divider';\nimport { ThemeColors } from '../theme/themes';\n\nfunction Copyright() {\n    return (\n        <>\n            <Typography variant=\"body2\">\n                {'© 2019-' + new Date().getFullYear() + ' '}\n                <Link color=\"inherit\" href=\"https://stake.co.jp/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                    Stake Technologies, Inc.\n                </Link>{' '}\n                {'All Rights Reserved.'}\n            </Typography>\n        </>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(10),\n    },\n    socialIcon: {\n        color: 'white',\n        fontSize: 60,\n        paddingLeft: theme.spacing(1),\n    },\n    footer: {\n        padding: theme.spacing(2),\n        backgroundColor: 'white',\n        color: 'black',\n    },\n    footerHeader: {\n        color: ThemeColors.darkBlue,\n    },\n    siteMap: {},\n}));\n\nexport default function StickyFooter() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <footer className={classes.footer}>\n                <Container maxWidth=\"lg\">\n                    <Grid container spacing={4} justify=\"center\" className={classes.siteMap}>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Company\n                            </Typography>\n                            <Divider />\n\n                            <List component=\"nav\">\n                                {Company.map(company => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={company.link}\n                                        key={company.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={company.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Repositories\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Products.map(product => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={product.link}\n                                        key={product.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={product.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Collaboration\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Collaboration.map(collaboration => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={collaboration.link}\n                                        key={collaboration.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={collaboration.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Blog\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Blogs.map(blog => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={blog.link}\n                                        key={blog.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={blog.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                                Community\n                            </Typography>\n                            <Divider />\n                            <List component=\"nav\">\n                                {Community.map(community => (\n                                    <Link\n                                        color=\"inherit\"\n                                        href={community.link}\n                                        key={community.description}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        <ListItem button>\n                                            <ListItemText primary={community.description} />\n                                        </ListItem>\n                                    </Link>\n                                ))}\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Container>\n\n                <Container maxWidth=\"sm\">\n                    <Typography variant=\"body1\" component=\"h1\" align=\"center\" className={classes.footerHeader}>\n                        <Copyright />\n                    </Typography>\n                </Container>\n            </footer>\n        </div>\n    );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { ThemeColors } from '../theme/themes';\n\ninterface Props {\n    maxWidth: false | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | undefined;\n}\n\nconst SectionCard: React.FC<Props> = ({ maxWidth, children }) => {\n    const useStyles = makeStyles(theme => ({\n        paper: {\n            backgroundColor: ThemeColors.white,\n            padding: theme.spacing(4, 0, 4),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth={maxWidth}>\n                <Paper elevation={5} className={classes.paper}>\n                    {children}\n                </Paper>\n            </Container>\n        </>\n    );\n};\n\nexport default SectionCard;\n","import { OptionItem, LockMenu } from '../types/LockdropModels';\nimport moment from 'moment';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport Lockdrop from '../contracts/Lockdrop.json';\n\n/**\n * the time zone is set to UTC as default\n * lockdrop starts from 1584230400 epoch time\n */\nexport const firstLockdropStart = moment.utc('2020-03-15 00:00:00');\n\n/**\n * the 1st lockdrop will last for 30 days\n * lockdrop ends in 1586822400\n */\nexport const firstLockdropEnd = moment.utc('2020-04-14 00:00:00');\n\n// todo: the second lockdrop dates are just a temporary value\nexport const secondLockdropStart = moment.utc('2020-08-10 00:00:00');\n\nexport const secondLockdropEnd = moment.utc('2020-09-10 00:00:00');\n\n//todo: add other contract addresses when ready\nexport const lockdropContracts = {\n    firstLock: {\n        main: '0x458DaBf1Eff8fCdfbF0896A6Bd1F457c01E2FfD6',\n        ropsten: '0xEEd84A89675342fB04faFE06F7BB176fE35Cb168',\n        private: Lockdrop.networks[5777].address,\n    },\n    secondLock: {\n        main: '0x',\n        ropsten: '0x69e7eb3ab94a10e4f408d842b287c70aa0d11649',\n        private: Lockdrop.networks[5777].address,\n    },\n    thirdLock: { main: '0x', ropsten: '0x', private: Lockdrop.networks[5777].address },\n};\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n    { label: '1000 Days', value: 1000, rate: 1600 },\n];\n\n/**\n * used to define the content of the dropdown menu\n */\nexport const ethDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n    { label: '100 Days', value: 100, rate: 1600 },\n];\n\n/**\n * BTC lockdrop does not support 1000 days lock due to CSV lock scheme\n */\nexport const btcDurations: OptionItem[] = [\n    { label: '30 Days', value: 30, rate: 24 },\n    { label: '100 Days', value: 100, rate: 100 },\n    { label: '300 Days', value: 300, rate: 360 },\n];\n\n/**\n * BTC lockdrop for Dusty network. The lock days are much shorter\n */\nexport const btcDustyDurations: OptionItem[] = [\n    { label: '3 Days', value: 3, rate: 24 },\n    { label: '10 Days', value: 10, rate: 100 },\n    { label: '30 Days', value: 30, rate: 360 },\n];\n\nexport const firstLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n\nexport const secondLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        //uri: '/lock-form/first',\n        icon: ethLogo,\n        startDate: secondLockdropStart,\n        endDate: secondLockdropEnd,\n        disabled: true,\n    },\n    {\n        title: 'BTC Lock',\n        uri: '/lock-form/first',\n        icon: btcLogo,\n        startDate: secondLockdropStart,\n        endDate: secondLockdropEnd,\n        disabled: true,\n    },\n];\n\nexport const dustyLock: LockMenu[] = [\n    {\n        title: 'ETH Lock',\n        uri: '/lock-form/dusty-eth',\n        icon: ethLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n    {\n        title: 'BTC Lock',\n        uri: '/lock-form/dusty-btc',\n        icon: btcLogo,\n        startDate: firstLockdropStart,\n        endDate: firstLockdropEnd,\n    },\n];\n","import React from 'react';\nimport {\n    IonContent,\n    IonPage,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonItem,\n    IonIcon,\n    IonLabel,\n    IonButton,\n    IonRouterLink,\n} from '@ionic/react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport lockdropLogoA from '../resources/ld_logo_a.png';\nimport lockdropLogoB from '../resources/ld_logo_b.png';\nimport ethLogo from '../resources/ethereum_logo.svg';\nimport btcLogo from '../resources/bitcoin_logo.svg';\nimport { makeStyles } from '@material-ui/core';\nimport { firstLockdropStart, firstLockdropEnd } from '../data/lockInfo';\n\n// randomize the lockdrop logo\n// this is for AB testing the logo\nconst lockdropLogo = Math.floor(Math.random() * 10) > 5 ? lockdropLogoA : lockdropLogoB;\n\nconst useStyles = makeStyles(() => ({\n    logoImg: {\n        display: 'block',\n        maxWidth: '100%',\n        width: '20rem',\n        height: 'auto',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        //maxHeight: '500',\n    },\n}));\n\nexport const LandingPage: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <IonPage>\n            <Navbar />\n            <IonContent>\n                <SectionCard maxWidth=\"lg\">\n                    <img src={lockdropLogo} alt=\"\" className={classes.logoImg} />\n                    <IonCardHeader>\n                        <IonCardSubtitle>Plasm Network Lockdrop Web Application</IonCardSubtitle>\n                        <IonCardTitle>Plasm Network Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        Lockdrop is a new token distribution mechanism that emphasizes on low risk and fairness to its\n                        users. For more details, checkout{' '}\n                        <a\n                            color=\"inherit\"\n                            href=\"https://medium.com/stake-technologies/what-is-and-how-to-join-the-plasm-network-lockdrop-the-ultimate-guide-e3f4bdec83de\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            this\n                        </a>{' '}\n                        article,\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>First Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/first\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n\n                    <IonCardContent>\n                        Lock Start: {firstLockdropStart.format('YYYY-MM-DD hh:mm').toString()} UTC\n                        <br />\n                        Lock End: {firstLockdropEnd.format('YYYY-MM-DD hh:mm').toString()} UTC\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Second Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Plasm ETH Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Plasm BTC Lock</IonLabel>\n                        <IonButton fill=\"outline\" slot=\"end\" disabled={true}>\n                            View\n                        </IonButton>\n                    </IonItem>\n                    <IonCardContent>\n                        Lock Start: TBA\n                        <br />\n                        Lock End: TBA\n                    </IonCardContent>\n                </SectionCard>\n\n                <SectionCard maxWidth=\"lg\">\n                    <IonCardHeader>\n                        <IonCardTitle>Dusty Lockdrop</IonCardTitle>\n                    </IonCardHeader>\n                    <IonItem>\n                        <IonIcon src={ethLogo} slot=\"start\" />\n                        <IonLabel>Dusty ETH Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-eth\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                    <IonItem>\n                        <IonIcon src={btcLogo} slot=\"start\" />\n                        <IonLabel>Dusty BTC Lock</IonLabel>\n\n                        <IonButton fill=\"outline\" slot=\"end\">\n                            <IonRouterLink routerLink=\"/lock-form/dusty-btc\">View</IonRouterLink>\n                        </IonButton>\n                    </IonItem>\n                </SectionCard>\n                <Footer />\n            </IonContent>\n        </IonPage>\n    );\n};\n\nexport default LandingPage;\n","import { IonSelect, IonSelectOption } from '@ionic/react';\nimport React from 'react';\nimport { OptionData } from '../types/LockdropModels';\n\n// react function component for making dropdown with the given items\nexport const DropdownOption = (props: OptionData) => {\n    const items = props.dataSets.map(x => {\n        return (\n            <IonSelectOption className=\"dropdown-item\" key={props.dataSets.indexOf(x)} value={x.value}>\n                {x.label}\n            </IonSelectOption>\n        );\n    });\n\n    return (\n        <IonSelect interface=\"popover\" onIonChange={e => props.onChoose(e)}>\n            {items}\n        </IonSelect>\n    );\n};\n","import { IonLabel, IonButton, IonItem, IonInput, IonCard, IonCardContent, IonChip } from '@ionic/react';\nimport React, { useState } from 'react';\nimport { LockInput, OptionItem } from '../../types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport { DropdownOption } from '../DropdownOption';\nimport Container from '@material-ui/core/Container';\nimport BN from 'bn.js';\nimport { Typography } from '@material-ui/core';\nimport quantstampLogo from '../../resources/quantstamp-logo.png';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport parse from 'html-react-parser';\nimport { ethDurations, ethDustyDurations } from '../../data/lockInfo';\n\ntype InputProps = {\n    token: string;\n    onSubmit: Function;\n    description?: string;\n    dusty?: boolean;\n};\n// the main component function\nconst LockdropForm = ({ token, onSubmit, description, dusty }: InputProps) => {\n    // states used in this component\n    const [lockAmount, setAmount] = useState<BN>(new BN(0));\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [affAccount, setAff] = useState('');\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            formRoot: {\n                padding: theme.spacing(4, 3, 0),\n            },\n            txButton: {\n                margin: theme.spacing(3),\n            },\n            formLabel: {\n                margin: theme.spacing(2),\n            },\n            quantLogo: {\n                marginRight: theme.spacing(2),\n                maxHeight: 20,\n                height: '100%',\n                verticalAlign: 'middle',\n            },\n            textBox: {\n                marginLeft: 'auto',\n                marginRight: 'auto',\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    // the submit button function\n    function handleSubmit() {\n        const inputs: LockInput = {\n            duration: lockDuration.value,\n            amount: lockAmount,\n            affiliation: affAccount,\n            rate: lockDuration.rate,\n        };\n        onSubmit(inputs);\n    }\n\n    // main render JSX\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.formRoot}>\n                    <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                        {dusty ? 'Dusty Plasm' : 'Plasm Main'} Network Ethereum Lockdrop\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                        Audited by{' '}\n                        <Link\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            <img src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                        </Link>\n                    </Typography>\n                    {/* <IonLabel className={classes.formLabel}>About</IonLabel> */}\n                    {description ? (\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>{parse(description)}</IonCardContent>\n                        </IonCard>\n                    ) : null}\n\n                    <IonItem>\n                        <IonLabel position=\"floating\">Number of {token}</IonLabel>\n                        <IonInput\n                            placeholder={'ex: 0.64646 ' + token}\n                            onIonInput={e => setAmount(((e.target as HTMLInputElement).value as unknown) as BN)}\n                        ></IonInput>\n                    </IonItem>\n                    <IonLabel className={classes.formLabel}>Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={dusty ? ethDustyDurations : ethDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                const durationSet = dusty ? ethDustyDurations : ethDurations;\n                                setDuration(\n                                    durationSet.filter(i => i.value === ((e.target.value as unknown) as number))[0],\n                                );\n                            }}\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonCard className={classes.textBox}>\n                            <IonCardContent>\n                                If you have a friend who is also participating in the lockdrop and is part of our\n                                affiliation program, please input the address. Both parties will be able to receive a\n                                bonus rate of 1% of what the friend is receiving. Checkout this{' '}\n                                <a href=\"https://medium.com/stake-technologies/lockdrop-with-friends-the-plasm-network-affiliation-program-b385c1cd800d\">\n                                    article\n                                </a>{' '}\n                                for details.\n                            </IonCardContent>\n                        </IonCard>\n                        <IonLabel position=\"floating\">Affiliation (optional)</IonLabel>\n\n                        <IonInput\n                            placeholder={'ex: 0x324632...'}\n                            onIonInput={e => setAff((e.target as HTMLInputElement).value)}\n                        ></IonInput>\n                    </IonItem>\n                    <Container>\n                        <IonButton expand=\"block\" onClick={() => handleSubmit()} className={classes.txButton}>\n                            Submit Transaction\n                        </IonButton>\n                    </Container>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockdropForm;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Web3 from 'web3';\n\nasync function web3Listener() {\n    // Modern dapp browsers...\n    if ((window as any).ethereum) {\n        const web3 = new Web3((window as any).ethereum);\n        try {\n            // Request account access if needed\n            await (window as any).ethereum.enable();\n            console.log('Dapp browser detected');\n            // Accounts now exposed\n            return web3;\n        } catch (error) {\n            return error;\n        }\n    }\n    // Legacy dapp browsers...\n    else if ((window as any).web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = (window as any).web3;\n        console.log('Injected web3 detected.');\n        return web3;\n    }\n    // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        return web3;\n    }\n}\n\n// const getWeb3 = () =>\n//     new Promise((resolve, reject) => {\n//         // Wait for loading completion to avoid race conditions with web3 injection timing.\n//         window.addEventListener('load', async () => {\n//             // Modern dapp browsers...\n//             if ((window as any).ethereum) {\n//                 const web3 = new Web3((window as any).ethereum);\n//                 try {\n//                     // Request account access if needed\n//                     await (window as any).ethereum.enable();\n//                     console.log('Dapp browser detected');\n//                     // Accounts now exposed\n//                     resolve(web3);\n//                 } catch (error) {\n//                     reject(error);\n//                 }\n//             }\n//             // Legacy dapp browsers...\n//             else if ((window as any).web3) {\n//                 // Use Mist/MetaMask's provider.\n//                 const web3 = (window as any).web3;\n//                 console.log('Injected web3 detected.');\n//                 resolve(web3);\n//             }\n//             // Fallback to localhost; use dev console port by default...\n//             else {\n//                 const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n//                 const web3 = new Web3(provider);\n//                 console.log('No web3 instance injected, using Local web3.');\n//                 resolve(web3);\n//             }\n//         });\n//     });\n\nexport const removeWeb3Event = () => {\n    new Promise((resolve, reject) => {\n        try {\n            window.removeEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // check if the event was already fired\n        if (document.readyState === 'complete') {\n            // reload page to reset the event\n            window.location.reload();\n        }\n\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        try {\n            window.addEventListener('load', () => resolve(web3Listener()));\n        } catch (error) {\n            reject(error);\n        }\n    });\n\nexport default getWeb3;\n","// the default introducer address when none is provided by the user\nexport const defaultAddress = '0x0000000000000000000000000000000000000000';\n\nexport const affiliationRate = 0.01;\n\nconst firstEthIntroducer = [\n    '0xd8de1f6764e442b8763d313722e9eaee3779707e',\n    '0x1d32750e8a03443f008236f7c344fc84821cf690',\n    '0xa5a6d551ab33c3920848844b3fe3b27591df8f10',\n    '0xd8068f813c45c88cebb02cbc0f91f95626ec9a34',\n    '0x45ee0a0db0e775aecbebb300ccfc6486690b3287',\n    '0xd419d53817e1daa7b2f72e51707774f3ff0a54a3',\n    '0x1080355c93a1b4c0dd3c340eed4f7e514c583077',\n    '0x0013aa2fb5ec916660b38f1d53d4fc9bf8ef8a84',\n    '0x78ce6849d00c2f22aec93d29144fc68366cf0c62',\n    '0x60dc4b3d8e8d2c5449186270f385a56a21bb82c3',\n    '0x380566185c87ab93ca4edd474cf6998b5fc4153e',\n    '0x6a61dc52015945dfc6cd0c42f94a722d5022e3d1',\n    '0x520e74218a9fd5563855f11d204810281a833e0f',\n    '0x27c72e4bd23c910218d8f06c4a1742e06657c874',\n    '0xd307ff28710b7a4587200c5ba4c67648c1f24045',\n    '0x9498db340a3ecab7bb0973ee36e95e58c8e58a41',\n    '0xe552821ee85284249c71d4abfc4437992ed2fb93',\n    '0xc78a748dccbd806ae782eb3b8590ae7d162e5a90',\n    '0x20edd77ea8582f4a2400d3c0d53154a74a1ca887',\n    '0xeef2e4a5f6a01d5fb89f38211fb4e6a8702d33b6',\n    '0x531c2607862de00604f600cff6be9cb312467570',\n    '0xf22b286fda7369255376742f360ffcee4e1fbd42',\n    '0xb35e0bfec9facd8f2dcc0e43e68350d5e7baa82f',\n    '0x7b4d4ba1070c4562c568fed6280c800a68fa5427',\n    '0x81042f7f99a86d3981308e72feb36bd791c31920',\n    '0xb98df9f7cdc3a983081cefa1cd94aed4e936f1a9',\n    '0x5b6c1f8838b9abf16c0383b7e4f3c5a750707af2',\n    '0x711b3ca2cc9d5a827f83d5ceafcb0925f2fb82b3',\n    '0x8e7fcc7a17f00f0f5f85f2d5964a581d0813c8a6',\n    '0x6b5e2758bdb9ed798acbfd64104c1deaf09cd24b',\n    '0x55763d6db54736084c1b8d010aa1d99f0dc6d07c',\n    '0xfadf736b86f09f2d07d2b655cfc848fe215140d4',\n    '0x9f4f9e15a4a963a9a3885979cc64b326dcaa18a8',\n    '0x0def9b4811e4c4e9da5acf82d421c97b5e9c152f',\n];\n\nconst secondEthIntroducer = ['add Ethereum addresses'];\n\nconst secondBtcIntroducer = ['add Bitcoin addresses'];\n\nexport const validEthAddressList = [...firstEthIntroducer, ...secondEthIntroducer, defaultAddress];\n\nexport const validBtcAddressList = [...secondBtcIntroducer];\n\n/**\n * Checks if the given introducer address is listed as a valid introducer for the lockdrop\n * @param introducer a bitcoin or ethereum address\n */\nexport function isValidIntroducerAddress(introducer: string) {\n    return (\n        validEthAddressList.includes(introducer.toLowerCase()) || validBtcAddressList.includes(introducer.toLowerCase())\n    );\n}\n","import BigNumber from 'bignumber.js';\nimport { LockEvent } from './LockdropModels';\n\nexport class PlmDrop {\n    receiver: string;\n    basePlm: BigNumber;\n    introducerAndBonuses: [string, BigNumber][];\n    affiliationRefsBonuses: [string, BigNumber][];\n    locks: LockEvent[];\n\n    constructor(\n        receiver: string,\n        basePlm: BigNumber,\n        introducerAndBonuses: [string, BigNumber][],\n        affiliationRefsBonuses: [string, BigNumber][],\n        locks: LockEvent[],\n    ) {\n        this.receiver = receiver;\n        this.basePlm = basePlm;\n        this.introducerAndBonuses = introducerAndBonuses;\n        this.affiliationRefsBonuses = affiliationRefsBonuses;\n        this.locks = locks;\n    }\n\n    getTotal() {\n        let totalIntroBonuses = new BigNumber(0);\n\n        for (let i = 0; i < this.introducerAndBonuses.length; i++) {\n            totalIntroBonuses = totalIntroBonuses.plus(this.introducerAndBonuses[i][1]);\n        }\n\n        const affBonus = this.calculateAffBonus();\n\n        return this.basePlm\n            .plus(totalIntroBonuses)\n            .plus(affBonus)\n            .toFixed();\n    }\n\n    getTotalPlm() {\n        return new BigNumber(this.getTotal()).toFixed();\n    }\n\n    getAffBonus() {\n        return new BigNumber(this.calculateAffBonus()).toFormat(2);\n    }\n\n    getIntroBonus() {\n        return new BigNumber(this.calculateIntroBonus()).toFormat(2);\n    }\n\n    // calculate the number of PLM you get for being affiliated\n    calculateAffBonus() {\n        return this.affiliationRefsBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n\n    // the number of PLM you get for referencing an affiliate\n    calculateIntroBonus() {\n        return this.introducerAndBonuses.reduce(\n            (sum: BigNumber, bonus: [string, BigNumber]): BigNumber => sum.plus(bonus[1]),\n            new BigNumber(0),\n        );\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// This module is used for communicating with the Ethereum smart contract\nimport Lockdrop from '../../contracts/Lockdrop.json';\nimport getWeb3 from '../getWeb3';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport { LockEvent, LockInput } from '../../types/LockdropModels';\nimport BN from 'bn.js';\nimport BigNumber from 'bignumber.js';\nimport { isValidIntroducerAddress, defaultAddress, affiliationRate } from '../../data/affiliationProgram';\nimport { lockDurationToRate } from '../plasmUtils';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport Web3Utils from 'web3-utils';\nimport { ecrecover, fromRpcSig, toBuffer, bufferToHex } from 'ethereumjs-util';\nimport * as lockInfo from '../../data/lockInfo';\nimport EthCrypto from 'eth-crypto';\n\n/**\n * exchange rate at the start of April 14 UTC (at the end of the first lockdrop)\n * this is only used for the first lockdrop\n */\nexport const ethFinalExRate = 205.56;\n\n// the total amount of issueing PLMs at 1st Lockdrop.\nconst totalAmountOfPLMs = new BigNumber('500000000.000000000000000');\nconst totalAmountOfPLMsForLockdrop = totalAmountOfPLMs.times(new BigNumber('17').div(new BigNumber('20')));\n\n/**\n * asks the user to sign a hashed message from their dApp browser to recover the user's public key.\n * This will return a compressed public key.\n * @param web3 a web3.js instance to access the user's wallet information\n * @param message an optional message that the user should sign\n */\nexport async function getPubKey(web3: Web3, message?: string) {\n    // default message\n    let msg = 'Please Sign this message to generate Plasm Network address';\n    // change message if the function provides one\n    if (message) {\n        msg = message;\n    }\n    const hash = web3.eth.accounts.hashMessage(msg);\n    const addresses = await web3.eth.getAccounts();\n    // the password parameter is only used for specific wallets (most wallets will prompt the user to provide it)\n    const sig = '0x' + (await web3.eth.personal.sign(msg, addresses[0], 'SecureP4ssW0rd')).slice(2);\n    const res = fromRpcSig(sig);\n    const publicKey = bufferToHex(ecrecover(toBuffer(hash), res.v, res.r, res.s));\n    const compressedPubKey = '0x' + EthCrypto.publicKey.compress(publicKey.replace('0x', ''));\n\n    return compressedPubKey;\n}\n\n/**\n * returns an array of locked events for the lock contract\n * this function searches from the genesis block\n * @param web3 a web3.js instance to interact with the blockchain\n * @param instance a contract instance to parse the contract events\n */\nexport async function getAllLockEvents(web3: Web3, instance: Contract): Promise<LockEvent[]> {\n    // todo: set this value as the block number of where the contract was deployed for each network\n    const mainnetStartBlock = 0;\n    const ev = await instance.getPastEvents('Locked', {\n        fromBlock: mainnetStartBlock,\n    });\n\n    const eventHashes = await Promise.all(\n        ev.map(async e => {\n            return Promise.all([Promise.resolve(e.returnValues), web3.eth.getTransaction(e.transactionHash)]);\n        }),\n    );\n\n    return Promise.all(\n        eventHashes.map(async e => {\n            // e[0] is lock event and e[1] is block hash\n            const blockHash = e[1];\n            const lockEvent = e[0];\n\n            const transactionString = await Promise.resolve(web3.eth.getBlock(blockHash.blockNumber as number));\n            const time = transactionString.timestamp.toString();\n            return {\n                eth: lockEvent.eth as BN,\n                duration: lockEvent.duration as number,\n                lock: lockEvent.lock as string,\n                introducer: lockEvent.introducer as string,\n                blockNo: blockHash.blockNumber,\n                timestamp: time,\n                lockOwner: blockHash.from,\n                blockHash: blockHash.blockHash,\n                transactionHash: blockHash.hash,\n            } as LockEvent;\n        }),\n    );\n}\n\n/**\n * returns a 0 ethereum address if an empty string was provided.\n * this function is used for lockers with no introducers\n * @param aff a valid introducer ETH address\n */\nexport function defaultAffiliation(aff: string) {\n    // check if affiliation address is not empty and is not themselves\n    if (aff) {\n        // return itself when it is a valid address\n        return aff;\n    } else {\n        // if it is an invalid address, return the default affiliation address\n        return defaultAddress;\n    }\n}\n\nfunction plmBaseIssueRatio(lockData: LockEvent, ethExchangeRate: BigNumber): BigNumber {\n    // get lockTimeBonus * ethExRate\n    const bonusRate = new BigNumber(lockDurationToRate(lockData.duration)).times(ethExchangeRate);\n\n    // calculate issuingPLMRate = lockedEth([ETH]) * lockBonusRate * ethExRate\n    const issuingRatio: BigNumber = new BigNumber(Web3Utils.fromWei(lockData.eth.toString(), 'ether')).times(\n        new BigNumber(bonusRate),\n    );\n    return issuingRatio;\n}\n\nfunction totalPlmBaseIssuingRate(allLocks: LockEvent[], ethExchangeRate: BigNumber): BigNumber {\n    return allLocks.reduce(\n        (sum: BigNumber, value: LockEvent): BigNumber => sum.plus(plmBaseIssueRatio(value, ethExchangeRate)),\n        new BigNumber(0),\n    );\n}\n\nfunction plmBaseIssueAmountInLock(lock: LockEvent, totalPlmsRate: BigNumber, ethExchangeRate: BigNumber): BigNumber {\n    const currentIssue = plmBaseIssueRatio(lock, ethExchangeRate);\n    return totalAmountOfPLMsForLockdrop.times(currentIssue).div(totalPlmsRate);\n}\n\n/**\n * returns an array of addresses that referenced the given address for the affiliation program\n * @param address ETH address\n * @param lockData list of contract lock event\n */\nfunction getAllAffReferences(address: string, lockData: LockEvent[]) {\n    // check if there is\n    const results: LockEvent[] = [];\n    const refEvents = lockData.filter(e => e.introducer.toLowerCase() === address.toLowerCase());\n\n    for (let i = 0; i < refEvents.length; i++) {\n        results.push(refEvents[i]);\n    }\n\n    return results;\n}\n\nexport function calculateNetworkAlpha(allLocks: LockEvent[]): BigNumber {\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    const totalPlmRate = totalPlmBaseIssuingRate(allLocks, ethExchangeRate);\n\n    // alpha_1 = totalAmountOfPLMsForLockdrop /totalPlmRate\n    const alpha1 = totalAmountOfPLMsForLockdrop.div(totalPlmRate);\n\n    return alpha1;\n}\n\n/**\n * calculate the total receiving PLMs from the lockdrop including the affiliation program bonus\n * in this function, affiliation means the current address being referenced by others\n * and introducer means this address referencing other affiliated addresses\n * @param address the lockdrop participant's ETH address\n * @param lockData a list of lockdrop contract events\n */\nexport function calculateTotalPlm(address: string, lockData: LockEvent[]): PlmDrop {\n    const receivingPlm = new PlmDrop(address, new BigNumber(0), [], [], []);\n\n    const currentAddressLocks = lockData.filter(i => i.lockOwner.toLowerCase() === address.toLowerCase());\n\n    receivingPlm.locks = currentAddressLocks;\n\n    const ethExchangeRate = new BigNumber(ethFinalExRate);\n\n    // get total plm rate for calculating actual issuing PLMs.\n    const totalPlmRate = totalPlmBaseIssuingRate(lockData, ethExchangeRate);\n\n    for (let i = 0; i < currentAddressLocks.length; i++) {\n        // calculate total base issuing PLM tokens\n        const issuingPlm = plmBaseIssueAmountInLock(currentAddressLocks[i], totalPlmRate, ethExchangeRate);\n\n        // add value to the total amount\n        receivingPlm.basePlm = receivingPlm.basePlm.plus(issuingPlm);\n\n        // self -> introducer : bonus getting PLMs.\n        // check if this address has an introducer\n        if (\n            isValidIntroducerAddress(currentAddressLocks[i].introducer) &&\n            currentAddressLocks[i].introducer !== defaultAddress\n        ) {\n            receivingPlm.introducerAndBonuses.push([\n                currentAddressLocks[i].introducer,\n                issuingPlm.times(new BigNumber(affiliationRate)),\n            ]);\n        }\n    }\n\n    // someone -> self(introducer) : bonus getting PLMs.\n    // calculate affiliation bonus for this address\n    if (isValidIntroducerAddress(address)) {\n        const allRefs = getAllAffReferences(address, lockData);\n\n        for (let i = 0; i < allRefs.length; i++) {\n            // reference amount * 0.01\n            receivingPlm.affiliationRefsBonuses.push([\n                allRefs[i].lock,\n                plmBaseIssueAmountInLock(allRefs[i], totalPlmRate, ethExchangeRate).times(\n                    new BigNumber(affiliationRate),\n                ),\n            ]);\n        }\n    }\n    return receivingPlm;\n}\n\n/**\n * parses through the given lock events to calculate the total amount of locked ETH\n * @param locks a list of lockdrop contract events\n */\nexport function getTotalLockVal(locks: LockEvent[]): string {\n    let totalVal = new BigNumber(0);\n    if (locks.length > 0) {\n        for (let i = 0; i < locks.length; i++) {\n            const currentEth = new BigNumber(locks[i].eth.toString());\n            totalVal = totalVal.plus(currentEth);\n        }\n    }\n    return Web3Utils.fromWei(totalVal.toFixed(), 'ether');\n}\n\n/**\n * authenticate if the client has web3 enabled wallet installed and can communicate with the blockchain\n * returns the web3.js instance, list of active accounts and the contract instance\n * @param lockSeason lockdrop season to indicate which lockdrop contract it should look for\n */\nexport async function connectWeb3(lockSeason: 'firstLock' | 'secondLock' | 'thirdLock') {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n    //const web3 = getEthInst();\n\n    if (web3 instanceof Web3) {\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n        const lockdropAbi = Lockdrop.abi as Web3Utils.AbiItem[];\n\n        // Get the contract instance.\n        //const networkId = await web3.eth.net.getId();\n\n        //const deployedNetwork = (Lockdrop.networks as any)[networkId];\n\n        const networkType = await web3.eth.net.getNetworkType();\n        const contractAddress = (lockInfo.lockdropContracts[lockSeason] as any)[networkType];\n\n        // create an empty contract instance first\n        const instance = new web3.eth.Contract(lockdropAbi, contractAddress !== '0x' && contractAddress);\n\n        return {\n            web3: web3,\n            accounts: accounts,\n            contract: instance,\n        };\n    } else {\n        throw new Error('Cannot get Web3 instance from the client');\n    }\n}\n\n/**\n * returns the UTC date in epoch string of when the lockdrop smart contract will end\n * @param contract the lockdrop contract instance\n */\nexport async function getContractEndDate(contract: Contract) {\n    const _lockdropEndDate = await contract.methods.LOCK_END_TIME().call();\n    return _lockdropEndDate as string;\n}\n\n/**\n * returns the UTC date of when the lockdrop smart contract will start\n * @param contract the lockdrop contract instance\n */\nexport async function getContractStartDate(contract: Contract) {\n    const _lockdropStartDate = await contract.methods.LOCK_START_TIME().call();\n    return _lockdropStartDate as string;\n}\n\n/**\n * validate and create a transaction to the lock contract with the given parameter.\n * This will return the transaction hash\n * @param txInput the lock parameter for the contract\n * @param address the address of the locker\n * @param contract smart contract instance used to invoke the contract method\n */\nexport async function submitLockTx(txInput: LockInput, address: string, contract: Contract) {\n    // checks user input\n    if (txInput.amount <= new BN(0) || txInput.duration <= 0) {\n        throw new Error('You are missing an input!');\n    }\n\n    // return a default address if user input is empty\n    const introducer = defaultAffiliation(txInput.affiliation).toLowerCase();\n    // check user input\n    if (introducer === address) {\n        throw new Error('You cannot affiliate yourself');\n    }\n    if (introducer && !Web3.utils.isAddress(introducer)) {\n        throw new Error('Please input a valid Ethereum address');\n    }\n\n    // convert user input to Wei\n    const amountToSend = Web3.utils.toWei(txInput.amount, 'ether');\n    let hash = '';\n\n    // communicate with the smart contract\n    await contract.methods\n        .lock(txInput.duration, introducer)\n        .send({\n            from: address,\n            value: amountToSend,\n        })\n        .on('transactionHash', (res: any) => {\n            hash = res;\n        });\n\n    if (hash === '') {\n        throw new Error('An error has occurred while trying to send transaction');\n    }\n    return hash;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport { LockEvent, TimeFormat } from '../../types/LockdropModels';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport {\n    Divider,\n    Grid,\n    ListItemSecondaryAction,\n    IconButton,\n    LinearProgress,\n    createStyles,\n    makeStyles,\n    Tooltip,\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        itemButtons: {\n            verticalAlign: 'middle',\n            textAlign: 'center',\n            alignContent: 'center',\n        },\n    }),\n);\n\ninterface CurrentLockProps {\n    web3: Web3;\n    accounts: string[]; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n}\n\ninterface UnlockInfoProps {\n    lockInfo: LockEvent;\n    web3: Web3;\n    address: string;\n}\n// displays a list of locks tha the current user has locked\nconst CurrentLocks: React.FC<CurrentLockProps> = ({ web3, accounts, lockData }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>([]);\n    const [isLoadingComp, setLoadState] = useState(true);\n\n    useEffect(() => {\n        setEvents(lockData.filter(i => i.lockOwner === accounts[0]));\n        setLoadState(false);\n    }, [lockData, accounts]);\n\n    return (\n        <div className={classes.lockListPage}>\n            {isLoadingComp ? (\n                <CircularProgress />\n            ) : (\n                <>\n                    {lockEvents.length > 0 ? (\n                        <>\n                            <h1>Your Locks</h1>\n                            <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                            <List className={classes.listRoot} subheader={<li />}>\n                                <li className={classes.listSection}>\n                                    <ul className={classes.ul}>\n                                        <ListSubheader>You have {lockEvents.length} locks</ListSubheader>\n                                        <Divider />\n                                        {lockEvents.map(eventItem => (\n                                            <div key={eventItem.blockHash}>\n                                                <UnlockInfo lockInfo={eventItem} web3={web3} address={accounts[0]} />\n                                                <Divider />\n                                            </div>\n                                        ))}\n                                    </ul>\n                                </li>\n                            </List>\n                        </>\n                    ) : (\n                        <>\n                            <h1>No Locks</h1>\n                            <h4>Please lock some ETH!</h4>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\n// the individual lock item\nconst UnlockInfo: React.FC<UnlockInfoProps> = ({ lockInfo, web3, address }) => {\n    const classes = useStyles();\n    // 24 hours in epoch\n    const epochDayMil = 86400000;\n\n    const getUnlockDate = useCallback(() => {\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n        // locked date + lock duration(epoch)\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        return unlockDate;\n    }, [lockInfo]);\n\n    const calculateTimeLeft = useCallback(() => {\n        // milliseconds left till unlock\n        const tillEnd = getUnlockDate() - +Date.now();\n        return {\n            days: Math.floor(tillEnd / (1000 * 60 * 60 * 24)),\n            hours: Math.floor((tillEnd / (1000 * 60 * 60)) % 24),\n            minutes: Math.floor((tillEnd / 1000 / 60) % 60),\n            seconds: Math.floor((tillEnd / 1000) % 60),\n        };\n    }, [getUnlockDate]);\n\n    const [canUnlock, setLockState] = useState(false);\n    const [tillUnlock, setUnlockDate] = useState<TimeFormat>(calculateTimeLeft());\n    const [unlocked, setUnlockState] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n\n    const checkUnlock = useCallback(async () => {\n        // get today in UTC epoch seconds (js default is ms)\n        const today = Date.now();\n\n        // Ethereum timestamp is in seconds while JS Date is ms\n        const lockedDay = Number(lockInfo.timestamp) * 1000;\n\n        const unlockDate = lockedDay + lockInfo.duration * epochDayMil;\n\n        // get contract balance\n        const lockBalance = await web3.eth.getBalance(lockInfo.lock);\n        // check if the balance is 0 or not\n        const lockClaimState = lockBalance === '0';\n        // console.log(lockBalance);\n        setUnlockState(lockClaimState);\n        return today > unlockDate;\n    }, [lockInfo, web3]);\n\n    // update time value every second\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setUnlockDate(calculateTimeLeft());\n            setLockState(await checkUnlock());\n        }, 1000);\n        // cleanup async hook\n        return () => {\n            clearInterval(interval);\n        };\n    }, [calculateTimeLeft, checkUnlock]);\n\n    // initial update\n    useEffect(() => {\n        setUnlockDate(calculateTimeLeft());\n        checkUnlock().then(setLockState);\n    }, [calculateTimeLeft, checkUnlock]);\n\n    // click unlock ETH\n    const handleClick = () => {\n        setLoading(true);\n        web3.eth\n            .sendTransaction({\n                from: address,\n                to: lockInfo.lock,\n                value: '0',\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(() => {\n                // get contract balance\n                web3.eth\n                    .getBalance(lockInfo.lock)\n                    .then(lockBalance => {\n                        // check if the balance is 0 or not\n                        const lockClaimState = lockBalance === '0';\n\n                        setUnlockState(lockClaimState);\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    })\n                    .finally(() => {\n                        setLoading(false);\n                    });\n            });\n    };\n\n    return (\n        <>\n            <ListItem>\n                <Grid container spacing={4} alignItems=\"center\">\n                    <Grid item xs={9}>\n                        <ListItemText>\n                            <h5>Lock address: {lockInfo.lock}</h5>\n                            <p>\n                                Locked {Web3Utils.fromWei(lockInfo.eth, 'ether')} ETH for {lockInfo.duration} days\n                            </p>\n                            {lockInfo.introducer !== defaultAddress ? (\n                                <p>Introducer: {lockInfo.introducer}</p>\n                            ) : (\n                                <p>No introducer</p>\n                            )}\n                            {isLoading ? (\n                                <>\n                                    <LinearProgress />\n                                </>\n                            ) : (\n                                <>\n                                    {!canUnlock ? (\n                                        <Grid container spacing={1}>\n                                            <Grid item>\n                                                <p>{tillUnlock.days} Days </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.hours} Hours </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.minutes} Minutes </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>{tillUnlock.seconds} Seconds </p>\n                                            </Grid>\n                                            <Grid item>\n                                                <p>Left</p>\n                                            </Grid>\n                                        </Grid>\n                                    ) : unlocked ? (\n                                        <p>Lock already unlocked!</p>\n                                    ) : (\n                                        <p>You can unlocked your lock!</p>\n                                    )}\n                                </>\n                            )}\n                        </ListItemText>\n                    </Grid>\n                    <Grid item>\n                        <ListItemSecondaryAction className={classes.itemButtons}>\n                            {unlocked ? (\n                                <LockOpenIcon color=\"disabled\" />\n                            ) : canUnlock ? (\n                                <Tooltip title=\"Click to unlock\" aria-label=\"unlock\">\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"unlock\"\n                                        onClick={() => handleClick()}\n                                        color=\"primary\"\n                                    >\n                                        <LockOpenIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            ) : (\n                                <LockIcon color=\"inherit\" />\n                            )}\n                        </ListItemSecondaryAction>\n                    </Grid>\n                </Grid>\n            </ListItem>\n        </>\n    );\n};\n\nexport default CurrentLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\n\nimport React, { useState, useEffect } from 'react';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Divider } from '@material-ui/core';\nimport { defaultAddress } from '../../data/affiliationProgram';\nimport Web3Utils from 'web3-utils';\n\ninterface LockHistoryProps {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: theme.spacing(1, 2),\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\nconst GlobalLocks: React.FC<LockHistoryProps> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockEvents, setEvents] = useState<LockEvent[]>([]);\n\n    useEffect(() => {\n        setEvents(lockData);\n    }, [lockData]);\n\n    return (\n        <div className={classes.lockListPage}>\n            <>\n                {lockEvents.length > 0 ? (\n                    <>\n                        <h1>Global Locks</h1>\n                        <h3>{getTotalLockVal(lockEvents)} ETH locked</h3>\n                        <List className={classes.listRoot} subheader={<li />}>\n                            <li className={classes.listSection}>\n                                <ul className={classes.ul}>\n                                    <ListSubheader>There are {lockEvents.length} locks</ListSubheader>\n                                    <Divider />\n                                    {lockEvents.map(eventItem => (\n                                        <>\n                                            <ListItem key={eventItem.lock}>\n                                                <ListItemText>\n                                                    <h4>Lock address: {eventItem.lock}</h4>\n                                                    <h5>Locked in block no. {eventItem.blockNo}</h5>\n                                                    <p>\n                                                        Locked {Web3Utils.fromWei(eventItem.eth, 'ether')} ETH for{' '}\n                                                        {eventItem.duration} days\n                                                    </p>\n                                                    {eventItem.introducer !== defaultAddress ? (\n                                                        <p>Introducer: {eventItem.introducer}</p>\n                                                    ) : (\n                                                        <p>No introducer</p>\n                                                    )}\n                                                </ListItemText>\n                                            </ListItem>\n                                            <Divider />\n                                        </>\n                                    ))}\n                                </ul>\n                            </li>\n                        </List>\n                    </>\n                ) : (\n                    <>\n                        <h1>No Locks</h1>\n                        <h4>Please lock some ETH!</h4>\n                    </>\n                )}\n            </>\n        </div>\n    );\n};\n\nexport default GlobalLocks;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n//import * as ethAddress from 'ethereum-address';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { createStyles, Theme, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport CurrentLocks from './CurrentLocks';\nimport GlobalLocks from './EthGlobalLocks';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\ninterface LockHistoryProps {\n    web3: Web3;\n    accounts: string[]; // this will be used to get locks for a certain account\n    lockData: LockEvent[];\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n    }),\n);\n\n// component that displays the number of tokens and the duration for the lock via Web3\nconst LockedEthList: React.FC<LockHistoryProps> = ({ web3, accounts, lockData }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <div className={classes.tabMenu}>\n                    <AppBar position=\"static\" color=\"inherit\">\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"full width tabs\"\n                        >\n                            <Tab label=\"Locked Tokens\" {...a11yProps(0)} />\n                            <Tab label=\"Unlock Tokens\" {...a11yProps(1)} />\n                        </Tabs>\n                    </AppBar>\n                    <SwipeableViews\n                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n                        index={value}\n                        onChangeIndex={handleChangeIndex}\n                    >\n                        <TabPanel value={value} index={0} dir={theme.direction}>\n                            <GlobalLocks lockData={lockData} />\n                        </TabPanel>\n                        <TabPanel value={value} index={1} dir={theme.direction}>\n                            <CurrentLocks web3={web3} accounts={accounts} lockData={lockData} />\n                        </TabPanel>\n                    </SwipeableViews>\n                </div>\n            </SectionCard>\n        </>\n    );\n};\n\nexport default LockedEthList;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { TimeFormat, LockEvent } from '../../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\nimport { getTotalLockVal } from '../../helpers/lockdrop/EthereumLockdrop';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    lockData: LockEvent[];\n}\n\nenum LockState {\n    notStart,\n    start,\n    end,\n}\n\nconst LockdropCountdownPanel: React.FC<Props> = ({ startTime, endTime, lockData }) => {\n    const now = moment().utc();\n\n    const calculateTimeLeft = (): TimeFormat => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = moment(endTime).valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        return timeLeft;\n    };\n\n    const getLockState = (): LockState => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n        if (tillStart > 0) {\n            return LockState.notStart;\n        } else if (tillStart <= 0 && !(moment(endTime).valueOf() - now.valueOf() < 0)) {\n            return LockState.start;\n        } else {\n            return LockState.end;\n        }\n    };\n\n    const [timeLeft, setTimeLeft] = useState<TimeFormat>(calculateTimeLeft());\n    const [lockState, setLockState] = useState(getLockState());\n    const [totalLockVal, setTotalLockVal] = useState('0');\n\n    const getLockValue = async (): Promise<void> => {\n        try {\n            const _totalLockVal = getTotalLockVal(lockData);\n            setTotalLockVal(_totalLockVal);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setTimeLeft(calculateTimeLeft());\n            setLockState(getLockState());\n            await getLockValue();\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    if (lockState !== LockState.end) {\n        return (\n            <>\n                <PanelWrapper>\n                    <div className=\"time\">\n                        <Grid container spacing={2} justify=\"center\">\n                            <Grid item>\n                                {lockState === LockState.notStart ? (\n                                    <Typography variant=\"h4\" component=\"h2\">\n                                        Lockdrop Starting in:\n                                    </Typography>\n                                ) : (\n                                    <Typography variant=\"h4\" component=\"h2\">\n                                        Lockdrop Ending in:\n                                    </Typography>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.days}</h3>\n                                <p>Days</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.hours}</h3>\n                                <p>Hours</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.minutes}</h3>\n                                <p>Minutes</p>\n                            </Grid>\n                            <Grid item>\n                                <h3>{timeLeft.seconds}</h3>\n                                <p>Seconds</p>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </PanelWrapper>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <PanelWrapper>\n                    <Typography variant=\"h2\" component=\"h1\" align=\"center\">\n                        Lockdrop has ended\n                    </Typography>\n                    <Typography variant=\"h3\" component=\"h3\" align=\"center\">\n                        Total Locked Value: {totalLockVal} ETH\n                    </Typography>\n                </PanelWrapper>\n            </>\n        );\n    }\n};\n\nexport default LockdropCountdownPanel;\n\nconst PanelWrapper: React.FC = ({ children }) => {\n    const useStyles = makeStyles(theme => ({\n        container: {\n            padding: theme.spacing(5, 2, 0),\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                {children}\n            </Container>\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    createStyles,\n    Theme,\n    CircularProgress,\n    Divider,\n    Link,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Collapse,\n    Typography,\n} from '@material-ui/core';\nimport { calculateTotalPlm, ethFinalExRate, getPubKey } from '../../helpers/lockdrop/EthereumLockdrop';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport BigNumber from 'bignumber.js';\nimport CountUp from 'react-countup';\nimport { ThemeColors } from '../../theme/themes';\nimport { IonPopover, IonList, IonListHeader, IonItem, IonLabel, IonChip, IonButton, IonLoading } from '@ionic/react';\nimport { LockEvent } from '../../types/LockdropModels';\nimport Web3 from 'web3';\nimport SectionCard from '../SectionCard';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport { generatePlmAddress } from 'src/helpers/plasmUtils';\n\nconst etherScanSearch = 'https://etherscan.io/address/';\n\ninterface ResultProps {\n    lockData: LockEvent[];\n    web3: Web3;\n}\n\nconst LockdropResult: React.FC<ResultProps> = ({ lockData, web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            pageContent: {\n                textAlign: 'center',\n                padding: theme.spacing(4, 2, 0),\n            },\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                padding: theme.spacing(4, 2, 0),\n            },\n        }),\n    );\n\n    const classes = useStyles();\n    const [totalPlm, setTotalPlm] = useState<PlmDrop>(new PlmDrop('', new BigNumber(0), [], [], []));\n    const [exRate, setExRate] = useState(0);\n    const [isLoading, setLoadState] = useState(true);\n    const [showIntoRefPopover, setShowIntroRefPopover] = useState(false);\n    const [showIntoPopover, setShowIntroPopover] = useState(false);\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            setExRate(ethFinalExRate);\n            const accounts = await web3.eth.getAccounts();\n            const totalIssue = calculateTotalPlm(accounts[0], lockData);\n            setTotalPlm(totalIssue);\n\n            setLoadState(false);\n        }, 1000);\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    const countupTotalPlmVal: JSX.Element = (\n        <CountUp\n            start={0}\n            end={new BigNumber(totalPlm.getTotalPlm()).toNumber()}\n            decimals={2}\n            duration={1}\n            separator=\",\"\n        />\n    );\n\n    return (\n        <div className={classes.pageContent}>\n            <h1>Lockdrop Result</h1>\n            {isLoading ? (\n                <>\n                    <CircularProgress />\n                </>\n            ) : totalPlm.locks.length > 0 || totalPlm.affiliationRefsBonuses.length > 0 ? (\n                <>\n                    <h2 className={classes.header}>{countupTotalPlmVal} PLM in total</h2>\n                    <p>You have locked {totalPlm.locks.length} time(s)</p>\n                    <p>\n                        ETH exchange rate at the end of the lockdrop: {exRate} USD(\n                        <a href=\"https://api.coingecko.com/api/v3/coins/ethereum/history?date=01-05-2020&localization=false\">\n                            ref\n                        </a>\n                        )\n                    </p>\n                    <p>You have received around {totalPlm.basePlm.toFormat(2)} PLM from locking</p>\n                    <Divider />\n                    <h2>Affiliation Program</h2>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroRefPopover(true)}>\n                        <IonLabel>{totalPlm.affiliationRefsBonuses.length} locks</IonLabel>\n                    </IonChip>\n                    <IonLabel>referenced your address as a introducer: {totalPlm.getAffBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoRefPopover} onDidDismiss={() => setShowIntroRefPopover(false)}>\n                        <IntoRefItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <IonLabel>You have referenced </IonLabel>\n                    <IonChip color=\"primary\" onClick={() => setShowIntroPopover(true)}>\n                        <IonLabel>{totalPlm.introducerAndBonuses.length} introducers</IonLabel>\n                    </IonChip>\n                    <IonLabel>: {totalPlm.getIntroBonus()} PLM</IonLabel>\n\n                    <IonPopover isOpen={showIntoPopover} onDidDismiss={() => setShowIntroPopover(false)}>\n                        <IntoAffItems data={totalPlm} />\n                    </IonPopover>\n                    <br />\n                    <ClaimPlm web3={web3} />\n                </>\n            ) : (\n                <h2 className={classes.header}>No Locks found for your address!</h2>\n            )}\n        </div>\n    );\n};\n\nexport default LockdropResult;\n\ninterface IntroRefProps {\n    data: PlmDrop;\n}\nconst IntoRefItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.affiliationRefsBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>References</IonListHeader>\n                        {data.affiliationRefsBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No References</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\nconst IntoAffItems: React.FC<IntroRefProps> = ({ data }) => {\n    return (\n        <>\n            <IonList>\n                {data.introducerAndBonuses.length > 0 ? (\n                    <>\n                        <IonListHeader>Introducers</IonListHeader>\n                        {data.introducerAndBonuses.map((i: [string, BigNumber]) => (\n                            <IonItem key={i[0]} href={etherScanSearch + i[0]} rel=\"noopener noreferrer\" target=\"_blank\">\n                                {i[0]}\n                            </IonItem>\n                        ))}\n                    </>\n                ) : (\n                    <IonListHeader>No Introducers</IonListHeader>\n                )}\n            </IonList>\n        </>\n    );\n};\n\ninterface ClaimProps {\n    web3: Web3;\n}\nconst ClaimPlm: React.FC<ClaimProps> = ({ web3 }) => {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            header: {\n                color: ThemeColors.blue,\n            },\n            claimButton: {\n                paddingTop: theme.spacing(2),\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                maxWidth: '100%',\n            },\n            addressPanel: {\n                padding: theme.spacing(3, 3, 0),\n            },\n            root: {\n                width: '100%',\n                alignContent: 'center',\n                backgroundColor: theme.palette.background.paper,\n            },\n            nested: {\n                paddingLeft: theme.spacing(4),\n            },\n        }),\n    );\n\n    const [isLoading, setLoadState] = useState(false);\n    const [plmAddress, setPlmAddress] = useState('');\n    const [ethPubkey, setEthPubkey] = useState('');\n    const [open, setOpen] = useState(false);\n\n    const getPlasmAddress = async () => {\n        const pubKey = await getPubKey(web3);\n        let result = '';\n        if (typeof pubKey === 'string') {\n            setEthPubkey(pubKey);\n            // remove the 0x prefix before passing the value\n            const plmAddress = generatePlmAddress(pubKey.replace('0x', ''));\n            result = plmAddress;\n        }\n        setLoadState(false);\n        return result;\n    };\n    const ExpandItem = () => {\n        setOpen(!open);\n    };\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <IonLoading isOpen={isLoading} message={'Verifying user...'} />\n            <IonButton\n                color=\"primary\"\n                size=\"large\"\n                className={classes.claimButton}\n                onClick={async () => {\n                    setLoadState(true);\n                    setPlmAddress(await getPlasmAddress());\n                }}\n            >\n                Get Plasm Address\n            </IonButton>\n            {plmAddress ? (\n                <>\n                    <SectionCard maxWidth=\"md\">\n                        <div className={classes.addressPanel}>\n                            <p>Your Plasm Network address with the lockdrop rewards:</p>\n                            <Link\n                                color=\"inherit\"\n                                href={'https://plasm.subscan.io/account/' + plmAddress}\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <h2 className={classes.header}>{plmAddress}</h2>\n                            </Link>\n                            <List component=\"nav\" className={classes.root}>\n                                <ListItem button onClick={ExpandItem}>\n                                    <ListItemIcon>\n                                        <VpnKeyIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary=\"View Eth Public Key\" />\n                                    {open ? <ExpandLess /> : <ExpandMore />}\n                                </ListItem>\n                                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                    <Typography className={classes.header}>{ethPubkey}</Typography>\n                                </Collapse>\n                            </List>\n                        </div>\n                    </SectionCard>\n                </>\n            ) : null}\n        </>\n    );\n};\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { validEthAddressList, defaultAddress } from '../../data/affiliationProgram';\nimport { LockEvent } from '../../types/LockdropModels';\nimport { PlmDrop } from '../../types/PlasmDrop';\nimport { calculateTotalPlm } from '../../helpers/lockdrop/EthereumLockdrop';\nimport {\n    List,\n    ListItemText,\n    ListSubheader,\n    Divider,\n    ListItem,\n    makeStyles,\n    createStyles,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport SectionCard from '../SectionCard';\n\ninterface Props {\n    lockData: LockEvent[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            maxHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        title: {\n            textAlign: 'center',\n            padding: theme.spacing(4, 2, 0),\n        },\n    }),\n);\n\nconst AffiliationList: React.FC<Props> = ({ lockData }) => {\n    const classes = useStyles();\n    const [lockdropResult, setLockdropResult] = useState<PlmDrop[]>([]);\n\n    function getAffiliationResults(lockData: LockEvent[]) {\n        // filter out the 0x00 address from the list\n        const validAddresses = validEthAddressList.filter(address => address !== defaultAddress);\n\n        // get the lockdrop result\n        const lockResults = validAddresses.map(i => {\n            return calculateTotalPlm(i, lockData);\n        });\n\n        // sort the array by the number of references\n        return lockResults.sort((a, b) =>\n            a.affiliationRefsBonuses.length > b.affiliationRefsBonuses.length\n                ? -1\n                : a.affiliationRefsBonuses.length < b.affiliationRefsBonuses.length\n                ? 1\n                : 0,\n        );\n    }\n\n    useEffect(() => {\n        setLockdropResult(getAffiliationResults(lockData));\n    }, [lockData]);\n\n    return (\n        <>\n            <SectionCard maxWidth=\"lg\">\n                <Typography className={classes.title} variant=\"h3\">\n                    Affiliation Leaderboard\n                </Typography>\n                <List component=\"nav\" className={classes.listRoot} subheader={<li />}>\n                    <li className={classes.listSection}>\n                        <ul className={classes.ul}>\n                            <ListSubheader>There are {validEthAddressList.length - 1} affiliators</ListSubheader>\n                            <Divider />\n                            {lockdropResult.map(i => (\n                                <IntroducerBonusesItems key={i.receiver} lockResult={i} />\n                            ))}\n                        </ul>\n                    </li>\n                </List>\n            </SectionCard>\n        </>\n    );\n};\n\ninterface IntroducerPlanelProps {\n    lockResult: PlmDrop;\n}\n\nconst IntroducerBonusesItems: React.FC<IntroducerPlanelProps> = ({ lockResult }) => {\n    return (\n        <>\n            <ListItem>\n                <ListItemText>\n                    <h2>{lockResult.receiver}</h2>\n                    <p>{lockResult.affiliationRefsBonuses.length} lock(s) referenced this address</p>\n                    <p>{lockResult.getAffBonus()} PLMs gained from this</p>\n                </ListItemText>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n\nexport default AffiliationList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading } from '@ionic/react';\nimport React from 'react';\nimport LockdropForm from '../components/EthLock/LockdropForm';\nimport { connectWeb3, getAllLockEvents, submitLockTx } from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockInput, LockEvent } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SectionCard from '../components/SectionCard';\nimport LockdropCountdownPanel from '../components/EthLock/LockdropCountdownPanel';\nimport { firstLockdropEnd, firstLockdropStart } from '../data/lockInfo';\nimport moment from 'moment';\nimport LockdropResult from '../components/EthLock/LockdropResult';\nimport { Divider } from '@material-ui/core';\nimport AffiliationList from '../components/EthLock/AffiliationList';\nimport { removeWeb3Event } from '../helpers/getWeb3';\n\nconst formInfo = `This is the lockdrop form for Ethereum.\nThis uses Web3 injection so you must have Metamask (or other Web3-enabled wallet) installed in order for this to work properly.\nIf you find any errors or find issues with this form, please contact the Plasm team.\nRegarding the audit by Quantstamp, click <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a> for more details`;\n\ninterface PageStates {\n    web3: Web3;\n    accounts: string[];\n    contract: Contract;\n    isLoading: boolean;\n    networkType: string;\n    isProcessing: boolean;\n    allLockEvents: LockEvent[];\n    error: null;\n    fetchingLockData: boolean;\n}\n\n// need an empty interface to use states (React's generic positioning)\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface PageProps {}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst hasFirstLockdropStarted = () => {\n    const now = moment()\n        .utc()\n        .valueOf();\n    const start = firstLockdropStart.valueOf();\n    //const end = firstLockdropEnd.valueOf();\n    return start <= now;\n};\n\nconst hasFirstLockdropEnded = () => {\n    const now = moment()\n        .utc()\n        .valueOf();\n    const end = firstLockdropEnd.valueOf();\n    return end <= now;\n};\n\nclass EthLockdropPage extends React.Component<PageProps, PageStates> {\n    constructor(props: PageProps) {\n        super(props);\n        // initialize with null values\n        this.state = {\n            web3: {} as Web3,\n            accounts: [''],\n            contract: {} as Contract,\n            isLoading: true,\n            networkType: '',\n            isProcessing: false,\n            allLockEvents: [],\n            error: null,\n            fetchingLockData: true,\n        };\n    }\n    // used for fetching data periodically\n    timerInterval: any;\n\n    // get and set the web3 state when the component is mounted\n    componentDidMount = async () => {\n        const web3State = await connectWeb3('firstLock');\n        this.setState(web3State);\n\n        // checks if account has changed in MetaMask\n        if ((window as any).ethereum.on) {\n            (window as any).ethereum.on('accountsChanged', this.handleAccountChange);\n        }\n\n        this.setState({ networkType: await this.state.web3.eth.net.getNetworkType() });\n\n        //this.state.web3.eth.net.getNetworkType().then(i => this.setState({ networkType: i }));\n\n        this.timerInterval = setInterval(() => {\n            this.getLockData().then(() => {\n                this.setState({ isLoading: false });\n            });\n        }, 5000);\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerInterval);\n        removeWeb3Event();\n    };\n\n    isMainnet = () => {\n        return this.state.networkType === 'main';\n    };\n\n    // called when the user changes MetaMask account\n    handleAccountChange = () => {\n        // refresh the page\n        window.location.reload(false);\n    };\n\n    getLockData = async () => {\n        try {\n            // get all the lock events from the chain\n            const allLocks = await getAllLockEvents(this.state.web3, this.state.contract);\n\n            this.setState({ allLockEvents: allLocks });\n        } catch (error) {\n            this.setState({ error });\n            console.log(error);\n        }\n    };\n\n    handleSubmit = async (formInputVal: LockInput) => {\n        this.setState({ isProcessing: true });\n        try {\n            await submitLockTx(formInputVal, this.state.accounts[0], this.state.contract);\n            toast.success(`Successfully locked ${formInputVal.amount} ETH for ${formInputVal.duration} days!`);\n        } catch (e) {\n            toast.error(e.toString());\n            console.log(e);\n        }\n\n        this.setState({ isProcessing: false });\n    };\n\n    render() {\n        return (\n            <IonPage>\n                <Navbar />\n                <IonContent>\n                    {hasFirstLockdropStarted() ? (\n                        this.state.isLoading ? (\n                            <IonLoading isOpen={true} message={'Connecting to Wallet and fetching chain data...'} />\n                        ) : (\n                            <>\n                                {this.state.isProcessing ? (\n                                    <IonLoading\n                                        isOpen={this.state.isProcessing}\n                                        message={'Processing Transaction...'}\n                                    />\n                                ) : null}\n\n                                <SectionCard maxWidth=\"lg\">\n                                    <LockdropCountdownPanel\n                                        endTime={firstLockdropEnd}\n                                        startTime={firstLockdropStart}\n                                        lockData={this.state.allLockEvents}\n                                    />\n                                    {hasFirstLockdropEnded() && this.isMainnet() ? (\n                                        <>\n                                            <Divider />\n                                            <LockdropResult\n                                                lockData={this.state.allLockEvents}\n                                                web3={this.state.web3}\n                                            />\n                                        </>\n                                    ) : null}\n                                </SectionCard>\n                                <AffiliationList lockData={this.state.allLockEvents} />\n                                {hasFirstLockdropEnded() ? null : (\n                                    <LockdropForm token=\"ETH\" onSubmit={this.handleSubmit} description={formInfo} />\n                                )}\n\n                                <LockedEthList\n                                    web3={this.state.web3}\n                                    accounts={this.state.accounts}\n                                    lockData={this.state.allLockEvents}\n                                />\n                            </>\n                        )\n                    ) : (\n                        <>\n                            <SectionCard maxWidth=\"lg\">\n                                <LockdropCountdownPanel\n                                    endTime={firstLockdropEnd}\n                                    startTime={firstLockdropStart}\n                                    lockData={this.state.allLockEvents}\n                                />\n                            </SectionCard>\n                        </>\n                    )}\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        );\n    }\n}\nexport default EthLockdropPage;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport * as btcLockdrop from '../helpers/lockdrop/BitcoinLockdrop';\nimport { Claim, Lockdrop } from 'src/types/LockdropModels';\nimport {\n    List,\n    makeStyles,\n    createStyles,\n    ListSubheader,\n    Divider,\n    ListItem,\n    Typography,\n    ListItemText,\n    ListItemIcon,\n    Icon,\n    ListItemSecondaryAction,\n    IconButton,\n    CircularProgress,\n} from '@material-ui/core';\nimport plasmIcon from '../resources/plasm-icon.svg';\nimport dustyIcon from '../resources/dusty-icon.svg';\nimport Web3Utils from 'web3-utils';\nimport SendIcon from '@material-ui/icons/Send';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { green } from '@material-ui/core/colors';\nimport BigNumber from 'bignumber.js';\nimport { H256 } from '@polkadot/types/interfaces';\nimport Badge from '@material-ui/core/Badge';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { IonPopover, IonList, IonItem, IonListHeader, IonLabel } from '@ionic/react';\nimport { toast } from 'react-toastify';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport ReplayIcon from '@material-ui/icons/Replay';\n\ninterface Props {\n    claimParams: Lockdrop[];\n    plasmApi: ApiPromise;\n    networkType: 'ETH' | 'BTC';\n    plasmNetwork: 'Plasm' | 'Dusty';\n    publicKey: string;\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listRoot: {\n            width: '100%',\n            maxWidth: 'auto',\n            backgroundColor: theme.palette.background.paper,\n            position: 'relative',\n            overflow: 'auto',\n            height: 360,\n            //minHeight: 360,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        lockListPage: {\n            textAlign: 'center',\n        },\n        tabMenu: {\n            backgroundColor: theme.palette.background.paper,\n            width: 'auto',\n        },\n        inline: {\n            display: 'inline',\n        },\n        iconProgress: {\n            color: green[500],\n            position: 'absolute',\n            top: 10,\n            left: 10,\n            zIndex: 1,\n        },\n        emptyPanel: {\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: 'auto',\n        },\n        claimVoteIcon: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\nconst truncateString = (str: string, num: number) => {\n    if (str.length <= num) {\n        return str;\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...';\n};\n\nconst epochToDays = (epoch: number) => {\n    const epochDays = 60 * 60 * 24;\n    return epoch / epochDays;\n};\n\nconst ClaimStatus: React.FC<Props> = ({ claimParams, plasmApi, plasmNetwork = 'Plasm', networkType, publicKey }) => {\n    const classes = useStyles();\n    const plasmAddr = useMemo(() => {\n        return plasmUtils.generatePlmAddress(publicKey);\n    }, [publicKey]);\n    const [positiveVotes, setPositiveVotes] = useState(0);\n    const [voteThreshold, setVoteThreshold] = useState(0);\n    const [isLoadingBal, setLoadingBal] = useState(true);\n    const [isLoadingClaims, setLoadingClaims] = useState(true);\n    const [balance, setBalance] = useState('');\n    const [claims, setClaims] = useState<(Claim | undefined)[]>([]);\n\n    const fetchLockData = useCallback(async () => {\n        // create claims IDs from all the lock parameters\n        const claimIds = claimParams.map(c => {\n            // get claim ID of current parameter\n            return plasmUtils.createLockParam(\n                c.type,\n                c.transactionHash.toHex(),\n                c.publicKey.toHex(),\n                c.duration.toString(),\n                c.value.toString(),\n            ).hash;\n        });\n\n        const lockdropStates = claimIds.map(async id => {\n            // parse plasm node to check claim status\n            const claimRes = await plasmUtils.getClaimStatus(plasmApi, id);\n            return claimRes;\n        });\n\n        setClaims(await Promise.all(lockdropStates));\n    }, [claimParams, plasmApi]);\n\n    // initial set claim status\n    useEffect(() => {\n        fetchLockData().finally(() => {\n            setLoadingClaims(false);\n        });\n    }, [fetchLockData]);\n\n    // fetch address balance periodically\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            const _bal = (await plasmUtils.getAddressBalance(plasmApi, plasmAddr, true)).toFixed(3);\n            const formatBal = parseFloat(_bal).toLocaleString('en');\n            const _voteReq = await plasmUtils.getLockdropVoteRequirements(plasmApi);\n            setBalance(formatBal);\n            setPositiveVotes(_voteReq.positiveVotes);\n            setVoteThreshold(_voteReq.voteThreshold);\n            isLoadingBal && setLoadingBal(false);\n\n            await fetchLockData();\n        }, 3000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                Sending to {plasmAddr}\n            </Typography>\n\n            {balance && (\n                <Typography variant=\"body1\" component=\"p\" align=\"center\">\n                    Has balance of {balance + ' '}\n                    {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                </Typography>\n            )}\n\n            <List className={classes.listRoot} subheader={<li />}>\n                <li className={classes.listSection}>\n                    <ul className={classes.ul}>\n                        {isLoadingBal || isLoadingClaims ? (\n                            <div className={classes.emptyPanel}>\n                                <CircularProgress />\n                            </div>\n                        ) : claimParams.length > 0 ? (\n                            <>\n                                <ListSubheader>You can claim {claimParams.length} locks</ListSubheader>\n                                <Divider />\n\n                                {claimParams.map((e, i) => (\n                                    <div key={e.transactionHash.toHex()}>\n                                        <ClaimItem\n                                            lockParam={e}\n                                            plasmApi={plasmApi}\n                                            plasmNetwork={plasmNetwork}\n                                            networkType={networkType}\n                                            positiveVotes={positiveVotes}\n                                            voteThreshold={voteThreshold}\n                                            claimData={claims[i]}\n                                        />\n                                    </div>\n                                ))}\n                            </>\n                        ) : (\n                            <>\n                                <ListSubheader>You don&apos;t have any locks!</ListSubheader>\n                                <Divider />\n                                <div className={classes.emptyPanel}>\n                                    <Typography>Why does the feeling of emptiness occupy so much space?</Typography>\n                                    <Typography>-James de la Vega-</Typography>\n                                </div>\n                            </>\n                        )}\n                    </ul>\n                </li>\n            </List>\n        </div>\n    );\n};\n\nexport default ClaimStatus;\n\ninterface ItemProps {\n    lockParam: Lockdrop;\n    plasmApi: ApiPromise;\n    plasmNetwork: 'Plasm' | 'Dusty';\n    networkType: 'BTC' | 'ETH';\n    positiveVotes: number;\n    voteThreshold: number;\n    claimData?: Claim;\n}\n\nconst ClaimItem: React.FC<ItemProps> = ({\n    lockParam,\n    plasmApi,\n    plasmNetwork,\n    networkType,\n    positiveVotes,\n    voteThreshold,\n    claimData,\n}) => {\n    const classes = useStyles();\n\n    const claimId = useMemo(() => {\n        return plasmUtils.createLockParam(\n            lockParam.type,\n            lockParam.transactionHash.toHex(),\n            lockParam.publicKey.toHex(),\n            lockParam.duration.toString(),\n            lockParam.value.toString(),\n        ).hash;\n    }, [lockParam]);\n\n    // plasmLockdrop.request()\n    const [sendingRequest, setSendingRequest] = useState(false);\n    // plasmLockdrop.claim()\n    const [claimingLock, setClaimingLock] = useState(false);\n    const [approveList, setApproveList] = useState<string[]>([]);\n    const [declineList, setDeclineList] = useState<string[]>([]);\n\n    // for popup modals\n    const [showApproves, setShowApproves] = useState(false);\n    const [showDeclines, setShowDeclines] = useState(false);\n\n    const setVoteList = (_claim: Claim) => {\n        const approves = _claim.approve.toJSON() as string[];\n        setApproveList(approves);\n        const decline = _claim.decline.toJSON() as string[];\n        setDeclineList(decline);\n    };\n\n    const submitClaimReq = (param: Lockdrop) => {\n        setSendingRequest(true);\n        claimData = undefined;\n        const _lock = plasmUtils.createLockParam(\n            param.type,\n            param.transactionHash.toHex(),\n            param.publicKey.toHex(),\n            param.duration.toString(),\n            param.value.toString(),\n        );\n        const _nonce = plasmUtils.claimPowNonce(_lock.hash);\n        // send lockdrop claim request\n        plasmUtils // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .sendLockClaimRequest(plasmApi, _lock as any, _nonce)\n            .then(res => {\n                console.log('Claim ID: ' + _lock.hash + '\\nRequest transaction hash:\\n' + res.toHex());\n            })\n            .catch(e => {\n                toast.error(e);\n                console.log(e);\n            });\n    };\n\n    const hasAllVotes = () => approveList.length + declineList.length >= voteThreshold;\n    const reqAccepted = () => approveList.length - declineList.length >= positiveVotes;\n\n    const submitTokenClaim = (id: Uint8Array | H256) => {\n        if (hasAllVotes() && reqAccepted()) {\n            setClaimingLock(true);\n            plasmUtils\n                .sendLockdropClaim(plasmApi, id)\n                .then(res => {\n                    console.log('Token claim transaction hash:\\n' + res.toHex());\n                })\n                .catch(e => {\n                    toast.error(e);\n                    console.log(e);\n                });\n        }\n    };\n\n    // initial set claim status\n    useEffect(() => {\n        // turn off loading if it's on\n        if (claimData) {\n            setVoteList(claimData);\n\n            // turn off loading if it's on\n            if (sendingRequest) setSendingRequest(false);\n            if (claimData.complete.valueOf() && claimingLock) setClaimingLock(false);\n        }\n    }, [claimData, claimingLock, sendingRequest]);\n\n    const ActionIcon = () => {\n        if (claimData && !hasAllVotes()) {\n            return <HourglassEmptyIcon />;\n        } else if (claimData === undefined) {\n            return <SendIcon />;\n        } else if (claimData && !reqAccepted()) {\n            return <ReplayIcon />;\n        }\n        return <CheckIcon />;\n    };\n\n    return (\n        <>\n            <IonPopover isOpen={showApproves} onDidDismiss={() => setShowApproves(false)}>\n                <IonList>\n                    <IonListHeader>Claim Approvals</IonListHeader>\n                    {approveList.length > 0 ? (\n                        approveList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Approvals</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <IonPopover isOpen={showDeclines} onDidDismiss={() => setShowDeclines(false)}>\n                <IonList>\n                    <IonListHeader>Claim Declines</IonListHeader>\n                    {declineList.length > 0 ? (\n                        declineList.map(authority => (\n                            <IonItem key={authority}>\n                                <IonLabel>{authority}</IonLabel>\n                            </IonItem>\n                        ))\n                    ) : (\n                        <IonItem>\n                            <IonLabel>No Declines</IonLabel>\n                        </IonItem>\n                    )}\n                </IonList>\n            </IonPopover>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>\n                        {plasmNetwork === 'Plasm' ? <img src={plasmIcon} alt=\"\" /> : <img src={dustyIcon} alt=\"\" />}\n                    </Icon>\n                </ListItemIcon>\n                <ListItemText>\n                    <Typography component=\"h4\" variant=\"h5\" color=\"textPrimary\">\n                        Transaction Hash: {truncateString(lockParam.transactionHash.toHex(), 6)}\n                    </Typography>\n                    <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                        Locked{' '}\n                        {networkType === 'ETH'\n                            ? `${Web3Utils.fromWei(lockParam.value.toString(), 'ether')} ETH `\n                            : `${btcLockdrop.satoshiToBitcoin(lockParam.value.toString())} BTC `}\n                        for {epochToDays(lockParam.duration.toNumber()).toString()} days\n                    </Typography>\n\n                    {claimData && (\n                        <>\n                            <br />\n                            <Typography component=\"h5\" variant=\"h6\" className={classes.inline} color=\"textPrimary\">\n                                Receiving {plasmUtils.femtoToPlm(new BigNumber(claimData.amount.toString())).toFixed()}{' '}\n                                {plasmNetwork === 'Plasm' ? 'PLM' : 'PLD'}\n                            </Typography>\n                        </>\n                    )}\n\n                    <br />\n                    <Typography component=\"p\" variant=\"body2\" className={classes.inline} color=\"textPrimary\">\n                        Claim ID: {claimId.toHex()}\n                    </Typography>\n                    <br />\n                    <Typography\n                        component=\"p\"\n                        variant=\"body2\"\n                        className={classes.inline}\n                        color={claimData ? 'primary' : 'error'}\n                    >\n                        {claimData\n                            ? claimData.complete.valueOf()\n                                ? 'Claimed Lockdrop'\n                                : 'Claim requested (not claimed)'\n                            : 'Claim not requested'}\n                    </Typography>\n                    {claimData && (\n                        <>\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowApproves(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={approveList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbUpIcon />\n                                </Badge>\n                            </IconButton>\n\n                            <IconButton color=\"primary\" component=\"span\" onClick={() => setShowDeclines(true)}>\n                                <Badge\n                                    color=\"secondary\"\n                                    badgeContent={declineList.length}\n                                    showZero\n                                    max={999}\n                                    className={classes.claimVoteIcon}\n                                    anchorOrigin={{\n                                        vertical: 'top',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <ThumbDownIcon />\n                                </Badge>\n                            </IconButton>\n                        </>\n                    )}\n                </ListItemText>\n\n                <ListItemSecondaryAction>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"request\"\n                            onClick={() => {\n                                claimData === undefined || !reqAccepted()\n                                    ? submitClaimReq(lockParam)\n                                    : submitTokenClaim(claimId);\n                            }}\n                            color=\"primary\"\n                            disabled={\n                                sendingRequest ||\n                                claimData?.complete.valueOf() ||\n                                claimingLock ||\n                                (claimData && !hasAllVotes())\n                            }\n                        >\n                            <ActionIcon />\n                        </IconButton>\n                        {sendingRequest || claimingLock ? (\n                            <CircularProgress size={24} className={classes.iconProgress} />\n                        ) : null}\n                    </div>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <Divider />\n        </>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport { IonContent, IonPage, IonLoading, IonButton } from '@ionic/react';\nimport React from 'react';\nimport LockdropForm from '../components/EthLock/LockdropForm';\nimport {\n    connectWeb3,\n    getAllLockEvents,\n    submitLockTx,\n    getPubKey,\n    getContractEndDate,\n    getContractStartDate,\n} from '../helpers/lockdrop/EthereumLockdrop';\nimport Web3 from 'web3';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport { Contract } from 'web3-eth-contract';\nimport { LockInput, LockEvent, LockdropType, Lockdrop } from '../types/LockdropModels';\nimport LockedEthList from '../components/EthLock/LockedEthList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { removeWeb3Event } from '../helpers/getWeb3';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Container } from '@material-ui/core';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport { ApiPromise } from '@polkadot/api';\nimport * as polkadotUtil from '@polkadot/util-crypto';\nimport ClaimStatus from 'src/components/ClaimStatus';\nimport moment from 'moment';\nimport LockdropCountdownPanel from 'src/components/EthLock/LockdropCountdownPanel';\n\nconst formInfo = `This is the lockdrop form for Ethereum.\nThis uses Web3 injection so you must have Metamask (or other Web3-enabled wallet) installed in order for this to work properly.\nIf you find any errors or find issues with this form, please contact the Plasm team.\nRegarding the audit by Quantstamp, click <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a> for more details`;\n\ninterface PageStates {\n    web3: Web3;\n    plasmApi: ApiPromise;\n    accounts: string[];\n    contract: Contract;\n    isLoading: boolean;\n    networkType: string;\n    isProcessing: boolean;\n    allLockEvents: LockEvent[];\n    lockParams: Lockdrop[];\n    error: null;\n    fetchingLockData: boolean;\n    publicKey: string;\n    lockdropStart: string; // unix timestamp string\n    lockdropEnd: string; // unix timestamp string\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nclass DustyEthLockPage extends React.Component<{}, PageStates> {\n    constructor(props: {}) {\n        super(props);\n        // initialize with null values\n        this.state = {\n            web3: {} as Web3,\n            plasmApi: {} as ApiPromise,\n            accounts: [''],\n            contract: {} as Contract,\n            isLoading: true,\n            networkType: '',\n            isProcessing: false,\n            allLockEvents: [],\n            lockParams: [],\n            error: null,\n            fetchingLockData: true,\n            publicKey: '',\n            lockdropStart: '0',\n            lockdropEnd: '0',\n        };\n    }\n\n    // used for fetching data periodically\n    timerInterval: any;\n\n    // get and set the web3 state when the component is mounted\n    componentDidMount = async () => {\n        try {\n            const web3State = await connectWeb3('secondLock');\n            this.setState(web3State);\n            const plasmNode = await plasmUtils.createPlasmInstance(plasmUtils.PlasmNetwork.Dusty);\n            this.setState({ plasmApi: plasmNode });\n\n            // checks if account has changed in MetaMask\n            if ((window as any).ethereum.on) {\n                (window as any).ethereum.on('accountsChanged', this.handleAccountChange);\n            }\n\n            this.setState({ networkType: await this.state.web3.eth.net.getNetworkType() });\n\n            // check contract start and end dates\n            const _end = await getContractEndDate(this.state.contract);\n            const _start = await getContractStartDate(this.state.contract);\n\n            this.setState({ lockdropEnd: _end, lockdropStart: _start });\n        } catch (e) {\n            this.setState({ error: e });\n            console.log(e);\n        }\n\n        this.timerInterval = setInterval(() => {\n            this.getLockData().then(() => {\n                this.setState({ isLoading: false });\n            });\n        }, 5000);\n    };\n\n    isMainnet = () => {\n        return this.state.networkType === 'main';\n    };\n\n    componentWillUnmount = () => {\n        clearInterval(this.timerInterval);\n        removeWeb3Event();\n    };\n\n    // called when the user changes MetaMask account\n    handleAccountChange = () => {\n        // refresh the page\n        window.location.reload(false);\n    };\n\n    getLockData = async () => {\n        try {\n            // get all the lock events from the chain\n            const _allLocks = await getAllLockEvents(this.state.web3, this.state.contract);\n\n            if (this.state.publicKey) {\n                const _lockParam = this.getClaimParams();\n                this.setState({ lockParams: _lockParam });\n            }\n\n            this.setState({ allLockEvents: _allLocks });\n        } catch (error) {\n            this.setState({ error });\n            console.log(error);\n        }\n    };\n\n    setPublicKey = () => {\n        if (!this.state.publicKey) {\n            getPubKey(\n                this.state.web3,\n                `Sign this message to submit a lock request.\n                This action is required for the real-time lockdrop module\n                ${polkadotUtil.randomAsHex(3)}`,\n            )\n                .then(pub => {\n                    console.log('public: ' + pub);\n                    this.setState({ publicKey: pub });\n                })\n                .catch(e => {\n                    toast.error(e.message.toString());\n                    console.log(e);\n                });\n        }\n    };\n\n    /**\n     * Obtains list of lockdrop claim parameters\n     */\n    getClaimParams = () => {\n        const userLocks = this.state.allLockEvents.filter(i => i.lockOwner === this.state.accounts[0]);\n        const claimIDs = userLocks.map(lock => {\n            const _param = plasmUtils.createLockParam(\n                LockdropType.Ethereum,\n                lock.transactionHash,\n                this.state.publicKey,\n                this.durationToEpoch(lock.duration).toString(),\n                lock.eth.toString(),\n            );\n            return plasmUtils.structToLockdrop(_param as any);\n        });\n\n        return claimIDs;\n    };\n\n    durationToEpoch = (duration: number) => {\n        const epochDays = 60 * 60 * 24;\n        return duration * epochDays;\n    };\n\n    handleSubmit = async (formInputVal: LockInput) => {\n        this.setState({ isProcessing: true });\n        try {\n            if (!this.state.publicKey) {\n                const _publicKey = await getPubKey(\n                    this.state.web3,\n                    `Sign this message to submit a lock request.\n                This action is required for the real-time lockdrop module\n                ${polkadotUtil.randomAsHex(3)}`,\n                );\n\n                this.setState({ publicKey: _publicKey });\n            }\n\n            await submitLockTx(formInputVal, this.state.accounts[0], this.state.contract);\n            toast.success(`Successfully locked ${formInputVal.amount} ETH for ${formInputVal.duration} days!`);\n        } catch (e) {\n            toast.error(e.message.toString());\n            console.log(e);\n        }\n\n        this.setState({ isProcessing: false });\n    };\n\n    render() {\n        return (\n            <IonPage>\n                <Navbar />\n                <IonContent>\n                    <>\n                        {this.state.isLoading ? (\n                            <IonLoading isOpen={true} message={'Connecting to Wallet and fetching chain data...'} />\n                        ) : (\n                            <>\n                                {this.state.isProcessing && (\n                                    <IonLoading\n                                        isOpen={this.state.isProcessing}\n                                        message={'Processing Transaction...'}\n                                    />\n                                )}\n\n                                {this.isMainnet() ? (\n                                    <SectionCard maxWidth=\"lg\">\n                                        <Typography variant=\"h2\" component=\"h4\" align=\"center\">\n                                            Please access this page with a Ethereum testnet wallet (Ropsten)\n                                        </Typography>\n                                    </SectionCard>\n                                ) : (\n                                    <>\n                                        <SectionCard maxWidth=\"lg\">\n                                            <LockdropCountdownPanel\n                                                startTime={moment.unix(parseInt(this.state.lockdropStart))}\n                                                endTime={moment.unix(parseInt(this.state.lockdropEnd))}\n                                                lockData={this.state.allLockEvents}\n                                            />\n                                        </SectionCard>\n\n                                        <LockdropForm\n                                            token=\"ETH\"\n                                            onSubmit={this.handleSubmit}\n                                            description={formInfo}\n                                            dusty\n                                        />\n\n                                        <SectionCard maxWidth=\"lg\">\n                                            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                                Real-time Lockdrop Status\n                                            </Typography>\n                                            {this.state.publicKey ? (\n                                                <ClaimStatus\n                                                    claimParams={this.state.lockParams}\n                                                    plasmApi={this.state.plasmApi}\n                                                    networkType=\"ETH\"\n                                                    plasmNetwork=\"Dusty\"\n                                                    publicKey={this.state.publicKey}\n                                                />\n                                            ) : (\n                                                <>\n                                                    <Container>\n                                                        <IonButton expand=\"block\" onClick={() => this.setPublicKey()}>\n                                                            Click to view lock claims\n                                                        </IonButton>\n                                                    </Container>\n                                                </>\n                                            )}\n                                        </SectionCard>\n\n                                        <LockedEthList\n                                            web3={this.state.web3}\n                                            accounts={this.state.accounts}\n                                            lockData={this.state.allLockEvents}\n                                        />\n                                    </>\n                                )}\n                            </>\n                        )}\n                    </>\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        );\n    }\n}\nexport default DustyEthLockPage;\n","/* eslint-disable react/prop-types */\nimport React, { useMemo, useCallback } from 'react';\nimport { TimeFormat } from '../types/LockdropModels';\nimport moment, { Moment, duration } from 'moment';\n\ninterface Props {\n    startTime: Moment;\n    endTime: Moment;\n    /**function callback if the countdown is over. This returns a boolean as the parameter */\n    onFinish?: Function;\n}\n\nconst CountdownTimer: React.FC<Props> = ({ startTime, endTime, onFinish }) => {\n    const now = moment().utc();\n    const handleCountdownFinish = useCallback(\n        (didFinish: boolean) => {\n            if (onFinish) onFinish(didFinish);\n        },\n        [onFinish],\n    );\n\n    const timeLeft = useMemo(() => {\n        const tillStart = moment(startTime).valueOf() - now.valueOf();\n\n        //let difference = tillStart;\n        let difference = duration(startTime.diff(now));\n\n        // if the lockdrop has already started\n        if (tillStart < 0) {\n            difference = duration(endTime.diff(now));\n        }\n\n        let _timeLeft: TimeFormat = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n\n        const tillEnd = moment(endTime).valueOf() - now.valueOf();\n        // check if the duration has ended\n        if (tillEnd > 0) {\n            _timeLeft = {\n                days: difference.days(),\n                hours: difference.hours(),\n                minutes: difference.minutes(),\n                seconds: difference.seconds(),\n            };\n        }\n        handleCountdownFinish(tillEnd < 0);\n        return _timeLeft;\n    }, [now, startTime, endTime, handleCountdownFinish]);\n\n    return (\n        <>\n            <p>\n                {timeLeft.days} Days {timeLeft.hours} Hours {timeLeft.minutes} Minutes {timeLeft.seconds} Seconds\n            </p>\n        </>\n    );\n};\n\nexport default CountdownTimer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect, useCallback } from 'react';\n//import { makeStyles, createStyles } from '@material-ui/core';\nimport * as btcLockdrop from '../../helpers/lockdrop/BitcoinLockdrop';\nimport {\n    IonChip,\n    IonIcon,\n    IonLabel,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonButtons,\n    IonButton,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonList,\n    IonItem,\n    IonSpinner,\n} from '@ionic/react';\nimport { lock, time } from 'ionicons/icons';\nimport { Tooltip } from '@material-ui/core';\nimport BigNumber from 'bignumber.js';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport CountdownTimer from '../CountdownTimer';\nimport moment from 'moment';\n\ninterface Props {\n    scriptAddress: string;\n    lockData: BlockStreamApi.Transaction[];\n    lockDurationDay: number;\n    onUnlock?: Function;\n}\n\n/**\n * Shows the number of BTC locked in the given P2SH address. Information is fetched from block stream\n * @param param0 P2SH address to look for\n */\nconst LockStatus: React.FC<Props> = ({ lockData, onUnlock, scriptAddress, lockDurationDay }) => {\n    const [lockedValue, setLockedValue] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    const [canUnlock, setCanUnlock] = useState(false);\n\n    const handleUnlock = (lock: BlockStreamApi.Transaction) => {\n        if (onUnlock) onUnlock(lock);\n    };\n\n    const getLockBal = useCallback(\n        (lock: BlockStreamApi.Transaction) => {\n            const _lockVout = lock.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n            if (_lockVout) return btcLockdrop.satoshiToBitcoin(_lockVout.value.toFixed()).toFixed();\n            else return '0';\n        },\n        [scriptAddress],\n    );\n\n    useEffect(() => {\n        if (lockData.length === 0) {\n            setLockedValue('');\n        } else {\n            let totalBal = new BigNumber(0);\n            lockData.forEach(i => {\n                const _lockVout = i.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n                if (_lockVout) {\n                    totalBal = totalBal.plus(new BigNumber(_lockVout.value.toFixed()));\n                }\n            });\n\n            setLockedValue(btcLockdrop.satoshiToBitcoin(totalBal).toFixed());\n        }\n    }, [lockData, lockedValue, scriptAddress]);\n\n    return (\n        <>\n            <IonModal isOpen={showModal} onDidDismiss={() => setShowModal(false)}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>BTC Lock Information</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={() => setShowModal(false)}>Close</IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardSubtitle>General information about your lock</IonCardSubtitle>\n                        <IonCardTitle>Lock Overview</IonCardTitle>\n                    </IonCardHeader>\n                    <>\n                        {lockData.length > 0 && lockedValue ? (\n                            <IonCardContent>\n                                <IonList>\n                                    {lockData.map(e => (\n                                        <IonItem key={e.txid}>\n                                            <IonLabel>\n                                                <h2>Transaction Hash: {e.txid}</h2>\n                                                <h3>Locked Amount: {getLockBal(e)} BTC</h3>\n                                                {e.status.confirmed ? (\n                                                    <>\n                                                        <p>Locked in block no. {e.status.block_height}</p>\n                                                        {canUnlock ? (\n                                                            <p>Tokens can be unlocked</p>\n                                                        ) : (\n                                                            <>\n                                                                <CountdownTimer\n                                                                    startTime={moment.unix(e.status.block_time)}\n                                                                    endTime={moment\n                                                                        .unix(e.status.block_time)\n                                                                        .add(lockDurationDay, 'days')}\n                                                                    onFinish={(u: boolean) => setCanUnlock(u)}\n                                                                />\n                                                                <p> Till unlock</p>\n                                                            </>\n                                                        )}\n                                                    </>\n                                                ) : (\n                                                    <p>Transaction not confirmed</p>\n                                                )}\n                                            </IonLabel>\n                                            {onUnlock && (\n                                                <IonButton\n                                                    fill=\"outline\"\n                                                    slot=\"end\"\n                                                    onClick={() => handleUnlock(e)}\n                                                    disabled={!canUnlock}\n                                                >\n                                                    Unlock\n                                                </IonButton>\n                                            )}\n                                        </IonItem>\n                                    ))}\n                                </IonList>\n                            </IonCardContent>\n                        ) : (\n                            <IonLabel>No locks found yet! (Please wait for it to be confirmed)</IonLabel>\n                        )}\n                    </>\n                </IonCard>\n            </IonModal>\n\n            <Tooltip title=\"Click for details\" aria-label=\"lock-detail\">\n                <IonChip onClick={() => setShowModal(true)}>\n                    <IonIcon icon={lockedValue ? lock : time} color={lockedValue ? 'success' : 'warning'} />\n                    {lockedValue ? (\n                        <IonLabel>{lockedValue} BTC locked</IonLabel>\n                    ) : (\n                        <>\n                            <IonLabel>No deposits detected yet</IonLabel>\n                            <IonSpinner name=\"bubbles\" />\n                        </>\n                    )}\n                </IonChip>\n            </Tooltip>\n        </>\n    );\n};\n\nexport default LockStatus;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState } from 'react';\nimport { Paper, Typography, makeStyles, createStyles, Tooltip, IconButton } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { IonToast } from '@ionic/react';\n\ninterface Props {\n    header: string;\n    message: string;\n    isCode?: boolean;\n    componentType?:\n        | 'inherit'\n        | 'button'\n        | 'overline'\n        | 'caption'\n        | 'h1'\n        | 'h2'\n        | 'h3'\n        | 'h4'\n        | 'h5'\n        | 'h6'\n        | 'subtitle1'\n        | 'subtitle2'\n        | 'body1'\n        | 'body2'\n        | 'srOnly';\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        messageBox: {\n            padding: theme.spacing(2, 4),\n            alignItems: 'center',\n        },\n        signMessage: {\n            alignItems: 'center',\n            display: 'flex',\n            justifyContent: 'center',\n            height: '100%',\n        },\n        message: {\n            wordBreak: 'break-all',\n        },\n        copyIcon: {\n            verticalAlign: 'middle',\n        },\n    }),\n);\n\nconst CopyMessageBox: React.FC<Props> = ({ header, message, componentType, isCode }) => {\n    const classes = useStyles();\n    const [showCopyToast, setCopyToast] = useState(false);\n\n    const clickCopyMessage = () => {\n        navigator.clipboard.writeText(message).then(\n            function() {\n                setCopyToast(true);\n            },\n            function(err) {\n                console.error('Async: Could not copy text: ', err);\n            },\n        );\n    };\n    return (\n        <>\n            <Paper elevation={1} className={classes.messageBox}>\n                <Typography component=\"h4\" variant=\"h3\">\n                    {header}:\n                </Typography>\n                <div className={classes.signMessage}>\n                    {isCode ? (\n                        <code className={classes.message}>{message}</code>\n                    ) : (\n                        <Typography\n                            component=\"h1\"\n                            variant={componentType ? componentType : 'h2'}\n                            className={classes.message}\n                        >\n                            {message}\n                        </Typography>\n                    )}\n\n                    <div className={classes.copyIcon}>\n                        <Tooltip title=\"Copy Message\" aria-label=\"copy\">\n                            <IconButton color=\"inherit\" component=\"span\" onClick={() => clickCopyMessage()}>\n                                <FileCopyIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </div>\n            </Paper>\n            <IonToast\n                isOpen={showCopyToast}\n                onDidDismiss={() => setCopyToast(false)}\n                message=\"Copied message to clipboard\"\n                duration={2000}\n            />\n        </>\n    );\n};\n\nexport default CopyMessageBox;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonAvatar,\n    IonSkeletonText,\n} from '@ionic/react';\nimport { qrEncodeUri } from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { makeStyles, createStyles, Grid } from '@material-ui/core';\nimport LockStatus from './LockStatus';\nimport CopyMessageBox from '../CopyMessageBox';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\n\ninterface Props {\n    address: string;\n    lockData: BlockStreamApi.Transaction[];\n    lockDurationDay: number;\n    onUnlock?: Function;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        qrImage: {\n            boxSizing: 'border-box',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            verticalAlign: 'middle',\n            alignSelf: 'center',\n            maxHeight: '100%',\n            maxWidth: 250,\n            objectFit: 'cover',\n        },\n        imageSkeleton: {\n            boxSizing: 'border-box',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            verticalAlign: 'middle',\n            alignSelf: 'center',\n            objectFit: 'cover',\n        },\n        chipGrid: {\n            position: 'relative',\n            padding: theme.spacing(2),\n        },\n        statusChip: {\n            [theme.breakpoints.up('sm')]: {\n                position: 'absolute',\n                right: 0,\n                top: 0,\n            },\n        },\n    }),\n);\n\nconst QrEncodedAddress: React.FC<Props> = ({ address, lockData, onUnlock, lockDurationDay }) => {\n    const classes = useStyles();\n    const [imageUri, setUri] = useState('');\n    const [imageLoaded, setImageLoad] = useState(false);\n\n    useEffect(() => {\n        qrEncodeUri(address).then(img => {\n            setUri(img);\n        });\n    }, [address]);\n\n    return (\n        <>\n            <IonCard>\n                <IonCardHeader>\n                    <img\n                        src={imageUri}\n                        className={classes.qrImage}\n                        alt=\"\"\n                        style={imageLoaded ? {} : { display: 'none' }}\n                        onLoad={() => setImageLoad(true)}\n                    />\n                    {imageLoaded ? null : (\n                        <IonAvatar className={classes.imageSkeleton}>\n                            <IonSkeletonText animated />\n                        </IonAvatar>\n                    )}\n\n                    <IonCardSubtitle>Please send the amount you want to lock to this P2SH address</IonCardSubtitle>\n                    <Grid container>\n                        <Grid item xs={12} sm={6}>\n                            <IonCardTitle>Lock Script Address</IonCardTitle>\n                        </Grid>\n                        <Grid item xs={12} sm={6} className={classes.chipGrid}>\n                            <div className={classes.statusChip}>\n                                <LockStatus\n                                    lockData={lockData}\n                                    scriptAddress={address}\n                                    onUnlock={onUnlock}\n                                    lockDurationDay={lockDurationDay}\n                                />\n                            </div>\n                        </Grid>\n                    </Grid>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <CopyMessageBox header=\"P2SH Address\" message={address} />\n                </IonCardContent>\n            </IonCard>\n        </>\n    );\n};\n\nexport default QrEncodedAddress;\n","/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonTextarea,\n    IonButton,\n    IonChip,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonButtons,\n    IonTitle,\n    IonText,\n    IonLoading,\n} from '@ionic/react';\nimport { makeStyles, createStyles, Container, Typography } from '@material-ui/core';\nimport * as btcLock from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { DropdownOption } from '../DropdownOption';\nimport { btcDustyDurations, btcDurations } from '../../data/lockInfo';\nimport QrEncodedAddress from './QrEncodedAddress';\nimport CopyMessageBox from '../CopyMessageBox';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport { OptionItem, Lockdrop, LockdropType } from 'src/types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport ClaimStatus from '../ClaimStatus';\nimport * as plasmUtils from '../../helpers/plasmUtils';\nimport { ApiPromise } from '@polkadot/api';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport * as polkadotCrypto from '@polkadot/util-crypto';\nimport * as bitcoinjsMessage from 'bitcoinjs-message';\n\ninterface Props {\n    networkType: bitcoinjs.Network;\n    plasmApi: ApiPromise;\n}\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        button: {\n            textAlign: 'center',\n        },\n    }),\n);\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\n/**\n * Obtains lockdrop participant's public key by receiving raw signatures and BTC address\n * @param networkType Bitcoin network to use\n */\nconst BtcRawSignature: React.FC<Props> = ({ networkType, plasmApi }) => {\n    const classes = useStyles();\n    // switch lock duration depending on the chain network\n    const networkLockDur = networkType === bitcoinjs.networks.bitcoin ? btcDurations : btcDustyDurations;\n\n    const [sigInput, setSig] = useState('');\n    const [addressInput, setAddress] = useState('');\n\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [p2shAddress, setP2sh] = useState('');\n    const [publicKey, setPublicKey] = useState('');\n    const [allLockParams, setAllLockParams] = useState<Lockdrop[]>([]);\n    const [currentScriptLocks, setCurrentScriptLocks] = useState<BlockStreamApi.Transaction[]>([]);\n    const [isLoading, setLoading] = useState<{ loadState: boolean; message: string }>({\n        loadState: false,\n        message: '',\n    });\n\n    // current lock unlock signature data set\n    // everything below here are used for raw unlock signature\n    const [lockUtxo, setLockUtxo] = useState<BlockStreamApi.Transaction>();\n    const [unlockTxBuilder, setUnlockTxBuilder] = useState<bitcoinjs.Transaction>();\n    const [userUnlockSig, setUserUnlockSig] = useState('');\n    const [unlockUtxoHex, setUnlockUtxoHex] = useState('');\n    const [showModal, setShowModal] = useState(false);\n    // in satoshi\n    const [unlockFee, setUnlockFee] = useState('0');\n\n    // signature nonce used for security\n    const sigNonce = useMemo(() => {\n        return polkadotCrypto.randomAsHex(2);\n    }, []);\n\n    const isValidFee = useCallback(\n        (fee: string, lockTx: BlockStreamApi.Transaction) => {\n            // checks if the given string is a valid integer\n            function checkInt(val: string) {\n                const checkString = new RegExp(/^(0|[1-9][0-9]*)$/);\n                return checkString.test(val);\n            }\n\n            if (typeof lockTx !== 'undefined' && !isNaN(parseInt(fee)) && checkInt(fee)) {\n                const lockP2sh = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n                const _fee = parseInt(fee);\n                const lockVout = lockTx.vout.find(locked => locked.scriptpubkey_address === lockP2sh.address!);\n                if (typeof lockVout === 'undefined') {\n                    return false;\n                }\n                return lockVout.value - _fee > 0 && _fee !== 0;\n            } else {\n                return false;\n            }\n        },\n        [publicKey, lockDuration.value, networkType],\n    );\n\n    const sigHash = useMemo(() => {\n        try {\n            if (typeof lockUtxo !== 'undefined' && !isNaN(parseInt(unlockFee)) && isValidFee(unlockFee, lockUtxo)) {\n                const _fee = parseInt(unlockFee);\n                const unsigned = btcLock.unsignedUnlockTx(lockUtxo, publicKey, lockDuration.value, networkType, _fee);\n                setShowModal(true);\n                setUnlockTxBuilder(unsigned.unsignedUnlockTx);\n                return unsigned.signatureHash;\n            }\n        } catch (err) {\n            console.log(err);\n            toast.error(err.message);\n        }\n        return 'N/A';\n    }, [unlockFee, publicKey, lockDuration.value, networkType, lockUtxo, isValidFee]);\n\n    const onSubmit = () => {\n        try {\n            if (!lockDuration || !addressInput || !sigInput) throw new Error('Please fill in all the inputs');\n\n            if (!btcLock.validateBtcAddress(addressInput, networkType))\n                throw new Error('Please use a valid Bitcoin address');\n            const _msg = btcLock.MESSAGE + sigNonce;\n\n            if (bitcoinjsMessage.verify(_msg, addressInput, sigInput)) {\n                const pub = btcLock.getPublicKey(addressInput, sigInput, _msg, networkType);\n                console.log({ _msg, addressInput, sigInput, pub });\n                setPublicKey(pub);\n\n                const p2sh = btcLock.getLockP2SH(lockDuration.value, pub, networkType);\n\n                if (typeof p2sh.address === 'string') {\n                    setP2sh(p2sh.address);\n                } else {\n                    throw new Error('Cannot create P2SH address');\n                }\n                toast.success('Successfully created lock script');\n            } else {\n                throw new Error('Invalid signature');\n            }\n\n            //setPublicKey(btcLock.compressPubKey(pubKeyInput, networkType));\n            toast.success('Successfully created lock script');\n        } catch (e) {\n            console.log(e);\n            toast.error(e.message);\n        }\n    };\n\n    // show unsigned transaction hahs\n    const unlockScriptTx = (lock: BlockStreamApi.Transaction) => {\n        // set default transaction fee\n        setUnlockFee((lock.fee * 0.1).toString());\n        setLockUtxo(lock);\n    };\n\n    // use the obtained transaction signature to create full signed transaction in hex\n    // this function will broad cast the transaction as well\n    const getUnlockUtxo = async () => {\n        if (unlockTxBuilder) {\n            try {\n                if (userUnlockSig === '') {\n                    throw new Error('Please paste the unlock signature');\n                }\n                setLoading({ loadState: true, message: 'broadcasting unlock transaction...' });\n                const lockScript = btcLock.btcLockScript(\n                    publicKey,\n                    btcLock.daysToBlockSequence(lockDuration.value),\n                    networkType,\n                );\n\n                const signedUnlockUtxo = btcLock.signTransactionRaw(\n                    unlockTxBuilder,\n                    userUnlockSig,\n                    lockScript,\n                    networkType,\n                );\n\n                console.log('Signed unlock UTXO hex:\\n' + signedUnlockUtxo);\n\n                setUnlockUtxoHex(signedUnlockUtxo);\n\n                const _net = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n                const unlockTxId = await btcLock.broadcastTransaction(signedUnlockUtxo, _net);\n                console.log('Broadcasted: ' + unlockTxId);\n                toast.success('Successfully broadcasted ' + unlockTxId);\n            } catch (e) {\n                toast.error(e.message);\n                console.log(e);\n            } finally {\n                setLoading({ loadState: false, message: '' });\n            }\n        }\n    };\n\n    // clean all unlock UTXO signature state when closing the modal\n    const cleanUnlockTxState = () => {\n        setLockUtxo(undefined);\n        setUnlockTxBuilder(undefined);\n        setUserUnlockSig('');\n        setUnlockFee('0');\n        setUnlockUtxoHex('');\n        setShowModal(false);\n    };\n\n    const getLockBal = useCallback(() => {\n        if (lockUtxo) {\n            const _lockVout = lockUtxo.vout.find(locked => locked.scriptpubkey_address === p2shAddress);\n            if (_lockVout) return btcLock.satoshiToBitcoin(_lockVout.value.toFixed()).toFixed();\n        }\n        return '0';\n    }, [lockUtxo, p2shAddress]);\n\n    const fetchLockdropParams = useCallback(async () => {\n        const blockStreamNet = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n        // initialize lockdrop data array\n        const _lockParams: Lockdrop[] = [];\n\n        // get all the possible lock addresses\n        networkLockDur.map(async (dur, index) => {\n            const scriptAddr = btcLock.getLockP2SH(dur.value, publicKey, networkType).address!;\n            // make a real-time lockdrop data structure with the current P2SH and duration\n            //const lock = await btcLock.getLockParameter(scriptAddr, dur.value, publicKey, blockStreamNet);\n\n            const locks = await btcLock.getBtcTxsFromAddress(scriptAddr, blockStreamNet);\n            const daysToEpoch = 60 * 60 * 24 * dur.value;\n\n            const lockParams = locks.map(i => {\n                const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddr);\n\n                if (lockVal) {\n                    return plasmUtils.createLockParam(\n                        LockdropType.Bitcoin,\n                        '0x' + i.txid,\n                        '0x' + publicKey,\n                        daysToEpoch.toString(),\n                        lockVal.value.toString(),\n                    );\n                } else {\n                    throw new Error('Could not find the lock value from the UTXO');\n                }\n            });\n\n            // if the lock data is the one that the user is viewing\n            if (p2shAddress === scriptAddr && dur.value === lockDuration.value) {\n                setCurrentScriptLocks(locks);\n            }\n\n            // loop through all the token locks within the given script\n            // this is to prevent nested array\n            lockParams.forEach(e => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const currentParam = plasmUtils.structToLockdrop(e as any);\n\n                _lockParams.push(currentParam);\n            });\n\n            // set lockdrop param data if we're in the final loop\n            // we do this because we want to set the values inside the then block\n            if (_lockParams.length > allLockParams.length && index === networkLockDur.length - 1) {\n                setAllLockParams(_lockParams);\n            }\n        });\n    }, [publicKey, networkType, p2shAddress, networkLockDur, allLockParams, lockDuration.value]);\n\n    useEffect(() => {\n        // change P2SH if the user changed the lock duration\n        if (publicKey && lockDuration.value !== 0) {\n            const lockScript = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n            setP2sh(lockScript.address!);\n            fetchLockdropParams().catch(e => {\n                toast.error(e);\n            });\n        }\n    }, [fetchLockdropParams, lockDuration.value, networkType, publicKey]);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            publicKey &&\n                fetchLockdropParams().catch(e => {\n                    toast.error(e);\n                });\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            {p2shAddress && (\n                <QrEncodedAddress\n                    address={p2shAddress}\n                    lockData={currentScriptLocks}\n                    onUnlock={unlockScriptTx}\n                    lockDurationDay={lockDuration.value}\n                />\n            )}\n\n            <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n            <IonModal isOpen={showModal} onDidDismiss={() => cleanUnlockTxState()}>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Unlock BTC Transaction</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={() => cleanUnlockTxState()}>Close</IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonCard>\n                    <IonCardHeader>\n                        <IonCardSubtitle>\n                            Provide the signature for your unlock script. This will unlock your tokens\n                        </IonCardSubtitle>\n                        <IonCardTitle>Unlock UTXO</IonCardTitle>\n                    </IonCardHeader>\n                    <IonCardContent>\n                        {lockUtxo && (\n                            <>\n                                <IonLabel>\n                                    <p>Lock ID: {lockUtxo.txid}</p>\n                                    <p>Lock Value: {getLockBal()} BTC</p>\n                                </IonLabel>\n                                {unlockUtxoHex ? (\n                                    <CopyMessageBox header=\"signed unlock transaction\" message={unlockUtxoHex} isCode />\n                                ) : (\n                                    <>\n                                        <CopyMessageBox header=\"unsigned\" message={sigHash} isCode />\n                                        <IonItem>\n                                            <IonLabel position=\"stacked\">\n                                                Paste your signature here<IonText color=\"danger\">*</IonText>\n                                            </IonLabel>\n                                            <IonTextarea\n                                                placeholder=\"f816733330690bdce1...\"\n                                                value={userUnlockSig}\n                                                onIonChange={e => setUserUnlockSig(e.detail.value!)}\n                                            ></IonTextarea>\n                                        </IonItem>\n                                        <IonItem>\n                                            <IonLabel position=\"floating\">Transaction fee</IonLabel>\n                                            <IonInput\n                                                placeholder={lockUtxo.fee.toString() + '  Satoshi'}\n                                                onIonInput={e => {\n                                                    const _inputFee = (e.target as HTMLInputElement).value;\n                                                    setUnlockFee(_inputFee);\n                                                }}\n                                                color={isValidFee(unlockFee, lockUtxo) ? 'primary' : 'danger'}\n                                            ></IonInput>\n                                        </IonItem>\n                                    </>\n                                )}\n\n                                <IonButton\n                                    disabled={!!unlockUtxoHex || !isValidFee(unlockFee, lockUtxo)}\n                                    onClick={() => getUnlockUtxo()}\n                                >\n                                    Generate unlock UTXO\n                                </IonButton>\n                            </>\n                        )}\n                    </IonCardContent>\n                </IonCard>\n            </IonModal>\n\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardSubtitle>\n                        Please provide the public key or address and signature of the BTC address you wish to use for\n                        the BTC lockdrop\n                    </IonCardSubtitle>\n                    <IonCardTitle>Get Public Key</IonCardTitle>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <CopyMessageBox header=\"message\" message={btcLock.MESSAGE + sigNonce} />\n                    <IonItem>\n                        <IonLabel position=\"stacked\">Bitcoin Address</IonLabel>\n                        <IonInput\n                            value={addressInput}\n                            placeholder=\"Enter BTC Address\"\n                            onIonChange={e => setAddress(e.detail.value!)}\n                        ></IonInput>\n                    </IonItem>\n\n                    <IonItem>\n                        <IonTextarea\n                            placeholder=\"Paste your base64 message signature here...\"\n                            value={sigInput}\n                            onIonChange={e => setSig(e.detail.value!)}\n                        ></IonTextarea>\n                    </IonItem>\n                    <IonLabel position=\"stacked\">Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={btcDustyDurations}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setDuration(\n                                    btcDustyDurations.filter(\n                                        i => i.value === ((e.target.value as unknown) as number),\n                                    )[0],\n                                )\n                            }\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n                    <div className={classes.button}>\n                        <IonButton onClick={onSubmit} disabled={!!publicKey}>\n                            Generate Lock Script\n                        </IonButton>\n                    </div>\n                </IonCardContent>\n            </IonCard>\n            <SectionCard maxWidth=\"lg\">\n                <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                    Real-time Lockdrop Status\n                </Typography>\n                {publicKey && lockDuration.value !== 0 ? (\n                    <ClaimStatus\n                        claimParams={allLockParams}\n                        plasmApi={plasmApi}\n                        networkType=\"BTC\"\n                        plasmNetwork=\"Dusty\"\n                        publicKey={publicKey}\n                    />\n                ) : (\n                    <>\n                        <Container>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                                Provide signature to view\n                            </Typography>\n                        </Container>\n                    </>\n                )}\n            </SectionCard>\n        </div>\n    );\n};\n\nexport default BtcRawSignature;\n","/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport TrezorConnect from 'trezor-connect';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonButton,\n    IonChip,\n    IonLoading,\n} from '@ionic/react';\nimport { DropdownOption } from '../DropdownOption';\nimport { btcDustyDurations, btcDurations } from '../../data/lockInfo';\nimport * as btcLock from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { toast } from 'react-toastify';\n//import BigNumber from 'bignumber.js';\nimport { makeStyles, createStyles, Typography, Container } from '@material-ui/core';\nimport QrEncodedAddress from './QrEncodedAddress';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport { OptionItem, Lockdrop, LockdropType } from 'src/types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport ClaimStatus from '../ClaimStatus';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../../helpers/plasmUtils';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\n\ninterface Props {\n    networkType: bitcoinjs.Network;\n    plasmApi: ApiPromise;\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        button: {\n            textAlign: 'center',\n        },\n    }),\n);\n\nconst TrezorLock: React.FC<Props> = ({ networkType, plasmApi }) => {\n    const classes = useStyles();\n\n    const defaultPath = networkType === bitcoinjs.networks.bitcoin ? \"m/44'/0'/0'\" : \"m/44'/1'/0'\";\n    // switch lock duration depending on the chain network\n    const networkLockDur = networkType === bitcoinjs.networks.bitcoin ? btcDurations : btcDustyDurations;\n\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [p2shAddress, setP2sh] = useState('');\n    const [allLockParams, setAllLockParams] = useState<Lockdrop[]>([]);\n    const [currentScriptLocks, setCurrentScriptLocks] = useState<BlockStreamApi.Transaction[]>([]);\n\n    // changing the path to n/49'/x'/x' will return a signature error\n    // this may be due to compatibility issues with BIP49\n    const [addressPath, setAddressPath] = useState(defaultPath);\n    const [isLoading, setLoading] = useState<{ loadState: boolean; message: string }>({\n        loadState: false,\n        message: '',\n    });\n    const [publicKey, setPublicKey] = useState('');\n\n    const inputValidation = () => {\n        if (lockDuration.value <= 0) {\n            return { valid: false, message: 'Please provide a lock duration' };\n        }\n\n        return { valid: true, message: 'valid input' };\n    };\n\n    const signLockdropClaims = () => {\n        const _msg = 'sign to display real-time lockdrop status';\n        setLoading({ loadState: true, message: 'Waiting for Trezor' });\n\n        if (!publicKey) {\n            // we have initiated the Trezor instance before this component mounted\n            TrezorConnect.signMessage({\n                path: addressPath,\n                message: _msg,\n                coin: networkType === bitcoinjs.networks.bitcoin ? 'BTC' : 'Testnet',\n            })\n                .then(res => {\n                    // we use a try-catch block because Trezor promise won't fail\n                    try {\n                        if (res.success) {\n                            const _pubKey = btcLock.getPublicKey(\n                                res.payload.address,\n                                res.payload.signature,\n                                _msg,\n                                networkType,\n                            );\n                            setPublicKey(_pubKey);\n                        } else {\n                            throw new Error(res.payload.error);\n                        }\n                    } catch (e) {\n                        toast.error(e.toString());\n                        console.log(e);\n                    }\n                })\n                .finally(() => {\n                    setLoading({\n                        loadState: false,\n                        message: '',\n                    });\n                });\n        }\n    };\n\n    const createLockAddress = () => {\n        setLoading({ loadState: true, message: 'Waiting for Trezor' });\n\n        if (!inputValidation().valid) {\n            toast.error(inputValidation().message);\n            setLoading({\n                loadState: false,\n                message: '',\n            });\n            return;\n        }\n\n        TrezorConnect.signMessage({\n            path: addressPath,\n            message: btcLock.MESSAGE,\n            coin: networkType === bitcoinjs.networks.bitcoin ? 'BTC' : 'Testnet',\n        })\n            .then(res => {\n                try {\n                    if (res.success) {\n                        console.log(res.payload);\n\n                        const _pubKey = btcLock.getPublicKey(res.payload.address, res.payload.signature, 'compressed');\n                        setPublicKey(_pubKey);\n\n                        const lockScript = btcLock.getLockP2SH(lockDuration.value, _pubKey, networkType);\n\n                        setP2sh(lockScript.address!);\n                    } else {\n                        throw new Error(res.payload.error);\n                    }\n                    setLoading({\n                        loadState: false,\n                        message: '',\n                    });\n                    toast.success('Successfully created lock script');\n                } catch (e) {\n                    toast.error(e.toString());\n                    console.log(e);\n                }\n            })\n            .finally(() => {\n                setLoading({\n                    loadState: false,\n                    message: '',\n                });\n            });\n    };\n\n    const unlockScriptTx = (lock: BlockStreamApi.Transaction) => {\n        //todo: implement this to form a unlock transaction\n        console.log(lock);\n    };\n\n    const fetchLockdropParams = useCallback(async () => {\n        const blockStreamNet = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n        // initialize lockdrop data array\n        const _lockParams: Lockdrop[] = [];\n\n        // get all the possible lock addresses\n        networkLockDur.map(async (dur, index) => {\n            const scriptAddr = btcLock.getLockP2SH(dur.value, publicKey, networkType).address!;\n            // make a real-time lockdrop data structure with the current P2SH and duration\n            //const lock = await btcLock.getLockParameter(scriptAddr, dur.value, publicKey, blockStreamNet);\n\n            const locks = await btcLock.getBtcTxsFromAddress(scriptAddr, blockStreamNet);\n            console.log('fetching data from block stream');\n            const daysToEpoch = 60 * 60 * 24 * dur.value;\n\n            const lockParams = locks.map(i => {\n                const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddr);\n\n                if (lockVal) {\n                    return plasmUtils.createLockParam(\n                        LockdropType.Bitcoin,\n                        '0x' + i.txid,\n                        '0x' + publicKey,\n                        daysToEpoch.toString(),\n                        lockVal.value.toString(),\n                    );\n                } else {\n                    throw new Error('Could not find the lock value from the UTXO');\n                }\n            });\n\n            // if the lock data is the one that the user is viewing\n            if (p2shAddress === scriptAddr && dur.value === lockDuration.value) {\n                setCurrentScriptLocks(locks);\n            }\n\n            // loop through all the token locks within the given script\n            // this is to prevent nested array\n            lockParams.forEach(e => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const currentParam = plasmUtils.structToLockdrop(e as any);\n\n                _lockParams.push(currentParam);\n            });\n\n            // set lockdrop param data if we're in the final loop\n            // we do this because we want to set the values inside the then block\n            if (_lockParams.length > allLockParams.length && index === networkLockDur.length - 1) {\n                setAllLockParams(_lockParams);\n            }\n        });\n    }, [publicKey, networkType, p2shAddress, networkLockDur, allLockParams, lockDuration.value]);\n\n    useEffect(() => {\n        // change P2SH if the user changed the lock duration\n        if (publicKey && p2shAddress) {\n            const lockScript = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n            setP2sh(lockScript.address!);\n        }\n        publicKey &&\n            fetchLockdropParams().catch(e => {\n                toast.error(e);\n            });\n    }, [fetchLockdropParams, lockDuration.value, networkType, publicKey, p2shAddress]);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            publicKey &&\n                fetchLockdropParams().catch(e => {\n                    toast.error(e);\n                });\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            {p2shAddress && (\n                <QrEncodedAddress\n                    address={p2shAddress}\n                    lockData={currentScriptLocks}\n                    onUnlock={unlockScriptTx}\n                    lockDurationDay={lockDuration.value}\n                />\n            )}\n            <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardSubtitle>\n                        Please fill in the following form with the correct information. Your address path will default\n                        to <code>{defaultPath}</code> if none is given. For more information, please check{' '}\n                        <a href=\"https://wiki.trezor.io/Address_path_(BIP32)\" rel=\"noopener noreferrer\" target=\"_blank\">\n                            this page\n                        </a>\n                        . Regarding the audit by Quantstamp, click{' '}\n                        <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a>{' '}\n                        for details\n                    </IonCardSubtitle>\n                    <IonCardTitle>Sign Message</IonCardTitle>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <IonLabel position=\"stacked\">Bitcoin Address</IonLabel>\n                    <IonItem>\n                        <IonLabel position=\"floating\">BIP32 Address Path</IonLabel>\n                        <IonInput\n                            placeholder={defaultPath}\n                            onIonChange={e => setAddressPath(e.detail.value!)}\n                        ></IonInput>\n                    </IonItem>\n\n                    <IonLabel position=\"stacked\">Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={networkLockDur}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setDuration(\n                                    networkLockDur.filter(i => i.value === ((e.target.value as unknown) as number))[0],\n                                )\n                            }\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n                    <div className={classes.button}>\n                        <IonButton onClick={() => createLockAddress()} disabled={p2shAddress !== ''}>\n                            Generate Lock Script\n                        </IonButton>\n                    </div>\n                </IonCardContent>\n            </IonCard>\n            <SectionCard maxWidth=\"lg\">\n                <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                    Real-time Lockdrop Status\n                </Typography>\n                {publicKey ? (\n                    <ClaimStatus\n                        claimParams={allLockParams}\n                        plasmApi={plasmApi}\n                        networkType=\"BTC\"\n                        plasmNetwork=\"Dusty\"\n                        publicKey={publicKey}\n                    />\n                ) : (\n                    <>\n                        <Container>\n                            <IonButton expand=\"block\" onClick={() => signLockdropClaims()}>\n                                Click to view lock claims\n                            </IonButton>\n                        </Container>\n                    </>\n                )}\n            </SectionCard>\n        </div>\n    );\n};\n\nexport default TrezorLock;\n","/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonButton,\n    IonChip,\n    IonLoading,\n} from '@ionic/react';\nimport { DropdownOption } from '../DropdownOption';\nimport { btcDustyDurations, btcDurations } from '../../data/lockInfo';\nimport * as btcLock from '../../helpers/lockdrop/BitcoinLockdrop';\nimport { toast } from 'react-toastify';\n//import BigNumber from 'bignumber.js';\nimport { makeStyles, createStyles, Typography, Container } from '@material-ui/core';\nimport QrEncodedAddress from './QrEncodedAddress';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport { OptionItem, Lockdrop, LockdropType } from 'src/types/LockdropModels';\nimport SectionCard from '../SectionCard';\nimport ClaimStatus from '../ClaimStatus';\nimport { ApiPromise } from '@polkadot/api';\nimport * as plasmUtils from '../../helpers/plasmUtils';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport AppBtc from '@ledgerhq/hw-app-btc';\nimport TransportU2F from '@ledgerhq/hw-transport-u2f';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\n\ninterface Props {\n    networkType: bitcoinjs.Network;\n    plasmApi: ApiPromise;\n}\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        button: {\n            textAlign: 'center',\n        },\n    }),\n);\n\nconst LedgerLock: React.FC<Props> = ({ networkType, plasmApi }) => {\n    const classes = useStyles();\n\n    const defaultPath = networkType === bitcoinjs.networks.bitcoin ? \"m/44'/0'/0'\" : \"m/44'/1'/0'\";\n    // switch lock duration depending on the chain network\n    const networkLockDur = networkType === bitcoinjs.networks.bitcoin ? btcDurations : btcDustyDurations;\n\n    const [lockDuration, setDuration] = useState<OptionItem>({ label: '', value: 0, rate: 0 });\n    const [p2shAddress, setP2sh] = useState('');\n    const [allLockParams, setAllLockParams] = useState<Lockdrop[]>([]);\n    const [currentScriptLocks, setCurrentScriptLocks] = useState<BlockStreamApi.Transaction[]>([]);\n    const [btcApi, setBtcApi] = useState<AppBtc>();\n\n    // changing the path to n/49'/x'/x' will return a signature error\n    // this may be due to compatibility issues with BIP49\n    const [addressPath, setAddressPath] = useState(defaultPath);\n    const [isLoading, setLoading] = useState<{ loadState: boolean; message: string }>({\n        loadState: false,\n        message: '',\n    });\n    const [publicKey, setPublicKey] = useState('');\n\n    const inputValidation = () => {\n        if (lockDuration.value <= 0) {\n            return { valid: false, message: 'Please provide a lock duration' };\n        }\n\n        return { valid: true, message: 'valid input' };\n    };\n\n    const ledgerApiInstance = async () => {\n        if (btcApi === undefined) {\n            try {\n                const ts = await TransportWebUSB.create();\n                const btc = new AppBtc(ts);\n                setBtcApi(btc);\n                return btc;\n            } catch (e) {\n                if (e.message === 'No device selected.') {\n                    throw new Error(e);\n                }\n                console.log(e);\n                console.log('failed to connect via WebUSB, trying U2F');\n                try {\n                    const ts = await TransportU2F.create();\n                    const btc = new AppBtc(ts);\n                    setBtcApi(btc);\n                    return btc;\n                } catch (err) {\n                    console.log(err);\n                    throw new Error(err);\n                }\n            }\n        } else {\n            return btcApi;\n        }\n    };\n\n    const viewClaims = async () => {\n        if (!publicKey) {\n            setLoading({ loadState: true, message: 'Waiting for Ledger' });\n\n            try {\n                const btc = await ledgerApiInstance();\n                btc.getWalletPublicKey(addressPath, { format: 'p2sh' }).then(wallet => {\n                    setPublicKey(wallet.publicKey);\n                });\n            } catch (err) {\n                toast.error(err.message);\n                console.log(err);\n            } finally {\n                setLoading({\n                    loadState: false,\n                    message: '',\n                });\n            }\n        }\n    };\n\n    const createLockAddress = async () => {\n        if (!inputValidation().valid) {\n            toast.error(inputValidation().message);\n            return;\n        }\n\n        setLoading({ loadState: true, message: 'Waiting for Ledger' });\n\n        try {\n            const btc = await ledgerApiInstance();\n\n            const wallet = await btc.getWalletPublicKey(addressPath, { format: 'p2sh' });\n            const lockScript = btcLock.getLockP2SH(lockDuration.value, wallet.publicKey, networkType);\n            console.log(wallet.publicKey);\n            setPublicKey(wallet.publicKey);\n            setP2sh(lockScript.address!);\n            toast.success('Successfully created lock script');\n        } catch (err) {\n            toast.error(err.message);\n            console.log(err);\n        } finally {\n            setLoading({\n                loadState: false,\n                message: '',\n            });\n        }\n    };\n\n    const unlockScriptTx = async (lock: BlockStreamApi.Transaction) => {\n        setLoading({ loadState: true, message: 'Singing unlock script' });\n\n        const lockScript = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n        if (typeof lockScript.redeem !== 'undefined') {\n            try {\n                // get ledger API\n                const btc = await ledgerApiInstance();\n\n                // get transaction hex, we fetch it online because BlockStream does not provide one\n                const rawTxHex = await btcLock.getTransactionHex(lock.txid, 'BTCTEST');\n\n                /// method 1 ==============================\n                const isSegWit = bitcoinjs.Transaction.fromHex(rawTxHex).hasWitnesses();\n                const txIndex = 0; //temp value\n\n                // transaction that locks the tokens\n                const utxo = btc.splitTransaction(rawTxHex);\n\n                const newTx = await btc.createPaymentTransactionNew({\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    inputs: [[utxo, txIndex, lockScript.redeem!.output!.toString('hex'), null]],\n                    associatedKeysets: [addressPath],\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    outputScriptHex: lockScript.output!.toString('hex'),\n                    segwit: isSegWit,\n                    sigHashType: bitcoinjs.Transaction.SIGHASH_ALL,\n                    lockTime: 0,\n                    useTrustedInputForSegwit: isSegWit,\n                });\n\n                console.log(newTx);\n\n                // method 2 ==============================\n                const ledgerSigner = await btcLock.generateSigner(\n                    btc,\n                    addressPath,\n                    networkType,\n                    rawTxHex,\n                    lockScript,\n                    publicKey,\n                );\n\n                // this is used for the random output address\n                const randomPublicKey = bitcoinjs.ECPair.makeRandom({ network: networkType, compressed: true })\n                    .publicKey;\n                const randomAddress = bitcoinjs.payments.p2pkh({ pubkey: randomPublicKey, network: networkType })\n                    .address;\n                const FEE = 1000;\n                // create the redeem UTXO\n                const unlockTx = await btcLock.btcUnlockTx(\n                    ledgerSigner,\n                    networkType,\n                    bitcoinjs.Transaction.fromHex(rawTxHex),\n                    lockScript.redeem!.output!,\n                    btcLock.daysToBlockSequence(lockDuration.value),\n                    randomAddress!,\n                    FEE,\n                );\n\n                const signedTxHex = unlockTx.toHex();\n                console.log(signedTxHex);\n            } catch (err) {\n                toast.error(err.message);\n                console.log(err);\n            } finally {\n                setLoading({\n                    loadState: false,\n                    message: '',\n                });\n            }\n        }\n    };\n\n    const fetchLockdropParams = useCallback(async () => {\n        const blockStreamNet = networkType === bitcoinjs.networks.bitcoin ? 'mainnet' : 'testnet';\n        // initialize lockdrop data array\n        const _lockParams: Lockdrop[] = [];\n\n        // get all the possible lock addresses\n        networkLockDur.map(async (dur, index) => {\n            const scriptAddr = btcLock.getLockP2SH(dur.value, publicKey, networkType).address!;\n\n            // make a real-time lockdrop data structure with the current P2SH and duration\n            const locks = await btcLock.getBtcTxsFromAddress(scriptAddr, blockStreamNet);\n            console.log('fetching data from block stream');\n            const daysToEpoch = 60 * 60 * 24 * dur.value;\n\n            const lockParams = locks.map(i => {\n                const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddr);\n\n                if (lockVal) {\n                    return plasmUtils.createLockParam(\n                        LockdropType.Bitcoin,\n                        '0x' + i.txid,\n                        '0x' + publicKey,\n                        daysToEpoch.toString(),\n                        lockVal.value.toString(),\n                    );\n                } else {\n                    throw new Error('Could not find the lock value from the UTXO');\n                }\n            });\n\n            // if the lock data is the one that the user is viewing\n            if (p2shAddress === scriptAddr && dur.value === lockDuration.value) {\n                setCurrentScriptLocks(locks);\n            }\n\n            // loop through all the token locks within the given script\n            // this is to prevent nested array\n            lockParams.forEach(e => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const currentParam = plasmUtils.structToLockdrop(e as any);\n\n                _lockParams.push(currentParam);\n            });\n\n            // set lockdrop param data if we're in the final loop\n            // we do this because we want to set the values inside the then block\n            if (_lockParams.length > allLockParams.length && index === networkLockDur.length - 1) {\n                setAllLockParams(_lockParams);\n            }\n        });\n    }, [publicKey, networkType, p2shAddress, networkLockDur, allLockParams, lockDuration.value]);\n\n    useEffect(() => {\n        // change P2SH if the user changed the lock duration\n        if (publicKey && p2shAddress) {\n            const lockScript = btcLock.getLockP2SH(lockDuration.value, publicKey, networkType);\n            setP2sh(lockScript.address!);\n        }\n        publicKey &&\n            fetchLockdropParams().catch(e => {\n                toast.error(e);\n            });\n    }, [fetchLockdropParams, lockDuration.value, networkType, publicKey, p2shAddress]);\n\n    // fetch lock data in the background\n    useEffect(() => {\n        const interval = setInterval(async () => {\n            publicKey &&\n                fetchLockdropParams().catch(e => {\n                    toast.error(e);\n                });\n        }, 5 * 1000);\n\n        // cleanup hook\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <div>\n            {p2shAddress && (\n                <QrEncodedAddress\n                    address={p2shAddress}\n                    lockData={currentScriptLocks}\n                    onUnlock={unlockScriptTx}\n                    lockDurationDay={lockDuration.value}\n                />\n            )}\n            <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardSubtitle>\n                        Please fill in the following form with the correct information. Your address path will default\n                        to <code>{defaultPath}</code> if none is given. For more information, please check{' '}\n                        <a\n                            href=\"https://www.ledger.com/academy/crypto/what-are-hierarchical-deterministic-hd-wallets\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            this page\n                        </a>\n                        . Regarding the audit by Quantstamp, click{' '}\n                        <a\n                            color=\"inherit\"\n                            href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                        >\n                            here\n                        </a>{' '}\n                        for details\n                    </IonCardSubtitle>\n                    <IonCardTitle>Sign Message</IonCardTitle>\n                </IonCardHeader>\n\n                <IonCardContent>\n                    <IonLabel position=\"stacked\">Bitcoin Address</IonLabel>\n                    <IonItem>\n                        <IonLabel position=\"floating\">BIP32 Address Path</IonLabel>\n                        <IonInput\n                            placeholder={defaultPath}\n                            onIonChange={e => setAddressPath(e.detail.value!)}\n                        ></IonInput>\n                    </IonItem>\n\n                    <IonLabel position=\"stacked\">Lock Duration</IonLabel>\n                    <IonItem>\n                        <DropdownOption\n                            dataSets={networkLockDur}\n                            onChoose={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setDuration(\n                                    networkLockDur.filter(i => i.value === ((e.target.value as unknown) as number))[0],\n                                )\n                            }\n                        ></DropdownOption>\n                        <IonChip>\n                            <IonLabel>\n                                {lockDuration.value\n                                    ? 'The rate is ' + lockDuration.rate + 'x'\n                                    : 'Please choose the duration'}\n                            </IonLabel>\n                        </IonChip>\n                    </IonItem>\n                    <div className={classes.button}>\n                        <IonButton onClick={() => createLockAddress()} disabled={p2shAddress !== ''}>\n                            Generate Lock Script\n                        </IonButton>\n                    </div>\n                </IonCardContent>\n            </IonCard>\n            <SectionCard maxWidth=\"lg\">\n                <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                    Real-time Lockdrop Status\n                </Typography>\n                {publicKey ? (\n                    <ClaimStatus\n                        claimParams={allLockParams}\n                        plasmApi={plasmApi}\n                        networkType=\"BTC\"\n                        plasmNetwork=\"Dusty\"\n                        publicKey={publicKey}\n                    />\n                ) : (\n                    <>\n                        <Container>\n                            <IonButton expand=\"block\" onClick={() => viewClaims()}>\n                                Click to view lock claims\n                            </IonButton>\n                        </Container>\n                    </>\n                )}\n            </SectionCard>\n        </div>\n    );\n};\n\nexport default LedgerLock;\n","import React, { useState, useEffect } from 'react';\nimport {\n    IonContent,\n    IonPage,\n    IonCard,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCardContent,\n    IonItem,\n    IonIcon,\n    IonLabel,\n    IonLoading,\n} from '@ionic/react';\nimport { warning } from 'ionicons/icons';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport SectionCard from '../components/SectionCard';\nimport { Typography, Link, makeStyles, createStyles } from '@material-ui/core';\nimport quantstampLogo from '../resources/quantstamp-logo.png';\n//import trezorLogo from '../resources/trezor_logo.svg';\n//import ledgerLogo from '../resources/ledger_logo.svg';\n//import * as btcLock from '../helpers/lockdrop/BitcoinLockdrop';\nimport { BtcWalletType } from '../types/LockdropModels';\nimport BtcRawSignature from '../components/BtcLock/BtcRawSignature';\nimport TrezorLock from '../components/BtcLock/TrezorLock';\nimport LedgerLock from '../components/BtcLock/LedgerLock';\n//import TrezorConnect, { DEVICE } from 'trezor-connect';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport * as plasmUtils from '../helpers/plasmUtils';\nimport { toast } from 'react-toastify';\nimport { ApiPromise } from '@polkadot/api';\n\ntoast.configure({\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n});\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        quantLogo: {\n            marginRight: theme.spacing(2),\n            maxHeight: 20,\n            height: '100%',\n            verticalAlign: 'middle',\n        },\n        textBox: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    }),\n);\n\nexport default function DustyBtcLockPage() {\n    const classes = useStyles();\n\n    const [walletType, setWalletType] = useState<BtcWalletType>(BtcWalletType.None);\n    //const [startedTrezor, setTrezorInst] = useState(false);\n    const [plasmApi, setPlasmApi] = useState<ApiPromise>({} as ApiPromise);\n    const [isLoading, setLoading] = useState<{\n        loadState: boolean;\n        message: string;\n    }>({\n        loadState: false,\n        message: '',\n    });\n\n    // const handleTrezor = () => {\n    //     // only initialize if there isn't a instance\n    //     if (startedTrezor) {\n    //         setWalletType(BtcWalletType.Trezor);\n    //     } else {\n    //         // create event listener to log device events\n    //         TrezorConnect.on('DEVICE_EVENT', event => {\n    //             if (event.type === DEVICE.CONNECT) {\n    //                 console.log('connected to Trezor device');\n    //             } else if (event.type === DEVICE.DISCONNECT) {\n    //                 console.log('disconnected to Trezor device');\n    //             }\n    //         });\n    //         // initialize trezor instance\n    //         TrezorConnect.init({\n    //             manifest: {\n    //                 email: 'developers@stake.co.jp',\n    //                 appUrl: 'https://lockdrop.plasmnet.io',\n    //             },\n    //             debug: true,\n    //             lazyLoad: true,\n    //             popup: true,\n    //         })\n    //             .then(() => {\n    //                 console.log('connected to Trezor');\n    //                 setWalletType(BtcWalletType.Trezor);\n    //                 setTrezorInst(true);\n    //             })\n    //             .catch(e => {\n    //                 console.log('something went wrong\\n' + e);\n    //             });\n    //     }\n    // };\n\n    const isPanelOpen = (panelWallet: BtcWalletType) => {\n        return walletType === panelWallet;\n    };\n\n    // const handleLedger = () => {\n    //     //todo: implement this\n    //     console.log('logging in to Ledger');\n    //     setWalletType(BtcWalletType.Ledger);\n    // };\n\n    const handleRawTx = () => {\n        setWalletType(BtcWalletType.Raw);\n    };\n\n    // connect to plasm node on mount\n    useEffect(() => {\n        setLoading({\n            loadState: true,\n            message: 'Connecting to Plasm Network',\n        });\n\n        plasmUtils\n            .createPlasmInstance(plasmUtils.PlasmNetwork.Dusty)\n            .then(e => {\n                setPlasmApi(e);\n                console.log('connected to Plasm network');\n            })\n            .catch(err => {\n                toast.error(err);\n                console.log(err);\n            })\n            .finally(() => {\n                setLoading({\n                    loadState: false,\n                    message: '',\n                });\n            });\n    }, []);\n\n    const ChangeSignView: React.FC = () => {\n        switch (walletType) {\n            default:\n            case BtcWalletType.None:\n                return null;\n            case BtcWalletType.Raw:\n                return <BtcRawSignature networkType={bitcoinjs.networks.testnet} plasmApi={plasmApi} />;\n            case BtcWalletType.Trezor:\n                return <TrezorLock networkType={bitcoinjs.networks.testnet} plasmApi={plasmApi} />;\n            case BtcWalletType.Ledger:\n                return <LedgerLock networkType={bitcoinjs.networks.testnet} plasmApi={plasmApi} />;\n        }\n    };\n\n    return (\n        <>\n            <IonPage>\n                <IonLoading isOpen={isLoading.loadState} message={isLoading.message} />\n                <Navbar />\n                <IonContent>\n                    <SectionCard maxWidth=\"md\">\n                        <div>\n                            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n                                Dusty Plasm Network BTC Lockdrop\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"h2\" align=\"center\">\n                                Audited by{' '}\n                                <Link\n                                    color=\"inherit\"\n                                    href=\"https://github.com/staketechnologies/lockdrop-ui/blob/16a2d495d85f2d311957b9cf366204fbfabadeaa/audit/quantstamp-audit.pdf\"\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    <img src={quantstampLogo} alt=\"\" className={classes.quantLogo} />\n                                </Link>\n                            </Typography>\n                        </div>\n                        <ChangeSignView />\n\n                        <IonCard>\n                            <IonCardHeader>\n                                <IonCardSubtitle>Choose your message signing method</IonCardSubtitle>\n                                <IonCardTitle>Sign in</IonCardTitle>\n                            </IonCardHeader>\n\n                            <IonCardContent>\n                                {/* <IonItem\n                                    button\n                                    onClick={() => handleTrezor()}\n                                    disabled={isPanelOpen(BtcWalletType.Trezor)}\n                                >\n                                    <IonIcon icon={trezorLogo} slot=\"start\" />\n                                    <IonLabel>Sign in with Trezor</IonLabel>\n                                </IonItem> */}\n\n                                {/* <IonItem\n                                    button\n                                    onClick={() => handleLedger()}\n                                    disabled={isPanelOpen(BtcWalletType.Ledger)}\n                                >\n                                    <IonIcon icon={ledgerLogo} slot=\"start\" />\n                                    <IonLabel>Sign in with Ledger</IonLabel>\n                                </IonItem> */}\n\n                                <IonItem button onClick={() => handleRawTx()} disabled={isPanelOpen(BtcWalletType.Raw)}>\n                                    <IonIcon icon={warning} slot=\"start\" />\n                                    <IonLabel>Direct sign</IonLabel>\n                                </IonItem>\n                            </IonCardContent>\n                        </IonCard>\n                    </SectionCard>\n                    <Footer />\n                </IonContent>\n            </IonPage>\n        </>\n    );\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { IonMenu, IonListHeader, IonContent, IonList, IonItem, IonIcon, IonLabel, IonRouterLink } from '@ionic/react';\nimport { Links } from '../data/links';\nimport homeIcon from '../resources/home-outline.svg';\nimport twitter from '../resources/logo-twitter.svg';\nimport discord from '../resources/logo-discord.svg';\nimport telegram from '../resources/logo-telegram.svg';\nimport github from '../resources/logo-github.svg';\nimport { firstLock, secondLock, dustyLock } from '../data/lockInfo';\nimport { LockMenu } from '../types/LockdropModels';\n\ninterface Props {\n    headerText: string;\n    menuItems: LockMenu[];\n}\nconst MenuSection: React.FC<Props> = ({ headerText, menuItems }) => {\n    return (\n        <IonList>\n            <IonListHeader>{headerText}</IonListHeader>\n            {menuItems.map((i, index) => (\n                <IonRouterLink routerLink={i.uri} key={index}>\n                    <IonItem button detail disabled={i.disabled}>\n                        <IonIcon src={i.icon} slot=\"start\" />\n                        <IonLabel>{i.title}</IonLabel>\n                    </IonItem>\n                </IonRouterLink>\n            ))}\n        </IonList>\n    );\n};\n\nconst SideMenu: React.FC = () => {\n    return (\n        <>\n            <IonMenu contentId=\"main\">\n                <IonListHeader>Sitemap</IonListHeader>\n                <IonContent>\n                    <IonList>\n                        <IonRouterLink routerLink=\"/lock-form\">\n                            <IonItem button detail>\n                                <IonIcon src={homeIcon} slot=\"start\" />\n                                <IonLabel>Home</IonLabel>\n                            </IonItem>\n                        </IonRouterLink>\n                    </IonList>\n\n                    <MenuSection headerText=\"First Lockdrop\" menuItems={firstLock} />\n                    <MenuSection headerText=\"Second Lockdrop\" menuItems={secondLock} />\n                    <MenuSection headerText=\"Dusty Lockdrop\" menuItems={dustyLock} />\n\n                    <IonList>\n                        <IonListHeader>External Links</IonListHeader>\n                        <a href={Links.discord} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={discord} slot=\"start\" />\n                                <IonLabel>Discord</IonLabel>\n                            </IonItem>\n                        </a>\n                        <a href={Links.telegram} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={telegram} slot=\"start\" />\n                                <IonLabel>Telegram</IonLabel>\n                            </IonItem>\n                        </a>\n                        <a href={Links.twitter} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={twitter} slot=\"start\" />\n                                <IonLabel>Twitter</IonLabel>\n                            </IonItem>\n                        </a>\n                        <a href={Links.github} rel=\"noopener noreferrer\" target=\"_blank\">\n                            <IonItem button detail>\n                                <IonIcon src={github} slot=\"start\" />\n                                <IonLabel>Github</IonLabel>\n                            </IonItem>\n                        </a>\n                    </IonList>\n                </IonContent>\n            </IonMenu>\n        </>\n    );\n};\n\nexport default SideMenu;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { IonApp, IonRouterOutlet, IonSplitPane } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport LandingPage from './pages/LandingPage';\nimport EthLockdropPage from './pages/EthLockdropPage';\nimport DustyEthLockPage from './pages/DustyEthLockPage';\nimport DustyBtcLockPage from './pages/DustyBtcLockPage';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\nimport SideMenu from './components/SideMenu';\n\nconst App: React.FC = () => {\n    return (\n        <IonApp>\n            <IonReactHashRouter>\n                <IonSplitPane contentId=\"main\" when=\"lg\">\n                    <SideMenu />\n\n                    <IonRouterOutlet id=\"main\" animated>\n                        <Route exact path=\"/lock-form\" component={LandingPage} />\n                        <Route path=\"/lock-form/first\" component={EthLockdropPage} />\n                        <Route path=\"/lock-form/dusty-eth\" component={DustyEthLockPage} />\n                        <Route path=\"/lock-form/dusty-btc\" component={DustyBtcLockPage} />\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/lock-form\" />} />\n                    </IonRouterOutlet>\n                </IonSplitPane>\n            </IonReactHashRouter>\n        </IonApp>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable-line  no-use-before-define */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\n\n// define web3 instance as a global variable\ndeclare global {\n    interface Window {\n        web3: Web3;\n        contract: Contract;\n    }\n}\nwindow.contract = window.contract || {};\nwindow.web3 = window.web3 || {};\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n            'Work Sans',\n            '-apple-system',\n            'BlinkMacSystemFont',\n            'Segoe UI',\n            'Roboto',\n            'Oxygen',\n            'Ubuntu',\n            'Cantarell',\n            'Fira Sans',\n            'Droid Sans',\n            'Helvetica Neue',\n        ].join(','),\n    },\n    palette: {\n        primary: {\n            main: '#4791db',\n            light: '#1976d2',\n            dark: '#115293',\n        },\n    },\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bitcoin_logo.c200e932.svg\";","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport bip68 from 'bip68';\nimport { LockdropType, HwSigner } from '../../types/LockdropModels';\nimport { Network } from 'bitcoinjs-lib';\nimport BigNumber from 'bignumber.js';\nimport * as plasmUtils from '../plasmUtils';\nimport { BlockStreamApi } from 'src/types/BlockStreamTypes';\nimport { SoChainApi } from 'src/types/SoChainTypes';\nimport AppBtc from '@ledgerhq/hw-app-btc';\nimport * as LedgerTypes from '../../types/LedgerTypes';\nimport * as bitcoinjsMessage from 'bitcoinjs-message';\n\n// https://www.blockchain.com/api/api_websocket\nexport const BLOCKCHAIN_WS = 'wss://ws.blockchain.info/inv';\n\n/**\n * the message that will be hashed and signed by the client\n */\nexport const MESSAGE = 'plasm network btc lock'; //todo: add nonce for security\n\n/**\n * returns a blob url for the qr encoded bitcoin address\n * @param btcAddress bitcoin address\n */\nexport async function qrEncodeUri(btcAddress: string, size = 300) {\n    const qrCode = URL.createObjectURL(\n        await fetch(`https://chart.googleapis.com/chart?chs=${size}x${size}&cht=qr&chl=${btcAddress}`).then(res =>\n            res.blob(),\n        ),\n    );\n\n    return qrCode;\n}\n\n/**\n * Returns a list of transactions from the given address.\n * This data is fetched from BlockStream\n * @param address BTC address to look for\n * @param network BTC network token (mainnet or testnet)\n */\nexport async function getBtcTxsFromAddress(address: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/address/${address}/txs`;\n    const res = await (await fetch(api)).text();\n    if (res.includes('Invalid Bitcoin address')) {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    const txs: BlockStreamApi.Transaction[] = JSON.parse(res);\n    return txs;\n}\n\n/**\n * Returns the transaction information from the given transaction hash/TXID.\n * This data is fetched from BlockStream\n * @param txid transaction hash or TXID in hex string\n * @param network BTC network token (mainnet or testnet)\n */\nexport async function getBtcTxFromTxId(txid: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/tx/${txid.replace('0x', '')}`;\n    const res = await (await fetch(api)).text();\n    if (res.includes('Invalid hex string')) {\n        throw new Error('Invalid hex string');\n    }\n\n    const tx: BlockStreamApi.Transaction = JSON.parse(res);\n    return tx;\n}\n\n/**\n * returns the transaction information including the inputs and outputs from ledger node API.\n * @param txId bitcoin transaction hash\n * @param isTestnet check if looking for BTC testnet\n */\nexport async function getTransactionEndpoint(txId: string, isTestnet?: boolean) {\n    const network = isTestnet ? 'btc_testnet' : 'btc';\n    const api = `https://api.ledgerwallet.com/blockchain/v2/${network}/transactions/${txId}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('error')) {\n        throw new Error(res);\n    }\n\n    const hashEndpoint: LedgerTypes.Transaction = JSON.parse(res);\n    return hashEndpoint;\n}\n\n/**\n * returns a raw transaction in hex strings from SoChain REST API.\n * @param txId transaction ID or transaction hash\n * @param network BTC network to choose from\n */\nexport async function getTransactionHex(txId: string, network: 'BTC' | 'BTCTEST') {\n    const api = `https://sochain.com/api/v2/get_tx/${network}/${txId}`;\n\n    const res = await (await fetch(api)).text();\n\n    if (res.includes('fail')) {\n        throw new Error(res);\n    }\n\n    const txHex: SoChainApi.Transaction = JSON.parse(res);\n    return txHex.data.tx_hex;\n}\n\n/**\n * Broadcasts the given transaction hex through BlockStream REST API\n * @param txHex raw transaction in hex string\n * @param network bitcoin network to broadcast for\n */\nexport async function broadcastTransaction(txHex: string, network: 'mainnet' | 'testnet') {\n    const api = `https://blockstream.info/${network === 'mainnet' ? '' : 'testnet/'}api/tx`;\n    const res = await fetch(api, {\n        method: 'POST',\n        body: txHex,\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        },\n    });\n    const responseText = await res.text();\n    if (!res.ok || responseText.includes('error')) {\n        throw new Error('Failed to broadcast the transaction:\\n' + responseText);\n    }\n\n    console.log(responseText);\n    // returns a tx ID if everything went well\n    return responseText;\n}\n\n/**\n * Validates the given BTC address by checking if it's in the correct format.\n * The default network is set to mainnet, byt anything else will require you to explicitly\n * pass it as the parameter.\n * @param address Bitcoin public address\n * @param network bitcoin network type (bitcoinjs-lib)\n */\nexport function validateBtcAddress(address: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.address.toOutputScript(address, network);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * Validates the given public key hex by importing it through bitcoinjs ECPair.\n * Returns true if it's valid, and false if it's invalid\n * @param publicKey Bitcoin public key hex string\n * @param network bitcoin network to check from. Defaults to mainnet\n */\nexport function validatePublicKey(publicKey: string, network?: bitcoinjs.networks.Network) {\n    try {\n        bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), { network: network });\n\n        const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network: network });\n        if (typeof address === 'string' && !validateBtcAddress(address, network)) {\n            throw new Error('Invalid public key');\n        }\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * returns the network type that the given address belongs to.\n * this will also validate the address before returning a value.\n * @param address bitcoin address\n */\nexport function getNetworkFromAddress(address: string) {\n    // sources: https://en.bitcoin.it/wiki/List_of_address_prefixes\n    // main net public key hash prefixes\n    const mainNetPref = ['1', '3', 'bc1'];\n    // test net public key hash prefixes\n    const testNetPref = ['m', 'n', 'tb1', '2'];\n    let addressNetwork: bitcoinjs.networks.Network;\n\n    if (new RegExp(`^(${mainNetPref.join('|')})`).test(address)) {\n        // check for regex match from the given address and array\n        addressNetwork = bitcoinjs.networks.bitcoin;\n        //return bitcoinjs.networks.bitcoin;\n    } else if (new RegExp(`^(${testNetPref.join('|')})`).test(address)) {\n        addressNetwork = bitcoinjs.networks.testnet;\n        //return bitcoinjs.networks.testnet;\n    } else {\n        throw new Error('Invalid Bitcoin address');\n    }\n\n    if (!validateBtcAddress(address, addressNetwork)) {\n        throw new Error('Invalid Bitcoin address');\n    }\n    return addressNetwork;\n}\n\n/**\n * converts satoshi to bitcoin\n * @param satoshi number of satoshi\n */\nexport function satoshiToBitcoin(satoshi: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshi\n    const denominator = new BigNumber(10).pow(new BigNumber(8));\n\n    if (typeof satoshi === 'string' || typeof satoshi === 'number') {\n        const _satNum = typeof satoshi === 'string' ? parseInt(satoshi) : satoshi;\n        if (isNaN(_satNum)) {\n            throw new Error('Provided value is not a number');\n        }\n        if (_satNum < 0) {\n            throw new Error('Provided value cannot be negative');\n        }\n    }\n\n    return new BigNumber(satoshi).div(denominator);\n}\n\n/**\n * converts bitcoin into satoshi\n * @param bitcoin number of bitcoin\n */\nexport function bitcoinToSatoshi(bitcoin: BigNumber | number | string) {\n    // 1 bitcoin = 100,000,000 satoshis\n    const denominator = new BigNumber('100000000');\n\n    if (typeof bitcoin === 'number' || typeof bitcoin === 'string') {\n        const _btcNum = typeof bitcoin === 'string' ? parseFloat(bitcoin) : bitcoin;\n        if (isNaN(_btcNum)) {\n            throw new Error('Provided value is not a number');\n        }\n        if (_btcNum < 0) {\n            throw new Error('Provided value cannot be negative');\n        }\n    }\n\n    return new BigNumber(bitcoin).multipliedBy(denominator).integerValue();\n}\n\n/**\n * converts an compressed public key to a uncompressed public key\n * @param publicKey compressed BTC public key\n */\nexport function decompressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: false,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * compresses the given BTC public key\n * @param publicKey uncompressed BTC public key\n * @param network bitcoin network the public key will encode for\n */\nexport function compressPubKey(publicKey: string, network: bitcoinjs.Network) {\n    const pubKeyPair = bitcoinjs.ECPair.fromPublicKey(Buffer.from(publicKey, 'hex'), {\n        compressed: true,\n        network: network,\n    });\n    return pubKeyPair.publicKey.toString('hex');\n}\n\n/**\n * returns a compressed public key from the given address and signature.\n * this function will only work with BIP44 encoded address. BIP49 or BIP84 will return\n * an error.\n * @param address bitcoin address in base58 string\n * @param signature the signature in base64 string or buffer\n * @param msg message that was used to sign excluding the prefix in string\n * @param network bitcoin network this belongs to. If none is given, the function will guess one\n */\nexport function getPublicKey(address: string, signature: string | Buffer, msg: string, network?: bitcoinjs.Network) {\n    const _net = network ? network : getNetworkFromAddress(address);\n\n    // returns a compressed public key by default\n    const _pubKey = bitcoinjsMessage.recover(msg, address, signature);\n\n    const recoveredAddress = bitcoinjs.payments.p2pkh({\n        pubkey: Buffer.from(_pubKey, 'hex'),\n        network: _net,\n    }).address!;\n\n    if (recoveredAddress !== address) {\n        throw new Error('Could not recover public key for ' + address);\n    }\n    return _pubKey;\n}\n\n/**\n * used for CHECKSEQUENCEVERIFY relative time lock.\n * this converts days to bip68 encoded block number.\n * @param days number of days to be converted to sequence number\n */\nexport function daysToBlockSequence(days: number) {\n    // verify lock days value\n    if (!Number.isInteger(days) || !Number.isFinite(days)) {\n        throw new Error('Lock days must be a valid integer, but received: ' + days);\n    }\n    const blocksPerDay = 144; //10 min per block. day = 6 * 24\n    const blockSequence = bip68.encode({ blocks: days * blocksPerDay });\n    if (blockSequence > 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    return blockSequence;\n}\n\n/**\n * create a bitcoin lock script buffer with the given public key.\n * this will lock the token for the given number of block sequence.\n * if the given public key is not compressed, this function will compress it.\n * @param publicKeyHex compressed BTC public key in hex string\n * @param blockSequence bip68 encoded block sequence\n * @param network bitcoin network the public key belongs to\n */\nexport function btcLockScript(publicKeyHex: string, blockSequence: number, network: bitcoinjs.Network): Buffer {\n    // verify block sequence value\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be a negative number');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (blockSequence > 65535) {\n        // maximum lock time https://en.bitcoin.it/wiki/Timelock\n        throw new Error('Block sequence cannot be more than 65535');\n    }\n    // verify public key by converting to an address\n    if (!validatePublicKey(publicKeyHex, network)) {\n        throw new Error('Invalid public key');\n    }\n\n    const pubKeyBuffer = Buffer.from(compressPubKey(publicKeyHex, network), 'hex');\n\n    return bitcoinjs.script.fromASM(\n        `\n        ${bitcoinjs.script.number.encode(blockSequence).toString('hex')}\n        OP_CHECKSEQUENCEVERIFY\n        OP_DROP\n        ${pubKeyBuffer.toString('hex')}\n        OP_CHECKSIG\n        `\n            .trim()\n            .replace(/\\s+/g, ' '),\n    );\n}\n\n/**\n * creates a P2SH instance that locks the sent token for the given duration.\n * the locked tokens can only be claimed by the provided public key\n * @param lockDays the lock duration in days\n * @param publicKey public key of the locker. This can be both compressed or uncompressed\n * @param network bitcoin network the script will generate for\n */\nexport function getLockP2SH(lockDays: number, publicKey: string, network: bitcoinjs.Network) {\n    // only check lock duration boundaries for main net\n    if (network === bitcoinjs.networks.bitcoin) {\n        if (lockDays > 300 || lockDays < 30) {\n            throw new Error('Lock duration must be between 30 days to 300 days');\n        }\n    }\n\n    return bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDays), network),\n        },\n    });\n}\n\n/**\n * creates a lock redeem UTXO\n * @param signer the signer for signing the transaction hash\n * @param network network type (bitcoinjs-lib)\n * @param lockTx the transaction that locks the value to P2SH address\n * @param lockScript the lock script (P2SH)\n * @param blockSequence block sequence to lock the funds, should be the same value used in the lock script\n * @param recipient recipient for the transaction output\n * @param fee transaction fee for the lock transaction\n */\nexport async function btcUnlockTx(\n    signer: HwSigner,\n    network: Network,\n    lockTx: bitcoinjs.Transaction,\n    lockScript: Buffer,\n    blockSequence: number,\n    recipientAddress: string,\n    fee: number, // satoshis\n) {\n    function idToHash(txid: string): Buffer {\n        return Buffer.from(txid, 'hex').reverse();\n    }\n    function toOutputScript(address: string): Buffer {\n        return bitcoinjs.address.toOutputScript(address, network);\n    }\n\n    if (blockSequence < 0) {\n        throw new Error('Block sequence cannot be less than zeo');\n    }\n    if (fee < 0) {\n        throw new Error('Transaction fee cannot be less than zero');\n    }\n    if (!Number.isInteger(blockSequence) || !Number.isFinite(blockSequence)) {\n        throw new Error('Block sequence must be a valid integer, but received: ' + blockSequence);\n    }\n    if (!Number.isInteger(fee) || !Number.isFinite(fee)) {\n        throw new Error('Fee must be a valid integer, but received: ' + fee);\n    }\n    const txIndex = 0;\n    if (lockTx.outs[txIndex].value - fee < 0) {\n        throw new Error(`Transaction fee cannot be larger than ${lockTx.outs[txIndex].value} Satoshi`);\n    }\n\n    //const sequence = bip68.encode({ blocks: lockBlocks });\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(idToHash(lockTx.getId()), txIndex, blockSequence);\n    tx.addOutput(toOutputScript(recipientAddress), lockTx.outs[txIndex].value - fee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType);\n    const signature = bitcoinjs.script.signature.encode(await signer.sign(signatureHash), hashType);\n\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network,\n        redeem: {\n            network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n    if (redeemScriptSig instanceof Buffer) {\n        tx.setInputScript(0, redeemScriptSig);\n    } else {\n        throw new Error('Transaction is invalid');\n    }\n\n    return tx;\n}\n\n/**\n * create a unsigned unlock transaction. This function will return a signature hash for the transaction that the user will sign,\n * the unsigned transaction instance and the lock P2SH payment instance that this will be unlocking for.\n * @param lockTransaction the lock UTXO that is already in the blockchain\n * @param publicKey public key of the user in string hex (compression is done within the function)\n * @param lockDuration script token locking duration in days (converted to relative block sequence within the function)\n * @param network the bitcoin network the transaction is for\n * @param txFee the transaction fee for the UTXO in Satoshi\n */\nexport function unsignedUnlockTx(\n    lockTransaction: BlockStreamApi.Transaction,\n    publicKey: string,\n    lockDuration: number,\n    network: bitcoinjs.Network,\n    txFee: number,\n) {\n    const lockP2sh = getLockP2SH(lockDuration, publicKey, network);\n    const { address } = bitcoinjs.payments.p2pkh({ pubkey: Buffer.from(publicKey, 'hex'), network });\n\n    if (typeof address === 'undefined') {\n        throw new Error('could not get P2PKH address from the given public key');\n    }\n\n    const lockVout = lockTransaction.vout.find(locked => locked.scriptpubkey_address === lockP2sh.address!);\n\n    if (typeof lockVout === 'undefined') {\n        throw new Error('Invalid public key provided');\n    }\n\n    if (lockVout.value - txFee < 0) {\n        throw new Error(`Transaction fee cannot be larger than ${lockVout.value} Satoshi`);\n    }\n    if (txFee <= 0) {\n        throw new Error('Transaction fee cannot be 0 or less');\n    }\n\n    const lockScript = btcLockScript(publicKey, daysToBlockSequence(lockDuration), network);\n    const sequence = 0;\n    const output = bitcoinjs.address.toOutputScript(address, network);\n\n    const tx = new bitcoinjs.Transaction();\n    tx.version = 2;\n    tx.addInput(Buffer.from(lockTransaction.txid, 'hex').reverse(), 0, sequence);\n    tx.addOutput(output, lockVout.value - txFee);\n\n    const hashType = bitcoinjs.Transaction.SIGHASH_ALL;\n    const signatureHash = tx.hashForSignature(0, lockScript, hashType).toString('hex');\n\n    return {\n        signatureHash,\n        unsignedUnlockTx: tx,\n        lockP2sh,\n    };\n}\n\n/**\n * Signs the given transaction and returns it as a raw transaction hex that is ready for being broadcasted.\n * The signature should be provided by the user.\n * @param unsignedTx transaction instance that isn't signed\n * @param userUnlockSig signature for the transaction signed by the sender's wallet\n * @param lockScript the lock script used for the lock transaction\n * @param network bitcoin network the transaction will be propagating for\n */\nexport function signTransactionRaw(\n    unsignedTx: bitcoinjs.Transaction,\n    userUnlockSig: string,\n    lockScript: Buffer,\n    network: bitcoinjs.Network,\n) {\n    if (userUnlockSig === '') {\n        throw new Error('Please paste the unlock signature');\n    }\n    const rawSignature = Buffer.from(userUnlockSig.replace(' ', ''), 'hex');\n\n    const signature = bitcoinjs.script.signature.encode(rawSignature, bitcoinjs.Transaction.SIGHASH_ALL);\n    const redeemScriptSig = bitcoinjs.payments.p2sh({\n        network: network,\n        redeem: {\n            network: network,\n            output: lockScript,\n            input: bitcoinjs.script.compile([signature]),\n        },\n    }).input;\n\n    unsignedTx.setInputScript(0, redeemScriptSig!);\n\n    const signedTxHex = unsignedTx.toHex();\n\n    return signedTxHex;\n}\n\n/**\n * creates a lockdrop parameter from the given lock script address and values\n * by fetching all transactions in the lock script address from block stream\n * @param scriptAddress the P2SH lock address\n * @param lockDuration duration of the lock in days\n * @param publicKey compressed BTC public key of the locker\n * @param network bitcoin network\n */\nexport async function getLockParameter(\n    scriptAddress: string,\n    lockDurationDays: number,\n    publicKey: string,\n    network: 'mainnet' | 'testnet',\n) {\n    const btcNetwork = network === 'mainnet' ? bitcoinjs.networks.bitcoin : bitcoinjs.networks.testnet;\n    const p2sh = bitcoinjs.payments.p2sh({\n        network: btcNetwork,\n        redeem: {\n            output: btcLockScript(publicKey, daysToBlockSequence(lockDurationDays), btcNetwork),\n        },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    if (p2sh.address && p2sh.address !== scriptAddress) {\n        throw new Error('Lock script information does not match P2SH');\n    }\n\n    if (!validatePublicKey(publicKey, btcNetwork)) {\n        throw new Error('Invalid Public Key');\n    }\n\n    if (lockDurationDays < 0 || !Number.isInteger(lockDurationDays)) {\n        throw new Error('Invalid lock duration');\n    }\n\n    const locks = await getBtcTxsFromAddress(scriptAddress, network);\n    const daysToEpoch = 60 * 60 * 24 * lockDurationDays;\n\n    const lockParams = locks.map(i => {\n        const lockVal = i.vout.find(locked => locked.scriptpubkey_address === scriptAddress);\n\n        if (typeof lockVal === 'undefined') {\n            throw new Error('Cannot find lock transaction for ' + scriptAddress);\n        }\n\n        return plasmUtils.createLockParam(\n            LockdropType.Bitcoin,\n            '0x' + i.txid,\n            '0x' + publicKey,\n            daysToEpoch.toString(),\n            lockVal.value.toString(),\n        );\n    });\n\n    return lockParams;\n}\n\n/**\n * Creates a signer instance for signing transactions made with bitcoinjs-lib\n * from Ledger BTC App.\n * @param ledgerApi\n * @param path HD address path\n * @param network bitcoin network the transaction will belong\n * @param lockTxHex raw lock UTXO in hex string\n * @param lockScript lock script used to generate the P2SH\n * @param publicKey compressed public key in string format\n */\nexport const generateSigner = async (\n    ledgerApi: AppBtc,\n    path: string,\n    network: bitcoinjs.Network,\n    lockTxHex: string,\n    lockScript: bitcoinjs.payments.Payment,\n    publicKey: string,\n) => {\n    const isSegWit = bitcoinjs.Transaction.fromHex(lockTxHex).hasWitnesses();\n    const ledgerTx = ledgerApi.splitTransaction(lockTxHex, isSegWit);\n    const txIndex = 0; //temp value\n\n    return {\n        network,\n        publicKey: Buffer.from(publicKey, 'hex'),\n\n        sign: async (hash: Buffer, lowR?: boolean) => {\n            console.log('signing with ledger\\n' + hash.toString('hex'));\n\n            const ledgerTxSignatures = await ledgerApi.signP2SHTransaction({\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                inputs: [[ledgerTx, txIndex, lockScript.redeem!.output!.toString('hex'), null]],\n                associatedKeysets: [path],\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                outputScriptHex: lockScript.output!.toString('hex'),\n                segwit: isSegWit,\n                transactionVersion: 2,\n                sigHashType: bitcoinjs.Transaction.SIGHASH_ALL,\n            });\n\n            console.log(ledgerTxSignatures);\n            console.log(hash.toString('hex') + lowR);\n            const [ledgerSignature] = ledgerTxSignatures;\n            const encodedSignature = (() => {\n                if (isSegWit) {\n                    return Buffer.from(ledgerSignature, 'hex');\n                }\n                return Buffer.concat([\n                    Buffer.from(ledgerSignature, 'hex'),\n                    Buffer.from('01', 'hex'), // SIGHASH_ALL\n                ]);\n            })();\n            const decoded = bitcoinjs.script.signature.decode(encodedSignature);\n            return decoded.signature;\n        },\n    } as HwSigner;\n};\n","module.exports = __webpack_public_path__ + \"static/media/quantstamp-logo.a01ad5b8.png\";","/* eslint-disable @typescript-eslint/camelcase */\nimport BigNumber from 'bignumber.js';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { Hash, H256 } from '@polkadot/types/interfaces';\nimport * as polkadotUtil from '@polkadot/util-crypto';\nimport { u8aConcat } from '@polkadot/util';\nimport { Struct, TypeRegistry, u64, u128, U8aFixed, u8 } from '@polkadot/types';\nimport * as plasmDefinitions from '@plasm/types/interfaces/definitions';\nimport { LockdropType, Claim, Lockdrop } from 'src/types/LockdropModels';\n\n/**\n * Plasm network enum\n */\nexport enum PlasmNetwork {\n    Local,\n    Dusty,\n    Main,\n}\n\n/**\n * converts the plasm network minimum denominator to PLM\n * @param femto minimum token value\n */\nexport function femtoToPlm(femto: BigNumber) {\n    if (femto.isLessThanOrEqualTo(new BigNumber(0))) {\n        return new BigNumber(0);\n    }\n    const plmDenominator = new BigNumber(10).pow(new BigNumber(15));\n    return femto.dividedBy(plmDenominator);\n}\n\n/**\n * used for adding new polkadot-js api types for communicating with plasm node\n */\nexport const plasmTypeReg = new TypeRegistry();\n\n/**\n * establishes a connection between the client and the plasm node with the given endpoint.\n * this will default to the main net node\n * @param network end point for the client to connect to\n */\nexport async function createPlasmInstance(network?: PlasmNetwork) {\n    let endpoint = '';\n    const types = Object.values(plasmDefinitions).reduce((res, { types }): object => ({ ...res, ...types }), {});\n\n    switch (network) {\n        case PlasmNetwork.Local:\n            endpoint = 'ws://127.0.0.1:9944';\n            break;\n        case PlasmNetwork.Dusty:\n            endpoint = 'wss://rpc.dusty.plasmnet.io/';\n            break;\n        case PlasmNetwork.Main: // main net endpoint will be the default value\n        default:\n            endpoint = 'wss://rpc.plasmnet.io';\n            break;\n    }\n\n    const wsProvider = new WsProvider(endpoint);\n\n    return await ApiPromise.create({\n        provider: wsProvider,\n        types: {\n            ...types,\n            // aliases that don't do well as part of interfaces\n            'voting::VoteType': 'VoteType',\n            'voting::TallyType': 'TallyType',\n            // chain-specific overrides\n            Address: 'GenericAddress',\n            Keys: 'SessionKeys4',\n            StakingLedger: 'StakingLedgerTo223',\n            Votes: 'VotesTo230',\n            ReferendumInfo: 'ReferendumInfoTo239',\n        },\n        // override duplicate type name\n        typesAlias: { voting: { Tally: 'VotingTally' } },\n    });\n}\n\n/**\n * convert the given lock duration in to PLM issue bonus rate\n * @param duration token lock duration\n */\nexport function lockDurationToRate(duration: number) {\n    if (duration < 30) {\n        return 0;\n    } else if (duration < 100) {\n        return 24;\n    } else if (duration < 300) {\n        return 100;\n    } else if (duration < 1000) {\n        return 360;\n    } else {\n        return 1600;\n    }\n}\n\n/**\n * Create a lock parameter object with the given lock information.\n * This is used for the real-time lockdrop module in Plasm for both ETH and BTC locks\n * @param network the lockdrop network type\n * @param transactionHash the lock transaction hash in hex string\n * @param publicKey locker's public key in hex string\n * @param duration lock duration in Unix epoch (seconds)\n * @param value lock value in the minimum denominator (Wei or Satoshi)\n */\nexport function createLockParam(\n    network: LockdropType,\n    transactionHash: string,\n    publicKey: string,\n    duration: string,\n    value: string,\n) {\n    const lockParam = new Struct(\n        plasmTypeReg,\n        {\n            type: u8,\n            transactionHash: 'H256',\n            publicKey: U8aFixed, // [u8; 33]\n            duration: u64,\n            value: u128,\n        },\n        {\n            type: network, // enum is converted to number\n            transactionHash: transactionHash,\n            publicKey: new U8aFixed(plasmTypeReg, publicKey, 264),\n            duration: new u64(plasmTypeReg, duration),\n            value: new u128(plasmTypeReg, value),\n        },\n    );\n\n    return lockParam;\n}\n\n/**\n * Returns the claim ID that is used to look up lockdrop claim requests\n * @param lockdropParam Lockdrop claim request parameter\n */\nexport function getClaimId(lockdropParam: Struct) {\n    return lockdropParam.hash;\n}\n\n/**\n * submits a real-time lockdrop claim request to plasm node and returns the transaction hash.\n * this is a unsigned transaction that is only authenticated by a simple PoW to prevent spamming\n * @param api plasm node api instance (polkadot-js api)\n * @param lockParam lockdrop parameter that contains the lock data\n * @param nonce nonce for PoW authentication with the node\n */\nexport async function sendLockClaimRequest(api: ApiPromise, lockParam: Struct, nonce: Uint8Array): Promise<Hash> {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.request(lockParam.toU8a(), nonce);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * generates a Plasm public address with the given ethereum public key\n * @param ethPubKey an compressed ECDSA public key. With or without the 0x prefix\n */\nexport function generatePlmAddress(publicKey: string) {\n    // converts a given hex string into Uint8Array\n    const toByteArray = (hexString: string) => {\n        const result = [];\n        for (let i = 0; i < hexString.length; i += 2) {\n            result.push(parseInt(hexString.substr(i, 2), 16));\n        }\n        return new Uint8Array(result);\n    };\n\n    // hash to blake2\n    const plasmPubKey = polkadotUtil.blake2AsU8a(toByteArray(publicKey.replace('0x', '')), 256);\n    // encode address\n    const plasmAddress = polkadotUtil.encodeAddress(plasmPubKey, 5);\n    return plasmAddress;\n}\n\n/**\n * Fetches the number of free balance for the given address in femto.\n * @param api polkadot-js api instance\n * @param plasmAddress Plasm network address\n * @param asPlm if the output value should be in PLM. Default denominator is in femto\n */\nexport async function getAddressBalance(api: ApiPromise, plasmAddress: string, asPlm?: boolean) {\n    const { data: balance } = await api.query.system.account(plasmAddress);\n    let _bal = new BigNumber(balance.free.toString());\n    if (asPlm) {\n        _bal = femtoToPlm(new BigNumber(balance.free.toString()));\n    }\n    return _bal;\n}\n\n/**\n * Fetches Plasm real-time lockdrop vote threshold and positive vote values.\n * @param api polkadot-js api instance\n */\nexport async function getLockdropVoteRequirements(api: ApiPromise) {\n    // number of minium votes required for a claim request to be accepted\n    const _voteThreshold = Number.parseInt((await api.query.plasmLockdrop.voteThreshold()).toString());\n    // number of outstanding votes (approve votes - decline votes) required for a claim request to be accepted\n    const _positiveVotes = Number.parseInt((await api.query.plasmLockdrop.positiveVotes()).toString());\n\n    return {\n        voteThreshold: _voteThreshold,\n        positiveVotes: _positiveVotes,\n    };\n}\n\n/**\n * sends a lockdrop claim request to Plasm net node. This will fund the ECDSA address.\n * @param api polkadot API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function sendLockdropClaim(api: ApiPromise, claimId: Uint8Array | H256) {\n    if (typeof api.tx.plasmLockdrop === 'undefined') {\n        throw new Error('Plasm node cannot find lockdrop module');\n    }\n\n    const claimRequestTx = api.tx.plasmLockdrop.claim(claimId);\n\n    const txHash = await claimRequestTx.send();\n\n    return txHash;\n}\n\n/**\n * Plasm network real-time lockdrop claim data query wrapper.\n * This will query the node with the given claim ID and wrap the data to a readable interface.\n * This function will return undefined if the claim data does not exists on the chain.\n * @param api Polkadot-js API instance\n * @param claimId real-time lockdrop claim ID\n */\nexport async function getClaimStatus(api: ApiPromise, claimId: Uint8Array | H256) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = (await api.query.plasmLockdrop.claims(claimId)) as any;\n\n    // wrap block query data to TypeScript interface\n    const data: Claim = {\n        params: {\n            // we use snake case here because this data is directly parsed from the node\n            type: claim.get('params').get('type'),\n            transactionHash: claim.get('params').get('transaction_hash'),\n            publicKey: claim.get('params').get('public_key'),\n            duration: claim.get('params').get('duration'),\n            value: claim.get('params').get('value'),\n        },\n        approve: claim.get('approve'),\n        decline: claim.get('decline'),\n        amount: claim.get('amount'),\n        complete: claim.get('complete'),\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_key, value] of Object.entries(data.params)) {\n        // check if data exists on chain\n        if (\n            typeof value === 'undefined' ||\n            value.toHex() === '0x000000000000000000000000000000000000000000000000000000000000000000' || // pub key\n            value.toHex() === '0x0000000000000000000000000000000000000000000000000000000000000000' // tx hash\n        ) {\n            return undefined;\n        }\n    }\n\n    return data;\n}\n\n/**\n * converts lockdrop parameter into a Lockdrop type\n * @param lockdropParam lockdrop parameter type in polakdot-js structure\n */\nexport function structToLockdrop(lockdropParam: Struct) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const claim = lockdropParam as any;\n    const param: Lockdrop = {\n        type: claim.get('type'),\n        transactionHash: claim.get('transactionHash'),\n        publicKey: claim.get('publicKey'),\n        duration: claim.get('duration'),\n        value: claim.get('value'),\n    };\n\n    return param;\n}\n\n/**\n * a Proof-of-Work function that hashes the lockdrop claim ID and the nonce\n * together to verify the unsigned transaction.\n * this will return the correct nonce in hex string\n * @param claimId the real-time lockdrop claim ID (blake2 hashed lock parameter)\n */\nexport function claimPowNonce(claimId: Uint8Array | H256): Uint8Array {\n    let nonce = polkadotUtil.randomAsU8a();\n    while (true) {\n        const hash = polkadotUtil.blake2AsU8a(u8aConcat(claimId, nonce));\n        //console.log('PoW hash: ' + u8aToHex(hash));\n        if (hash[0] > 0) {\n            nonce = polkadotUtil.randomAsU8a();\n            //console.log('Next nonce: ' + u8aToHex(nonce));\n        } else {\n            return nonce;\n        }\n    }\n}\n","import BN from 'bn.js';\nimport { Moment } from 'moment';\nimport { u64, u128, U8aFixed, BTreeSet } from '@polkadot/types';\nimport { H256, AuthorityId } from '@polkadot/types/interfaces';\n\n/**\n * lock contract parameter\n */\nexport interface LockInput {\n    duration: number; // in days\n    amount: BN; // in ETH\n    affiliation: string; // Ethereum address\n    rate: number;\n}\n\n/**\n * defines the method for creating a BTC transaction\n */\nexport enum BtcWalletType {\n    Trezor,\n    Ledger,\n    Raw,\n    None,\n}\n\nexport interface UnspentTx {\n    value: number;\n    txId: string;\n    vout: number;\n    address?: string;\n    height?: number;\n}\n\nexport interface LockMenu {\n    uri?: string;\n    icon?: string;\n    title: string;\n    startDate: Moment;\n    endDate: Moment;\n    disabled?: boolean;\n}\n\nexport interface TimeFormat {\n    days: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n}\n\nexport enum LockSeason {\n    First,\n    Second,\n    Dusty,\n    Third,\n}\n\n/**\n * The lockdrop lock token type. This is used for the real-time lockdrop module\n */\nexport enum LockdropType {\n    Bitcoin,\n    Ethereum,\n}\n\nexport interface LockEvent {\n    eth: BN; // this uses BN.js instead of BigNumber.js because that is what eth helper uses\n    duration: number; // in Unix epoch seconds\n    lock: string; // lock address\n    introducer: string;\n    blockNo: number;\n    timestamp: string; // in Unix epoch seconds\n    lockOwner: string; // locker's address\n    blockHash: string;\n    transactionHash: string;\n}\n\n// option data is the type that is going to be passed to the component\nexport interface OptionData {\n    dataSets: OptionItem[];\n    onChoose: Function;\n}\n\n// option item type is used to provide the data for dropdown items\nexport interface OptionItem {\n    label: string; // the dropdown display label\n    value: number; // dropdown select return value\n    rate: number;\n}\n\n/**\n * used for real-time lockdrop parameter\n * this data is used to communicate with Substrate\n */\nexport interface Lockdrop {\n    type: LockdropType;\n    transactionHash: H256; //H256\n    publicKey: U8aFixed; // [u8; 33]\n    duration: u64; // u64\n    value: u128; // u128\n}\n\nexport interface Claim {\n    params: Lockdrop;\n    approve: BTreeSet<AuthorityId>;\n    decline: BTreeSet<AuthorityId>;\n    amount: u128; // u128\n    complete: boolean;\n}\n\nexport interface HwSigner {\n    publicKey: Buffer;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    network?: any;\n    sign(hash: Buffer, lowR?: boolean): Buffer | Promise<Buffer>;\n    getPublicKey?(): Buffer;\n}\n"],"sourceRoot":""}