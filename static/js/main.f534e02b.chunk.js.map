{"version":3,"sources":["logo.png","drizzleOptions.js","LockdropContainer.js","LockdropComponent.js","middleware/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","options","web3","block","fallback","type","url","contracts","events","Lockdrop","polls","accounts","LockdropContainer","drizzleConnect","react_default","a","createElement","Container","className","lib","src","logo","id","alt","drizzle_react_components","contract","method","state","drizzleStatus","appMiddlewares","store","next","action","EventActions","EVENT_FIRED","name","contractEvent","event","message","returnValues","_message","display","concat","toast","success","position","POSITION","TOP_RIGHT","generateStore","drizzleOptions","disableReduxDevTools","App","drizzle_react","src_LockdropContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"05nEAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uVCoBzBC,UAlBC,CACdC,KAAM,CACJC,OAAO,EACPC,SAAU,CACRC,KAAM,KACNC,IAAK,wBAGTC,UAAW,SACXC,OAAQ,CACNC,SAAU,CAAC,WAEbC,MAAO,CAELC,SAAU,mDCFCC,EALWC,yBCEX,kBACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAU,OACnBJ,EAAAC,EAAAC,cAACG,EAAA,eAAD,MACAL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMC,GAAG,OAAOC,IAAI,eAC9BT,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,gDAGFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACQ,EAAA,aAAD,CAAcC,SAAS,WAAWC,OAAO,qBAE3CZ,EAAAC,EAAAC,cAACQ,EAAA,aAAD,CAAcC,SAAS,WAAWC,OAAO,YDvBvB,SAAAC,GAAK,MAAK,CAChChB,SAAUgB,EAAMhB,SAChBF,SAAUkB,EAAMpB,UAAUE,SAC1BmB,cAAeD,EAAMC,yBEWjBC,EAAiB,CAbO,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAC,GAC7C,GAAIA,EAAO3B,OAAS4B,eAAaC,YAAa,CAC5C,IAAMT,EAAWO,EAAOG,KAClBC,EAAgBJ,EAAOK,MAAMA,MAC7BC,EAAUN,EAAOK,MAAME,aAAaC,SACpCC,EAAO,GAAAC,OAAMjB,EAAN,KAAAiB,OAAkBN,EAAlB,OAAAM,OAAqCJ,GAElDK,QAAMC,QAAQH,EAAS,CAAEI,SAAUF,QAAMG,SAASC,YAEpD,OAAOhB,EAAKC,OAaCF,EAPDkB,wBAAc,CAC1BC,iBACApB,iBACAqB,sBAAsB,ICATC,mLAVX,OACErC,EAAAC,EAAAC,cAACoC,EAAA,gBAAD,CAAiBtB,MAAOA,EAAO7B,QAASgD,GACtCnC,EAAAC,EAAAC,cAACQ,EAAA,iBAAD,KACEV,EAAAC,EAAAC,cAACqC,EAAD,eALQC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECTNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f534e02b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.eaa7a31a.png\";","import Lockdrop from \"./contracts/Lockdrop.json\";\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545\",\n    },\n  },\n  contracts: [Lockdrop],\n  events: {\n    Lockdrop: [\"Locked\"],\n  },\n  polls: {\n    // set polling interval to 30secs so we don't get buried in poll events\n    accounts: 30000,\n  },\n};\n\nexport default options;\n","import LockdropComponent from './LockdropComponent'\nimport { drizzleConnect } from 'drizzle-react'\n\nconst mapStateToProps = state => ({\n  accounts: state.accounts,\n  Lockdrop: state.contracts.Lockdrop,\n  drizzleStatus: state.drizzleStatus\n})\n\nconst LockdropContainer = drizzleConnect(\n  LockdropComponent,\n  mapStateToProps\n)\n\nexport default LockdropContainer \n","import React from \"react\";\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {\n  ContractData,\n  ContractForm,\n} from \"drizzle-react-components\";\nimport Container from \"react-bootstrap/Container\";\n\nimport logo from \"./logo.png\";\n\nexport default () => (\n  <Container className=\"p-3\">\n    <ToastContainer />\n    <div>\n      <img src={logo} id=\"logo\" alt=\"plasm-logo\" />\n      <h1>Plasm Ethereum Lockdrop</h1>\n      <p>TODO: short instruction how to use</p>\n    </div>\n\n    <div className=\"section\">\n      <h2>Lockdrop Contract</h2>\n      <p>\n        <strong>Stored Value: </strong>\n        <ContractData contract=\"Lockdrop\" method=\"LOCK_START_TIME\" />\n      </p>\n      <ContractForm contract=\"Lockdrop\" method=\"lock\"/>\n    </div>\n  </Container>\n);\n","import { toast } from 'react-toastify'\nimport { generateStore, EventActions } from 'drizzle'\nimport drizzleOptions from '../drizzleOptions'\n\nconst contractEventNotifier = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const contract = action.name\n    const contractEvent = action.event.event\n    const message = action.event.returnValues._message\n    const display = `${contract}(${contractEvent}): ${message}`\n\n    toast.success(display, { position: toast.POSITION.TOP_RIGHT })\n  }\n  return next(action)\n}\n\n\nconst appMiddlewares = [ contractEventNotifier ]\n\nconst store = generateStore({\n  drizzleOptions,\n  appMiddlewares,\n  disableReduxDevTools: false  // enable ReduxDevTools!\n})\n\n// Use the store with DrizzleProvider\nexport default store\n","import React, { Component } from \"react\";\nimport { DrizzleProvider } from \"drizzle-react\";\nimport { LoadingContainer } from \"drizzle-react-components\";\n\nimport \"./App.css\";\n\nimport drizzleOptions from \"./drizzleOptions\";\nimport LockdropContainer from \"./LockdropContainer\";\nimport store from './middleware'\n\nclass App extends Component {\n  render() {\n    return (\n      <DrizzleProvider store={store} options={drizzleOptions}>\n        <LoadingContainer>\n          <LockdropContainer />\n        </LoadingContainer>\n      </DrizzleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}