{"version":3,"sources":["logo.png","drizzleOptions.js","LockdropForm.js","LockdropContainer.js","LockdropComponent.js","middleware/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","options","web3","block","fallback","type","url","contracts","events","Lockdrop","polls","accounts","LockdropForm","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","bind","assertThisInitialized","handleSubmit","contract","drizzle","utils","state","form-days","form-value","event","wei","Math","pow","days","methods","lock","cacheSend","value","setState","defineProperty","target","name","console","log","react_default","a","createElement","Form","Group","controlId","Label","InputGroup","Control","as","required","onChange","Append","Text","id","className","placeholder","href","Button","variant","onClick","Component","contextTypes","PropTypes","object","drizzleConnect","LockdropContainer","Container","lib","Image","src","logo","fluid","src_LockdropForm","drizzleStatus","appMiddlewares","store","next","action","EventActions","EVENT_FIRED","contractEvent","message","returnValues","_message","display","concat","toast","success","position","POSITION","TOP_RIGHT","generateStore","drizzleOptions","disableReduxDevTools","App","drizzle_react","drizzle_react_components","src_LockdropContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d32259d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.eaa7a31a.png\";","import Lockdrop from \"./contracts/Lockdrop.json\";\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545\",\n    },\n  },\n  contracts: [Lockdrop],\n  events: {\n    Lockdrop: [\"Locked\"],\n  },\n  polls: {\n    // set polling interval to 30secs so we don't get buried in poll events\n    accounts: 30000,\n  },\n};\n\nexport default options;\n","import React, { Component } from 'react';\nimport { drizzleConnect } from 'drizzle-react'\nimport PropTypes from \"prop-types\";\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\n\nclass LockdropForm extends Component {\n    constructor(props, context) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.contract = context.drizzle.contracts.Lockdrop;\n        this.utils = context.drizzle.web3.utils;\n\n        this.state = {\n            'form-days': 30,\n            'form-value': 1,\n        };\n    }\n\n    handleSubmit(event) {\n        let wei = this.state['form-value'] * 10**18;\n        let days = this.state['form-days'];\n        this.contract.methods.lock.cacheSend(days, {value: wei});\n    }\n\n    handleInputChange(event) {\n        this.setState({ [event.target.name]: event.target.value });\n        console.log(event.target.name);\n        console.log(event.target.value);\n    }\n\n    render() {\n        return (\n            <Form>\n            <Form.Group controlId='DurationSelect'>\n                <Form.Label>How long</Form.Label>\n                <InputGroup>\n                    <Form.Control as='select' name='form-days' required onChange={this.handleInputChange}>\n                        <option>30</option>\n                        <option>100</option>\n                        <option>300</option>\n                        <option>1000</option>\n                    </Form.Control>\n                    <InputGroup.Append>\n                        <InputGroup.Text id='days-addon'>days</InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form.Text className='text-muted'>\n                    Your asset will be released after days spended.\n                </Form.Text>\n            </Form.Group>\n            <Form.Group controlId='LockValue'>\n                <Form.Label>How much</Form.Label>\n                <InputGroup>\n                    <Form.Control type='number' name='form-value' placeholder='Locked value' required onChange={this.handleInputChange}/>\n                    <InputGroup.Append>\n                        <InputGroup.Text id='eth-addon'>ETH</InputGroup.Text>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form.Text className='text-muted'>\n                    ETH will be locked on simple separated contract (<a href='https://ropsten.etherscan.io/address/0xf1cf4d16451b1fcb2fd79e2212d617fb95d24a6e#code'>source code</a>)\n                </Form.Text>\n            </Form.Group>\n            <Button variant='primary' type='button' onClick={this.handleSubmit}>\n                Send\n            </Button>\n        </Form>)\n    }\n}\n\nLockdropForm.contextTypes = {\n    drizzle: PropTypes.object,\n};\n\nconst mapStateToProps = state => {\n    return {\n        Lockdrop: state.contracts.Lockdrop,\n    };\n};\n\nexport default drizzleConnect(LockdropForm, mapStateToProps);\n","import LockdropComponent from './LockdropComponent'\nimport { drizzleConnect } from 'drizzle-react'\n\nconst mapStateToProps = state => ({\n  accounts: state.accounts,\n  drizzleStatus: state.drizzleStatus\n})\n\nconst LockdropContainer = drizzleConnect(\n  LockdropComponent,\n  mapStateToProps\n)\n\nexport default LockdropContainer \n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport logo from './logo.png';\n\nimport LockdropForm from './LockdropForm';\n\nexport default (props) => (\n    <Container>\n        <ToastContainer />\n        <Image src={logo} fluid />\n        <LockdropForm />\n    </Container>\n)\n","import { toast } from 'react-toastify'\nimport { generateStore, EventActions } from 'drizzle'\nimport drizzleOptions from '../drizzleOptions'\n\nconst contractEventNotifier = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const contract = action.name\n    const contractEvent = action.event.event\n    const message = action.event.returnValues._message\n    const display = `${contract}(${contractEvent}): ${message}`\n\n    toast.success(display, { position: toast.POSITION.TOP_RIGHT })\n  }\n  return next(action)\n}\n\n\nconst appMiddlewares = [ contractEventNotifier ]\n\nconst store = generateStore({\n  drizzleOptions,\n  appMiddlewares,\n  disableReduxDevTools: false  // enable ReduxDevTools!\n})\n\n// Use the store with DrizzleProvider\nexport default store\n","import React, { Component } from \"react\";\nimport { DrizzleProvider } from \"drizzle-react\";\nimport { LoadingContainer } from \"drizzle-react-components\";\n\nimport \"./App.css\";\n\nimport drizzleOptions from \"./drizzleOptions\";\nimport LockdropContainer from \"./LockdropContainer\";\nimport store from './middleware'\n\nclass App extends Component {\n  render() {\n    return (\n      <DrizzleProvider store={store} options={drizzleOptions}>\n        <LoadingContainer>\n          <LockdropContainer />\n        </LoadingContainer>\n      </DrizzleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}